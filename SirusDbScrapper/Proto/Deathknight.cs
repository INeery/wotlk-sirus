// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: deathknight.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SirusDbScrapper.UIDatabase {

  /// <summary>Holder for reflection information generated from deathknight.proto</summary>
  public static partial class DeathknightReflection {

    #region Descriptor
    /// <summary>File descriptor for deathknight.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DeathknightReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFkZWF0aGtuaWdodC5wcm90bxIFcHJvdG8aDGNvbW1vbi5wcm90byLXEAoS",
            "RGVhdGhrbmlnaHRUYWxlbnRzEhAKCGJ1dGNoZXJ5GAEgASgFEhIKCnN1YnZl",
            "cnNpb24YAiABKAUSFQoNYmxhZGVfYmFycmllchgDIAEoBRIUCgxibGFkZWRf",
            "YXJtb3IYBCABKAUSFgoOc2NlbnRfb2ZfYmxvb2QYBSABKAUSKAogdHdvX2hh",
            "bmRlZF93ZWFwb25fc3BlY2lhbGl6YXRpb24YBiABKAUSEAoIcnVuZV90YXAY",
            "ByABKAgSFwoPZGFya19jb252aWN0aW9uGAggASgFEhoKEmRlYXRoX3J1bmVf",
            "bWFzdGVyeRgJIAEoBRIZChFpbXByb3ZlZF9ydW5lX3RhcBgKIAEoBRIYChBz",
            "cGVsbF9kZWZsZWN0aW9uGAsgASgFEhAKCHZlbmRldHRhGAwgASgFEhYKDmJs",
            "b29keV9zdHJpa2VzGA0gASgFEiAKGHZldGVyYW5fb2ZfdGhlX3RoaXJkX3dh",
            "chgOIAEoBRIVCg1tYXJrX29mX2Jsb29kGA8gASgIEhgKEGJsb29keV92ZW5n",
            "ZWFuY2UYECABKAUSGgoSYWJvbWluYXRpb25zX21pZ2h0GBEgASgFEhIKCmJs",
            "b29kd29ybXMYEiABKAUSEAoIaHlzdGVyaWEYEyABKAgSHwoXaW1wcm92ZWRf",
            "Ymxvb2RfcHJlc2VuY2UYFCABKAUSHQoVaW1wcm92ZWRfZGVhdGhfc3RyaWtl",
            "GBUgASgFEhMKC3N1ZGRlbl9kb29tGBYgASgFEhYKDnZhbXBpcmljX2Jsb29k",
            "GBcgASgIEh4KFndpbGxfb2ZfdGhlX25lY3JvcG9saXMYGCABKAUSFAoMaGVh",
            "cnRfc3RyaWtlGBkgASgIEhkKEW1pZ2h0X29mX21vZ3JhaW5lGBogASgFEhQK",
            "DGJsb29kX2dvcmdlZBgbIAEoBRIbChNkYW5jaW5nX3J1bmVfd2VhcG9uGBwg",
            "ASgIEhoKEmltcHJvdmVkX2ljeV90b3VjaBgdIAEoBRIbChNydW5pY19wb3dl",
            "cl9tYXN0ZXJ5GB4gASgFEhEKCXRvdWdobmVzcxgfIAEoBRIRCglpY3lfcmVh",
            "Y2gYICABKAUSEQoJYmxhY2tfaWNlGCEgASgFEhwKFG5lcnZlc19vZl9jb2xk",
            "X3N0ZWVsGCIgASgFEhIKCmljeV90YWxvbnMYIyABKAUSEQoJbGljaGJvcm5l",
            "GCQgASgIEhQKDGFubmloaWxhdGlvbhglIAEoBRIXCg9raWxsaW5nX21hY2hp",
            "bmUYJiABKAUSGgoSY2hpbGxfb2ZfdGhlX2dyYXZlGCcgASgFEhYKDmVuZGxl",
            "c3Nfd2ludGVyGCggASgFEhkKEWZyaWdpZF9kcmVhZHBsYXRlGCkgASgFEhMK",
            "C2dsYWNpZXJfcm90GCogASgFEhIKCmRlYXRoY2hpbGwYKyABKAgSGwoTaW1w",
            "cm92ZWRfaWN5X3RhbG9ucxgsIAEoCBIYChBtZXJjaWxlc3NfY29tYmF0GC0g",
            "ASgFEgwKBHJpbWUYLiABKAUSEgoKY2hpbGJsYWlucxgvIAEoBRIWCg5odW5n",
            "ZXJpbmdfY29sZBgwIAEoCBIfChdpbXByb3ZlZF9mcm9zdF9wcmVzZW5jZRgx",
            "IAEoBRIcChR0aHJlYXRfb2ZfdGhhc3NhcmlhbhgyIAEoBRIaChJibG9vZF9v",
            "Zl90aGVfbm9ydGgYMyABKAUSGQoRdW5icmVha2FibGVfYXJtb3IYNCABKAgS",
            "EwoLYWNjbGltYXRpb24YNSABKAUSFAoMZnJvc3Rfc3RyaWtlGDYgASgIEhoK",
            "Emd1aWxlX29mX2dvcmVmaWVuZBg3IAEoBRIWCg50dW5kcmFfc3RhbGtlchg4",
            "IAEoBRIVCg1ob3dsaW5nX2JsYXN0GDkgASgIEhcKD3ZpY2lvdXNfc3RyaWtl",
            "cxg6IAEoBRIRCgl2aXJ1bGVuY2UYOyABKAUSFAoMYW50aWNpcGF0aW9uGDwg",
            "ASgFEhAKCGVwaWRlbWljGD0gASgFEhEKCW1vcmJpZGl0eRg+IAEoBRIWCg51",
            "bmhvbHlfY29tbWFuZBg/IAEoBRIVCg1yYXZlbm91c19kZWFkGEAgASgFEhAK",
            "CG91dGJyZWFrGEEgASgFEhAKCG5lY3Jvc2lzGEIgASgFEhgKEGNvcnBzZV9l",
            "eHBsb3Npb24YQyABKAgSFwoPb25fYV9wYWxlX2hvcnNlGEQgASgFEhkKEWJs",
            "b29kX2Nha2VkX2JsYWRlGEUgASgFEhkKEW5pZ2h0X29mX3RoZV9kZWFkGEYg",
            "ASgFEhUKDXVuaG9seV9ibGlnaHQYRyABKAgSEAoIaW1wdXJpdHkYSCABKAUS",
            "DQoFZGlyZ2UYSSABKAUSEwoLZGVzZWNyYXRpb24YSiABKAUSGQoRbWFnaWNf",
            "c3VwcHJlc3Npb24YSyABKAUSDwoHcmVhcGluZxhMIAEoBRIYChBtYXN0ZXJf",
            "b2ZfZ2hvdWxzGE0gASgIEhIKCmRlc29sYXRpb24YTiABKAUSFwoPYW50aV9t",
            "YWdpY196b25lGE8gASgIEiAKGGltcHJvdmVkX3VuaG9seV9wcmVzZW5jZRhQ",
            "IAEoBRIUCgxnaG91bF9mcmVuenkYUSABKAgSEwoLY3J5cHRfZmV2ZXIYUiAB",
            "KAUSEwoLYm9uZV9zaGllbGQYUyABKAgSGAoQd2FuZGVyaW5nX3BsYWd1ZRhU",
            "IAEoBRIaChJlYm9uX3BsYWd1ZWJyaW5nZXIYVSABKAUSFgoOc2NvdXJnZV9z",
            "dHJpa2UYViABKAgSGQoRcmFnZV9vZl9yaXZlbmRhcmUYVyABKAUSFwoPc3Vt",
            "bW9uX2dhcmdveWxlGFggASgIIpUCCgtEZWF0aGtuaWdodBIrCgdvcHRpb25z",
            "GAMgASgLMhoucHJvdG8uRGVhdGhrbmlnaHQuT3B0aW9ucxoKCghSb3RhdGlv",
            "bhrMAQoHT3B0aW9ucxIcChRzdGFydGluZ19ydW5pY19wb3dlchgBIAEoARIS",
            "CgpwZXRfdXB0aW1lGAIgASgBEjIKFHVuaG9seV9mcmVuenlfdGFyZ2V0GAUg",
            "ASgLMhQucHJvdG8uVW5pdFJlZmVyZW5jZRIXCg9kcndfcGVzdGlfYXBwbHkY",
            "BiABKAgSDwoHdXNlX2FtcxgJIAEoCBIcChRhdmdfYW1zX3N1Y2Nlc3NfcmF0",
            "ZRgKIAEoARITCgthdmdfYW1zX2hpdBgLIAEoASKtBgoPVGFua0RlYXRoa25p",
            "Z2h0EjEKCHJvdGF0aW9uGAEgASgLMh8ucHJvdG8uVGFua0RlYXRoa25pZ2h0",
            "LlJvdGF0aW9uEi8KB29wdGlvbnMYAyABKAsyHi5wcm90by5UYW5rRGVhdGhr",
            "bmlnaHQuT3B0aW9ucxq/BAoIUm90YXRpb24SNgoGb3BlbmVyGAEgASgOMiYu",
            "cHJvdG8uVGFua0RlYXRoa25pZ2h0LlJvdGF0aW9uLk9wZW5lchJRChRvcHRp",
            "bWl6YXRpb25fc2V0dGluZxgCIAEoDjIzLnByb3RvLlRhbmtEZWF0aGtuaWdo",
            "dC5Sb3RhdGlvbi5PcHRpbWl6YXRpb25TZXR0aW5nEj8KC2Jsb29kX3NwZWxs",
            "GAMgASgOMioucHJvdG8uVGFua0RlYXRoa25pZ2h0LlJvdGF0aW9uLkJsb29k",
            "U3BlbGwSOgoIcHJlc2VuY2UYBCABKA4yKC5wcm90by5UYW5rRGVhdGhrbmln",
            "aHQuUm90YXRpb24uUHJlc2VuY2USRAoOYmxvb2RfdGFwX3ByaW8YBSABKA4y",
            "LC5wcm90by5UYW5rRGVhdGhrbmlnaHQuUm90YXRpb24uQmxvb2RUYXBQcmlv",
            "IiEKBk9wZW5lchILCgdSZWd1bGFyEAASCgoGVGhyZWF0EAEiJwoTT3B0aW1p",
            "emF0aW9uU2V0dGluZxIHCgNIcHMQABIHCgNUcHMQASI9CgpCbG9vZFNwZWxs",
            "Eg8KC0Jsb29kU3RyaWtlEAASDQoJQmxvb2RCb2lsEAESDwoLSGVhcnRTdHJp",
            "a2UQAiIsCgxCbG9vZFRhcFByaW8SDQoJRGVmZW5zaXZlEAASDQoJT2ZmZW5z",
            "aXZlEAEiLAoIUHJlc2VuY2USCQoFQmxvb2QQABIJCgVGcm9zdBABEgoKBlVu",
            "aG9seRACGnQKB09wdGlvbnMSHAoUc3RhcnRpbmdfcnVuaWNfcG93ZXIYASAB",
            "KAESMgoUdW5ob2x5X2ZyZW56eV90YXJnZXQYAiABKAsyFC5wcm90by5Vbml0",
            "UmVmZXJlbmNlEhcKD2RlZmVuc2l2ZV9kZWxheRgDIAEoASr+BQoVRGVhdGhr",
            "bmlnaHRNYWpvckdseXBoEh0KGURlYXRoa25pZ2h0TWFqb3JHbHlwaE5vbmUQ",
            "ABIbChVHbHlwaE9mQW50aU1hZ2ljU2hlbGwQjdQCEhgKEkdseXBoT2ZCbG9v",
            "ZFN0cmlrZRCy1gISFwoRR2x5cGhPZkJvbmVTaGllbGQQkNQCEhgKEkdseXBo",
            "T2ZDaGFpbnNPZkljZRCR1AISHgoYR2x5cGhPZkRhbmNpbmdSdW5lV2VhcG9u",
            "EOflAhIYChJHbHlwaE9mRGFya0NvbW1hbmQQktQCEhYKEEdseXBoT2ZEYXJr",
            "RGVhdGgQ7OUCEhoKFEdseXBoT2ZEZWF0aEFuZERlY2F5EJbUAhIWChBHbHlw",
            "aE9mRGVhdGhHcmlwEJXUAhIYChJHbHlwaE9mRGVhdGhTdHJpa2UQs9YCEhQK",
            "DkdseXBoT2ZEaXNlYXNlEO3lAhIYChJHbHlwaE9mRnJvc3RTdHJpa2UQl9QC",
            "EhgKEkdseXBoT2ZIZWFydFN0cmlrZRCO1AISGQoTR2x5cGhPZkhvd2xpbmdC",
            "bGFzdBDu5QISGgoUR2x5cGhPZkh1bmdlcmluZ0NvbGQQ6OUCEh4KGEdseXBo",
            "T2ZJY2Vib3VuZEZvcnRpdHVkZRCZ1AISFQoPR2x5cGhPZkljeVRvdWNoEJrU",
            "AhIXChFHbHlwaE9mT2JsaXRlcmF0ZRCb1AISGQoTR2x5cGhPZlBsYWd1ZVN0",
            "cmlrZRCc1AISFwoRR2x5cGhPZlJ1bmVTdHJpa2UQntQCEhQKDkdseXBoT2ZS",
            "dW5lVGFwELHWAhIaChRHbHlwaE9mU2NvdXJnZVN0cmlrZRCf1AISGAoSR2x5",
            "cGhPZlN0cmFuZ3VsYXRlEKDUAhIVCg9HbHlwaE9mVGhlR2hvdWwQndQCEh0K",
            "F0dseXBoT2ZVbmJyZWFrYWJsZUFybW9yEKHUAhIZChNHbHlwaE9mVW5ob2x5",
            "QmxpZ2h0EOvlAhIaChRHbHlwaE9mVmFtcGlyaWNCbG9vZBCi1AIq0wEKFURl",
            "YXRoa25pZ2h0TWlub3JHbHlwaBIdChlEZWF0aGtuaWdodE1pbm9yR2x5cGhO",
            "b25lEAASFQoPR2x5cGhPZkJsb29kVGFwEI/UAhIcChZHbHlwaE9mQ29ycHNl",
            "RXhwbG9zaW9uEJfVAhIaChRHbHlwaE9mRGVhdGhTRW1icmFjZRCT1AISGQoT",
            "R2x5cGhPZkhvcm5PZldpbnRlchCY1AISFwoRR2x5cGhPZlBlc3RpbGVuY2UQ",
            "mNUCEhYKEEdseXBoT2ZSYWlzZURlYWQQmdUCQh2qAhpTaXJ1c0RiU2NyYXBw",
            "ZXIuVUlEYXRhYmFzZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SirusDbScrapper.UIDatabase.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SirusDbScrapper.UIDatabase.DeathknightMajorGlyph), typeof(global::SirusDbScrapper.UIDatabase.DeathknightMinorGlyph), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.DeathknightTalents), global::SirusDbScrapper.UIDatabase.DeathknightTalents.Parser, new[]{ "Butchery", "Subversion", "BladeBarrier", "BladedArmor", "ScentOfBlood", "TwoHandedWeaponSpecialization", "RuneTap", "DarkConviction", "DeathRuneMastery", "ImprovedRuneTap", "SpellDeflection", "Vendetta", "BloodyStrikes", "VeteranOfTheThirdWar", "MarkOfBlood", "BloodyVengeance", "AbominationsMight", "Bloodworms", "Hysteria", "ImprovedBloodPresence", "ImprovedDeathStrike", "SuddenDoom", "VampiricBlood", "WillOfTheNecropolis", "HeartStrike", "MightOfMograine", "BloodGorged", "DancingRuneWeapon", "ImprovedIcyTouch", "RunicPowerMastery", "Toughness", "IcyReach", "BlackIce", "NervesOfColdSteel", "IcyTalons", "Lichborne", "Annihilation", "KillingMachine", "ChillOfTheGrave", "EndlessWinter", "FrigidDreadplate", "GlacierRot", "Deathchill", "ImprovedIcyTalons", "MercilessCombat", "Rime", "Chilblains", "HungeringCold", "ImprovedFrostPresence", "ThreatOfThassarian", "BloodOfTheNorth", "UnbreakableArmor", "Acclimation", "FrostStrike", "GuileOfGorefiend", "TundraStalker", "HowlingBlast", "ViciousStrikes", "Virulence", "Anticipation", "Epidemic", "Morbidity", "UnholyCommand", "RavenousDead", "Outbreak", "Necrosis", "CorpseExplosion", "OnAPaleHorse", "BloodCakedBlade", "NightOfTheDead", "UnholyBlight", "Impurity", "Dirge", "Desecration", "MagicSuppression", "Reaping", "MasterOfGhouls", "Desolation", "AntiMagicZone", "ImprovedUnholyPresence", "GhoulFrenzy", "CryptFever", "BoneShield", "WanderingPlague", "EbonPlaguebringer", "ScourgeStrike", "RageOfRivendare", "SummonGargoyle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.Deathknight), global::SirusDbScrapper.UIDatabase.Deathknight.Parser, new[]{ "Options" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.Deathknight.Types.Rotation), global::SirusDbScrapper.UIDatabase.Deathknight.Types.Rotation.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.Deathknight.Types.Options), global::SirusDbScrapper.UIDatabase.Deathknight.Types.Options.Parser, new[]{ "StartingRunicPower", "PetUptime", "UnholyFrenzyTarget", "DrwPestiApply", "UseAms", "AvgAmsSuccessRate", "AvgAmsHit" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.TankDeathknight), global::SirusDbScrapper.UIDatabase.TankDeathknight.Parser, new[]{ "Rotation", "Options" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation), global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Parser, new[]{ "Opener", "OptimizationSetting", "BloodSpell", "Presence", "BloodTapPrio" }, null, new[]{ typeof(global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Opener), typeof(global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.OptimizationSetting), typeof(global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodSpell), typeof(global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodTapPrio), typeof(global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Presence) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Options), global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Options.Parser, new[]{ "StartingRunicPower", "UnholyFrenzyTarget", "DefensiveDelay" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum DeathknightMajorGlyph {
    [pbr::OriginalName("DeathknightMajorGlyphNone")] None = 0,
    [pbr::OriginalName("GlyphOfAntiMagicShell")] GlyphOfAntiMagicShell = 43533,
    [pbr::OriginalName("GlyphOfBloodStrike")] GlyphOfBloodStrike = 43826,
    [pbr::OriginalName("GlyphOfBoneShield")] GlyphOfBoneShield = 43536,
    [pbr::OriginalName("GlyphOfChainsOfIce")] GlyphOfChainsOfIce = 43537,
    [pbr::OriginalName("GlyphOfDancingRuneWeapon")] GlyphOfDancingRuneWeapon = 45799,
    [pbr::OriginalName("GlyphOfDarkCommand")] GlyphOfDarkCommand = 43538,
    [pbr::OriginalName("GlyphOfDarkDeath")] GlyphOfDarkDeath = 45804,
    [pbr::OriginalName("GlyphOfDeathAndDecay")] GlyphOfDeathAndDecay = 43542,
    [pbr::OriginalName("GlyphOfDeathGrip")] GlyphOfDeathGrip = 43541,
    [pbr::OriginalName("GlyphOfDeathStrike")] GlyphOfDeathStrike = 43827,
    [pbr::OriginalName("GlyphOfDisease")] GlyphOfDisease = 45805,
    [pbr::OriginalName("GlyphOfFrostStrike")] GlyphOfFrostStrike = 43543,
    [pbr::OriginalName("GlyphOfHeartStrike")] GlyphOfHeartStrike = 43534,
    [pbr::OriginalName("GlyphOfHowlingBlast")] GlyphOfHowlingBlast = 45806,
    [pbr::OriginalName("GlyphOfHungeringCold")] GlyphOfHungeringCold = 45800,
    [pbr::OriginalName("GlyphOfIceboundFortitude")] GlyphOfIceboundFortitude = 43545,
    [pbr::OriginalName("GlyphOfIcyTouch")] GlyphOfIcyTouch = 43546,
    [pbr::OriginalName("GlyphOfObliterate")] GlyphOfObliterate = 43547,
    [pbr::OriginalName("GlyphOfPlagueStrike")] GlyphOfPlagueStrike = 43548,
    [pbr::OriginalName("GlyphOfRuneStrike")] GlyphOfRuneStrike = 43550,
    [pbr::OriginalName("GlyphOfRuneTap")] GlyphOfRuneTap = 43825,
    [pbr::OriginalName("GlyphOfScourgeStrike")] GlyphOfScourgeStrike = 43551,
    [pbr::OriginalName("GlyphOfStrangulate")] GlyphOfStrangulate = 43552,
    [pbr::OriginalName("GlyphOfTheGhoul")] GlyphOfTheGhoul = 43549,
    [pbr::OriginalName("GlyphOfUnbreakableArmor")] GlyphOfUnbreakableArmor = 43553,
    [pbr::OriginalName("GlyphOfUnholyBlight")] GlyphOfUnholyBlight = 45803,
    [pbr::OriginalName("GlyphOfVampiricBlood")] GlyphOfVampiricBlood = 43554,
  }

  public enum DeathknightMinorGlyph {
    [pbr::OriginalName("DeathknightMinorGlyphNone")] None = 0,
    [pbr::OriginalName("GlyphOfBloodTap")] GlyphOfBloodTap = 43535,
    [pbr::OriginalName("GlyphOfCorpseExplosion")] GlyphOfCorpseExplosion = 43671,
    [pbr::OriginalName("GlyphOfDeathSEmbrace")] GlyphOfDeathSembrace = 43539,
    [pbr::OriginalName("GlyphOfHornOfWinter")] GlyphOfHornOfWinter = 43544,
    [pbr::OriginalName("GlyphOfPestilence")] GlyphOfPestilence = 43672,
    [pbr::OriginalName("GlyphOfRaiseDead")] GlyphOfRaiseDead = 43673,
  }

  #endregion

  #region Messages
  public sealed partial class DeathknightTalents : pb::IMessage<DeathknightTalents>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeathknightTalents> _parser = new pb::MessageParser<DeathknightTalents>(() => new DeathknightTalents());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DeathknightTalents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.DeathknightReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeathknightTalents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeathknightTalents(DeathknightTalents other) : this() {
      butchery_ = other.butchery_;
      subversion_ = other.subversion_;
      bladeBarrier_ = other.bladeBarrier_;
      bladedArmor_ = other.bladedArmor_;
      scentOfBlood_ = other.scentOfBlood_;
      twoHandedWeaponSpecialization_ = other.twoHandedWeaponSpecialization_;
      runeTap_ = other.runeTap_;
      darkConviction_ = other.darkConviction_;
      deathRuneMastery_ = other.deathRuneMastery_;
      improvedRuneTap_ = other.improvedRuneTap_;
      spellDeflection_ = other.spellDeflection_;
      vendetta_ = other.vendetta_;
      bloodyStrikes_ = other.bloodyStrikes_;
      veteranOfTheThirdWar_ = other.veteranOfTheThirdWar_;
      markOfBlood_ = other.markOfBlood_;
      bloodyVengeance_ = other.bloodyVengeance_;
      abominationsMight_ = other.abominationsMight_;
      bloodworms_ = other.bloodworms_;
      hysteria_ = other.hysteria_;
      improvedBloodPresence_ = other.improvedBloodPresence_;
      improvedDeathStrike_ = other.improvedDeathStrike_;
      suddenDoom_ = other.suddenDoom_;
      vampiricBlood_ = other.vampiricBlood_;
      willOfTheNecropolis_ = other.willOfTheNecropolis_;
      heartStrike_ = other.heartStrike_;
      mightOfMograine_ = other.mightOfMograine_;
      bloodGorged_ = other.bloodGorged_;
      dancingRuneWeapon_ = other.dancingRuneWeapon_;
      improvedIcyTouch_ = other.improvedIcyTouch_;
      runicPowerMastery_ = other.runicPowerMastery_;
      toughness_ = other.toughness_;
      icyReach_ = other.icyReach_;
      blackIce_ = other.blackIce_;
      nervesOfColdSteel_ = other.nervesOfColdSteel_;
      icyTalons_ = other.icyTalons_;
      lichborne_ = other.lichborne_;
      annihilation_ = other.annihilation_;
      killingMachine_ = other.killingMachine_;
      chillOfTheGrave_ = other.chillOfTheGrave_;
      endlessWinter_ = other.endlessWinter_;
      frigidDreadplate_ = other.frigidDreadplate_;
      glacierRot_ = other.glacierRot_;
      deathchill_ = other.deathchill_;
      improvedIcyTalons_ = other.improvedIcyTalons_;
      mercilessCombat_ = other.mercilessCombat_;
      rime_ = other.rime_;
      chilblains_ = other.chilblains_;
      hungeringCold_ = other.hungeringCold_;
      improvedFrostPresence_ = other.improvedFrostPresence_;
      threatOfThassarian_ = other.threatOfThassarian_;
      bloodOfTheNorth_ = other.bloodOfTheNorth_;
      unbreakableArmor_ = other.unbreakableArmor_;
      acclimation_ = other.acclimation_;
      frostStrike_ = other.frostStrike_;
      guileOfGorefiend_ = other.guileOfGorefiend_;
      tundraStalker_ = other.tundraStalker_;
      howlingBlast_ = other.howlingBlast_;
      viciousStrikes_ = other.viciousStrikes_;
      virulence_ = other.virulence_;
      anticipation_ = other.anticipation_;
      epidemic_ = other.epidemic_;
      morbidity_ = other.morbidity_;
      unholyCommand_ = other.unholyCommand_;
      ravenousDead_ = other.ravenousDead_;
      outbreak_ = other.outbreak_;
      necrosis_ = other.necrosis_;
      corpseExplosion_ = other.corpseExplosion_;
      onAPaleHorse_ = other.onAPaleHorse_;
      bloodCakedBlade_ = other.bloodCakedBlade_;
      nightOfTheDead_ = other.nightOfTheDead_;
      unholyBlight_ = other.unholyBlight_;
      impurity_ = other.impurity_;
      dirge_ = other.dirge_;
      desecration_ = other.desecration_;
      magicSuppression_ = other.magicSuppression_;
      reaping_ = other.reaping_;
      masterOfGhouls_ = other.masterOfGhouls_;
      desolation_ = other.desolation_;
      antiMagicZone_ = other.antiMagicZone_;
      improvedUnholyPresence_ = other.improvedUnholyPresence_;
      ghoulFrenzy_ = other.ghoulFrenzy_;
      cryptFever_ = other.cryptFever_;
      boneShield_ = other.boneShield_;
      wanderingPlague_ = other.wanderingPlague_;
      ebonPlaguebringer_ = other.ebonPlaguebringer_;
      scourgeStrike_ = other.scourgeStrike_;
      rageOfRivendare_ = other.rageOfRivendare_;
      summonGargoyle_ = other.summonGargoyle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeathknightTalents Clone() {
      return new DeathknightTalents(this);
    }

    /// <summary>Field number for the "butchery" field.</summary>
    public const int ButcheryFieldNumber = 1;
    private int butchery_;
    /// <summary>
    /// Blood
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Butchery {
      get { return butchery_; }
      set {
        butchery_ = value;
      }
    }

    /// <summary>Field number for the "subversion" field.</summary>
    public const int SubversionFieldNumber = 2;
    private int subversion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Subversion {
      get { return subversion_; }
      set {
        subversion_ = value;
      }
    }

    /// <summary>Field number for the "blade_barrier" field.</summary>
    public const int BladeBarrierFieldNumber = 3;
    private int bladeBarrier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BladeBarrier {
      get { return bladeBarrier_; }
      set {
        bladeBarrier_ = value;
      }
    }

    /// <summary>Field number for the "bladed_armor" field.</summary>
    public const int BladedArmorFieldNumber = 4;
    private int bladedArmor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BladedArmor {
      get { return bladedArmor_; }
      set {
        bladedArmor_ = value;
      }
    }

    /// <summary>Field number for the "scent_of_blood" field.</summary>
    public const int ScentOfBloodFieldNumber = 5;
    private int scentOfBlood_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ScentOfBlood {
      get { return scentOfBlood_; }
      set {
        scentOfBlood_ = value;
      }
    }

    /// <summary>Field number for the "two_handed_weapon_specialization" field.</summary>
    public const int TwoHandedWeaponSpecializationFieldNumber = 6;
    private int twoHandedWeaponSpecialization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TwoHandedWeaponSpecialization {
      get { return twoHandedWeaponSpecialization_; }
      set {
        twoHandedWeaponSpecialization_ = value;
      }
    }

    /// <summary>Field number for the "rune_tap" field.</summary>
    public const int RuneTapFieldNumber = 7;
    private bool runeTap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RuneTap {
      get { return runeTap_; }
      set {
        runeTap_ = value;
      }
    }

    /// <summary>Field number for the "dark_conviction" field.</summary>
    public const int DarkConvictionFieldNumber = 8;
    private int darkConviction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DarkConviction {
      get { return darkConviction_; }
      set {
        darkConviction_ = value;
      }
    }

    /// <summary>Field number for the "death_rune_mastery" field.</summary>
    public const int DeathRuneMasteryFieldNumber = 9;
    private int deathRuneMastery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DeathRuneMastery {
      get { return deathRuneMastery_; }
      set {
        deathRuneMastery_ = value;
      }
    }

    /// <summary>Field number for the "improved_rune_tap" field.</summary>
    public const int ImprovedRuneTapFieldNumber = 10;
    private int improvedRuneTap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedRuneTap {
      get { return improvedRuneTap_; }
      set {
        improvedRuneTap_ = value;
      }
    }

    /// <summary>Field number for the "spell_deflection" field.</summary>
    public const int SpellDeflectionFieldNumber = 11;
    private int spellDeflection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellDeflection {
      get { return spellDeflection_; }
      set {
        spellDeflection_ = value;
      }
    }

    /// <summary>Field number for the "vendetta" field.</summary>
    public const int VendettaFieldNumber = 12;
    private int vendetta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Vendetta {
      get { return vendetta_; }
      set {
        vendetta_ = value;
      }
    }

    /// <summary>Field number for the "bloody_strikes" field.</summary>
    public const int BloodyStrikesFieldNumber = 13;
    private int bloodyStrikes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BloodyStrikes {
      get { return bloodyStrikes_; }
      set {
        bloodyStrikes_ = value;
      }
    }

    /// <summary>Field number for the "veteran_of_the_third_war" field.</summary>
    public const int VeteranOfTheThirdWarFieldNumber = 14;
    private int veteranOfTheThirdWar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VeteranOfTheThirdWar {
      get { return veteranOfTheThirdWar_; }
      set {
        veteranOfTheThirdWar_ = value;
      }
    }

    /// <summary>Field number for the "mark_of_blood" field.</summary>
    public const int MarkOfBloodFieldNumber = 15;
    private bool markOfBlood_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MarkOfBlood {
      get { return markOfBlood_; }
      set {
        markOfBlood_ = value;
      }
    }

    /// <summary>Field number for the "bloody_vengeance" field.</summary>
    public const int BloodyVengeanceFieldNumber = 16;
    private int bloodyVengeance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BloodyVengeance {
      get { return bloodyVengeance_; }
      set {
        bloodyVengeance_ = value;
      }
    }

    /// <summary>Field number for the "abominations_might" field.</summary>
    public const int AbominationsMightFieldNumber = 17;
    private int abominationsMight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AbominationsMight {
      get { return abominationsMight_; }
      set {
        abominationsMight_ = value;
      }
    }

    /// <summary>Field number for the "bloodworms" field.</summary>
    public const int BloodwormsFieldNumber = 18;
    private int bloodworms_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Bloodworms {
      get { return bloodworms_; }
      set {
        bloodworms_ = value;
      }
    }

    /// <summary>Field number for the "hysteria" field.</summary>
    public const int HysteriaFieldNumber = 19;
    private bool hysteria_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Hysteria {
      get { return hysteria_; }
      set {
        hysteria_ = value;
      }
    }

    /// <summary>Field number for the "improved_blood_presence" field.</summary>
    public const int ImprovedBloodPresenceFieldNumber = 20;
    private int improvedBloodPresence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedBloodPresence {
      get { return improvedBloodPresence_; }
      set {
        improvedBloodPresence_ = value;
      }
    }

    /// <summary>Field number for the "improved_death_strike" field.</summary>
    public const int ImprovedDeathStrikeFieldNumber = 21;
    private int improvedDeathStrike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedDeathStrike {
      get { return improvedDeathStrike_; }
      set {
        improvedDeathStrike_ = value;
      }
    }

    /// <summary>Field number for the "sudden_doom" field.</summary>
    public const int SuddenDoomFieldNumber = 22;
    private int suddenDoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuddenDoom {
      get { return suddenDoom_; }
      set {
        suddenDoom_ = value;
      }
    }

    /// <summary>Field number for the "vampiric_blood" field.</summary>
    public const int VampiricBloodFieldNumber = 23;
    private bool vampiricBlood_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool VampiricBlood {
      get { return vampiricBlood_; }
      set {
        vampiricBlood_ = value;
      }
    }

    /// <summary>Field number for the "will_of_the_necropolis" field.</summary>
    public const int WillOfTheNecropolisFieldNumber = 24;
    private int willOfTheNecropolis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WillOfTheNecropolis {
      get { return willOfTheNecropolis_; }
      set {
        willOfTheNecropolis_ = value;
      }
    }

    /// <summary>Field number for the "heart_strike" field.</summary>
    public const int HeartStrikeFieldNumber = 25;
    private bool heartStrike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HeartStrike {
      get { return heartStrike_; }
      set {
        heartStrike_ = value;
      }
    }

    /// <summary>Field number for the "might_of_mograine" field.</summary>
    public const int MightOfMograineFieldNumber = 26;
    private int mightOfMograine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MightOfMograine {
      get { return mightOfMograine_; }
      set {
        mightOfMograine_ = value;
      }
    }

    /// <summary>Field number for the "blood_gorged" field.</summary>
    public const int BloodGorgedFieldNumber = 27;
    private int bloodGorged_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BloodGorged {
      get { return bloodGorged_; }
      set {
        bloodGorged_ = value;
      }
    }

    /// <summary>Field number for the "dancing_rune_weapon" field.</summary>
    public const int DancingRuneWeaponFieldNumber = 28;
    private bool dancingRuneWeapon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DancingRuneWeapon {
      get { return dancingRuneWeapon_; }
      set {
        dancingRuneWeapon_ = value;
      }
    }

    /// <summary>Field number for the "improved_icy_touch" field.</summary>
    public const int ImprovedIcyTouchFieldNumber = 29;
    private int improvedIcyTouch_;
    /// <summary>
    /// Frost
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedIcyTouch {
      get { return improvedIcyTouch_; }
      set {
        improvedIcyTouch_ = value;
      }
    }

    /// <summary>Field number for the "runic_power_mastery" field.</summary>
    public const int RunicPowerMasteryFieldNumber = 30;
    private int runicPowerMastery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RunicPowerMastery {
      get { return runicPowerMastery_; }
      set {
        runicPowerMastery_ = value;
      }
    }

    /// <summary>Field number for the "toughness" field.</summary>
    public const int ToughnessFieldNumber = 31;
    private int toughness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Toughness {
      get { return toughness_; }
      set {
        toughness_ = value;
      }
    }

    /// <summary>Field number for the "icy_reach" field.</summary>
    public const int IcyReachFieldNumber = 32;
    private int icyReach_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IcyReach {
      get { return icyReach_; }
      set {
        icyReach_ = value;
      }
    }

    /// <summary>Field number for the "black_ice" field.</summary>
    public const int BlackIceFieldNumber = 33;
    private int blackIce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BlackIce {
      get { return blackIce_; }
      set {
        blackIce_ = value;
      }
    }

    /// <summary>Field number for the "nerves_of_cold_steel" field.</summary>
    public const int NervesOfColdSteelFieldNumber = 34;
    private int nervesOfColdSteel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NervesOfColdSteel {
      get { return nervesOfColdSteel_; }
      set {
        nervesOfColdSteel_ = value;
      }
    }

    /// <summary>Field number for the "icy_talons" field.</summary>
    public const int IcyTalonsFieldNumber = 35;
    private int icyTalons_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IcyTalons {
      get { return icyTalons_; }
      set {
        icyTalons_ = value;
      }
    }

    /// <summary>Field number for the "lichborne" field.</summary>
    public const int LichborneFieldNumber = 36;
    private bool lichborne_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Lichborne {
      get { return lichborne_; }
      set {
        lichborne_ = value;
      }
    }

    /// <summary>Field number for the "annihilation" field.</summary>
    public const int AnnihilationFieldNumber = 37;
    private int annihilation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Annihilation {
      get { return annihilation_; }
      set {
        annihilation_ = value;
      }
    }

    /// <summary>Field number for the "killing_machine" field.</summary>
    public const int KillingMachineFieldNumber = 38;
    private int killingMachine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int KillingMachine {
      get { return killingMachine_; }
      set {
        killingMachine_ = value;
      }
    }

    /// <summary>Field number for the "chill_of_the_grave" field.</summary>
    public const int ChillOfTheGraveFieldNumber = 39;
    private int chillOfTheGrave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChillOfTheGrave {
      get { return chillOfTheGrave_; }
      set {
        chillOfTheGrave_ = value;
      }
    }

    /// <summary>Field number for the "endless_winter" field.</summary>
    public const int EndlessWinterFieldNumber = 40;
    private int endlessWinter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EndlessWinter {
      get { return endlessWinter_; }
      set {
        endlessWinter_ = value;
      }
    }

    /// <summary>Field number for the "frigid_dreadplate" field.</summary>
    public const int FrigidDreadplateFieldNumber = 41;
    private int frigidDreadplate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FrigidDreadplate {
      get { return frigidDreadplate_; }
      set {
        frigidDreadplate_ = value;
      }
    }

    /// <summary>Field number for the "glacier_rot" field.</summary>
    public const int GlacierRotFieldNumber = 42;
    private int glacierRot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GlacierRot {
      get { return glacierRot_; }
      set {
        glacierRot_ = value;
      }
    }

    /// <summary>Field number for the "deathchill" field.</summary>
    public const int DeathchillFieldNumber = 43;
    private bool deathchill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Deathchill {
      get { return deathchill_; }
      set {
        deathchill_ = value;
      }
    }

    /// <summary>Field number for the "improved_icy_talons" field.</summary>
    public const int ImprovedIcyTalonsFieldNumber = 44;
    private bool improvedIcyTalons_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ImprovedIcyTalons {
      get { return improvedIcyTalons_; }
      set {
        improvedIcyTalons_ = value;
      }
    }

    /// <summary>Field number for the "merciless_combat" field.</summary>
    public const int MercilessCombatFieldNumber = 45;
    private int mercilessCombat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MercilessCombat {
      get { return mercilessCombat_; }
      set {
        mercilessCombat_ = value;
      }
    }

    /// <summary>Field number for the "rime" field.</summary>
    public const int RimeFieldNumber = 46;
    private int rime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Rime {
      get { return rime_; }
      set {
        rime_ = value;
      }
    }

    /// <summary>Field number for the "chilblains" field.</summary>
    public const int ChilblainsFieldNumber = 47;
    private int chilblains_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Chilblains {
      get { return chilblains_; }
      set {
        chilblains_ = value;
      }
    }

    /// <summary>Field number for the "hungering_cold" field.</summary>
    public const int HungeringColdFieldNumber = 48;
    private bool hungeringCold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HungeringCold {
      get { return hungeringCold_; }
      set {
        hungeringCold_ = value;
      }
    }

    /// <summary>Field number for the "improved_frost_presence" field.</summary>
    public const int ImprovedFrostPresenceFieldNumber = 49;
    private int improvedFrostPresence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedFrostPresence {
      get { return improvedFrostPresence_; }
      set {
        improvedFrostPresence_ = value;
      }
    }

    /// <summary>Field number for the "threat_of_thassarian" field.</summary>
    public const int ThreatOfThassarianFieldNumber = 50;
    private int threatOfThassarian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ThreatOfThassarian {
      get { return threatOfThassarian_; }
      set {
        threatOfThassarian_ = value;
      }
    }

    /// <summary>Field number for the "blood_of_the_north" field.</summary>
    public const int BloodOfTheNorthFieldNumber = 51;
    private int bloodOfTheNorth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BloodOfTheNorth {
      get { return bloodOfTheNorth_; }
      set {
        bloodOfTheNorth_ = value;
      }
    }

    /// <summary>Field number for the "unbreakable_armor" field.</summary>
    public const int UnbreakableArmorFieldNumber = 52;
    private bool unbreakableArmor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UnbreakableArmor {
      get { return unbreakableArmor_; }
      set {
        unbreakableArmor_ = value;
      }
    }

    /// <summary>Field number for the "acclimation" field.</summary>
    public const int AcclimationFieldNumber = 53;
    private int acclimation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Acclimation {
      get { return acclimation_; }
      set {
        acclimation_ = value;
      }
    }

    /// <summary>Field number for the "frost_strike" field.</summary>
    public const int FrostStrikeFieldNumber = 54;
    private bool frostStrike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FrostStrike {
      get { return frostStrike_; }
      set {
        frostStrike_ = value;
      }
    }

    /// <summary>Field number for the "guile_of_gorefiend" field.</summary>
    public const int GuileOfGorefiendFieldNumber = 55;
    private int guileOfGorefiend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GuileOfGorefiend {
      get { return guileOfGorefiend_; }
      set {
        guileOfGorefiend_ = value;
      }
    }

    /// <summary>Field number for the "tundra_stalker" field.</summary>
    public const int TundraStalkerFieldNumber = 56;
    private int tundraStalker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TundraStalker {
      get { return tundraStalker_; }
      set {
        tundraStalker_ = value;
      }
    }

    /// <summary>Field number for the "howling_blast" field.</summary>
    public const int HowlingBlastFieldNumber = 57;
    private bool howlingBlast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HowlingBlast {
      get { return howlingBlast_; }
      set {
        howlingBlast_ = value;
      }
    }

    /// <summary>Field number for the "vicious_strikes" field.</summary>
    public const int ViciousStrikesFieldNumber = 58;
    private int viciousStrikes_;
    /// <summary>
    /// Unholy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ViciousStrikes {
      get { return viciousStrikes_; }
      set {
        viciousStrikes_ = value;
      }
    }

    /// <summary>Field number for the "virulence" field.</summary>
    public const int VirulenceFieldNumber = 59;
    private int virulence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Virulence {
      get { return virulence_; }
      set {
        virulence_ = value;
      }
    }

    /// <summary>Field number for the "anticipation" field.</summary>
    public const int AnticipationFieldNumber = 60;
    private int anticipation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Anticipation {
      get { return anticipation_; }
      set {
        anticipation_ = value;
      }
    }

    /// <summary>Field number for the "epidemic" field.</summary>
    public const int EpidemicFieldNumber = 61;
    private int epidemic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Epidemic {
      get { return epidemic_; }
      set {
        epidemic_ = value;
      }
    }

    /// <summary>Field number for the "morbidity" field.</summary>
    public const int MorbidityFieldNumber = 62;
    private int morbidity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Morbidity {
      get { return morbidity_; }
      set {
        morbidity_ = value;
      }
    }

    /// <summary>Field number for the "unholy_command" field.</summary>
    public const int UnholyCommandFieldNumber = 63;
    private int unholyCommand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnholyCommand {
      get { return unholyCommand_; }
      set {
        unholyCommand_ = value;
      }
    }

    /// <summary>Field number for the "ravenous_dead" field.</summary>
    public const int RavenousDeadFieldNumber = 64;
    private int ravenousDead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RavenousDead {
      get { return ravenousDead_; }
      set {
        ravenousDead_ = value;
      }
    }

    /// <summary>Field number for the "outbreak" field.</summary>
    public const int OutbreakFieldNumber = 65;
    private int outbreak_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Outbreak {
      get { return outbreak_; }
      set {
        outbreak_ = value;
      }
    }

    /// <summary>Field number for the "necrosis" field.</summary>
    public const int NecrosisFieldNumber = 66;
    private int necrosis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Necrosis {
      get { return necrosis_; }
      set {
        necrosis_ = value;
      }
    }

    /// <summary>Field number for the "corpse_explosion" field.</summary>
    public const int CorpseExplosionFieldNumber = 67;
    private bool corpseExplosion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CorpseExplosion {
      get { return corpseExplosion_; }
      set {
        corpseExplosion_ = value;
      }
    }

    /// <summary>Field number for the "on_a_pale_horse" field.</summary>
    public const int OnAPaleHorseFieldNumber = 68;
    private int onAPaleHorse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OnAPaleHorse {
      get { return onAPaleHorse_; }
      set {
        onAPaleHorse_ = value;
      }
    }

    /// <summary>Field number for the "blood_caked_blade" field.</summary>
    public const int BloodCakedBladeFieldNumber = 69;
    private int bloodCakedBlade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BloodCakedBlade {
      get { return bloodCakedBlade_; }
      set {
        bloodCakedBlade_ = value;
      }
    }

    /// <summary>Field number for the "night_of_the_dead" field.</summary>
    public const int NightOfTheDeadFieldNumber = 70;
    private int nightOfTheDead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NightOfTheDead {
      get { return nightOfTheDead_; }
      set {
        nightOfTheDead_ = value;
      }
    }

    /// <summary>Field number for the "unholy_blight" field.</summary>
    public const int UnholyBlightFieldNumber = 71;
    private bool unholyBlight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UnholyBlight {
      get { return unholyBlight_; }
      set {
        unholyBlight_ = value;
      }
    }

    /// <summary>Field number for the "impurity" field.</summary>
    public const int ImpurityFieldNumber = 72;
    private int impurity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Impurity {
      get { return impurity_; }
      set {
        impurity_ = value;
      }
    }

    /// <summary>Field number for the "dirge" field.</summary>
    public const int DirgeFieldNumber = 73;
    private int dirge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Dirge {
      get { return dirge_; }
      set {
        dirge_ = value;
      }
    }

    /// <summary>Field number for the "desecration" field.</summary>
    public const int DesecrationFieldNumber = 74;
    private int desecration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Desecration {
      get { return desecration_; }
      set {
        desecration_ = value;
      }
    }

    /// <summary>Field number for the "magic_suppression" field.</summary>
    public const int MagicSuppressionFieldNumber = 75;
    private int magicSuppression_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MagicSuppression {
      get { return magicSuppression_; }
      set {
        magicSuppression_ = value;
      }
    }

    /// <summary>Field number for the "reaping" field.</summary>
    public const int ReapingFieldNumber = 76;
    private int reaping_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Reaping {
      get { return reaping_; }
      set {
        reaping_ = value;
      }
    }

    /// <summary>Field number for the "master_of_ghouls" field.</summary>
    public const int MasterOfGhoulsFieldNumber = 77;
    private bool masterOfGhouls_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MasterOfGhouls {
      get { return masterOfGhouls_; }
      set {
        masterOfGhouls_ = value;
      }
    }

    /// <summary>Field number for the "desolation" field.</summary>
    public const int DesolationFieldNumber = 78;
    private int desolation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Desolation {
      get { return desolation_; }
      set {
        desolation_ = value;
      }
    }

    /// <summary>Field number for the "anti_magic_zone" field.</summary>
    public const int AntiMagicZoneFieldNumber = 79;
    private bool antiMagicZone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AntiMagicZone {
      get { return antiMagicZone_; }
      set {
        antiMagicZone_ = value;
      }
    }

    /// <summary>Field number for the "improved_unholy_presence" field.</summary>
    public const int ImprovedUnholyPresenceFieldNumber = 80;
    private int improvedUnholyPresence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedUnholyPresence {
      get { return improvedUnholyPresence_; }
      set {
        improvedUnholyPresence_ = value;
      }
    }

    /// <summary>Field number for the "ghoul_frenzy" field.</summary>
    public const int GhoulFrenzyFieldNumber = 81;
    private bool ghoulFrenzy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GhoulFrenzy {
      get { return ghoulFrenzy_; }
      set {
        ghoulFrenzy_ = value;
      }
    }

    /// <summary>Field number for the "crypt_fever" field.</summary>
    public const int CryptFeverFieldNumber = 82;
    private int cryptFever_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CryptFever {
      get { return cryptFever_; }
      set {
        cryptFever_ = value;
      }
    }

    /// <summary>Field number for the "bone_shield" field.</summary>
    public const int BoneShieldFieldNumber = 83;
    private bool boneShield_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BoneShield {
      get { return boneShield_; }
      set {
        boneShield_ = value;
      }
    }

    /// <summary>Field number for the "wandering_plague" field.</summary>
    public const int WanderingPlagueFieldNumber = 84;
    private int wanderingPlague_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WanderingPlague {
      get { return wanderingPlague_; }
      set {
        wanderingPlague_ = value;
      }
    }

    /// <summary>Field number for the "ebon_plaguebringer" field.</summary>
    public const int EbonPlaguebringerFieldNumber = 85;
    private int ebonPlaguebringer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EbonPlaguebringer {
      get { return ebonPlaguebringer_; }
      set {
        ebonPlaguebringer_ = value;
      }
    }

    /// <summary>Field number for the "scourge_strike" field.</summary>
    public const int ScourgeStrikeFieldNumber = 86;
    private bool scourgeStrike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ScourgeStrike {
      get { return scourgeStrike_; }
      set {
        scourgeStrike_ = value;
      }
    }

    /// <summary>Field number for the "rage_of_rivendare" field.</summary>
    public const int RageOfRivendareFieldNumber = 87;
    private int rageOfRivendare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RageOfRivendare {
      get { return rageOfRivendare_; }
      set {
        rageOfRivendare_ = value;
      }
    }

    /// <summary>Field number for the "summon_gargoyle" field.</summary>
    public const int SummonGargoyleFieldNumber = 88;
    private bool summonGargoyle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SummonGargoyle {
      get { return summonGargoyle_; }
      set {
        summonGargoyle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DeathknightTalents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DeathknightTalents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Butchery != other.Butchery) return false;
      if (Subversion != other.Subversion) return false;
      if (BladeBarrier != other.BladeBarrier) return false;
      if (BladedArmor != other.BladedArmor) return false;
      if (ScentOfBlood != other.ScentOfBlood) return false;
      if (TwoHandedWeaponSpecialization != other.TwoHandedWeaponSpecialization) return false;
      if (RuneTap != other.RuneTap) return false;
      if (DarkConviction != other.DarkConviction) return false;
      if (DeathRuneMastery != other.DeathRuneMastery) return false;
      if (ImprovedRuneTap != other.ImprovedRuneTap) return false;
      if (SpellDeflection != other.SpellDeflection) return false;
      if (Vendetta != other.Vendetta) return false;
      if (BloodyStrikes != other.BloodyStrikes) return false;
      if (VeteranOfTheThirdWar != other.VeteranOfTheThirdWar) return false;
      if (MarkOfBlood != other.MarkOfBlood) return false;
      if (BloodyVengeance != other.BloodyVengeance) return false;
      if (AbominationsMight != other.AbominationsMight) return false;
      if (Bloodworms != other.Bloodworms) return false;
      if (Hysteria != other.Hysteria) return false;
      if (ImprovedBloodPresence != other.ImprovedBloodPresence) return false;
      if (ImprovedDeathStrike != other.ImprovedDeathStrike) return false;
      if (SuddenDoom != other.SuddenDoom) return false;
      if (VampiricBlood != other.VampiricBlood) return false;
      if (WillOfTheNecropolis != other.WillOfTheNecropolis) return false;
      if (HeartStrike != other.HeartStrike) return false;
      if (MightOfMograine != other.MightOfMograine) return false;
      if (BloodGorged != other.BloodGorged) return false;
      if (DancingRuneWeapon != other.DancingRuneWeapon) return false;
      if (ImprovedIcyTouch != other.ImprovedIcyTouch) return false;
      if (RunicPowerMastery != other.RunicPowerMastery) return false;
      if (Toughness != other.Toughness) return false;
      if (IcyReach != other.IcyReach) return false;
      if (BlackIce != other.BlackIce) return false;
      if (NervesOfColdSteel != other.NervesOfColdSteel) return false;
      if (IcyTalons != other.IcyTalons) return false;
      if (Lichborne != other.Lichborne) return false;
      if (Annihilation != other.Annihilation) return false;
      if (KillingMachine != other.KillingMachine) return false;
      if (ChillOfTheGrave != other.ChillOfTheGrave) return false;
      if (EndlessWinter != other.EndlessWinter) return false;
      if (FrigidDreadplate != other.FrigidDreadplate) return false;
      if (GlacierRot != other.GlacierRot) return false;
      if (Deathchill != other.Deathchill) return false;
      if (ImprovedIcyTalons != other.ImprovedIcyTalons) return false;
      if (MercilessCombat != other.MercilessCombat) return false;
      if (Rime != other.Rime) return false;
      if (Chilblains != other.Chilblains) return false;
      if (HungeringCold != other.HungeringCold) return false;
      if (ImprovedFrostPresence != other.ImprovedFrostPresence) return false;
      if (ThreatOfThassarian != other.ThreatOfThassarian) return false;
      if (BloodOfTheNorth != other.BloodOfTheNorth) return false;
      if (UnbreakableArmor != other.UnbreakableArmor) return false;
      if (Acclimation != other.Acclimation) return false;
      if (FrostStrike != other.FrostStrike) return false;
      if (GuileOfGorefiend != other.GuileOfGorefiend) return false;
      if (TundraStalker != other.TundraStalker) return false;
      if (HowlingBlast != other.HowlingBlast) return false;
      if (ViciousStrikes != other.ViciousStrikes) return false;
      if (Virulence != other.Virulence) return false;
      if (Anticipation != other.Anticipation) return false;
      if (Epidemic != other.Epidemic) return false;
      if (Morbidity != other.Morbidity) return false;
      if (UnholyCommand != other.UnholyCommand) return false;
      if (RavenousDead != other.RavenousDead) return false;
      if (Outbreak != other.Outbreak) return false;
      if (Necrosis != other.Necrosis) return false;
      if (CorpseExplosion != other.CorpseExplosion) return false;
      if (OnAPaleHorse != other.OnAPaleHorse) return false;
      if (BloodCakedBlade != other.BloodCakedBlade) return false;
      if (NightOfTheDead != other.NightOfTheDead) return false;
      if (UnholyBlight != other.UnholyBlight) return false;
      if (Impurity != other.Impurity) return false;
      if (Dirge != other.Dirge) return false;
      if (Desecration != other.Desecration) return false;
      if (MagicSuppression != other.MagicSuppression) return false;
      if (Reaping != other.Reaping) return false;
      if (MasterOfGhouls != other.MasterOfGhouls) return false;
      if (Desolation != other.Desolation) return false;
      if (AntiMagicZone != other.AntiMagicZone) return false;
      if (ImprovedUnholyPresence != other.ImprovedUnholyPresence) return false;
      if (GhoulFrenzy != other.GhoulFrenzy) return false;
      if (CryptFever != other.CryptFever) return false;
      if (BoneShield != other.BoneShield) return false;
      if (WanderingPlague != other.WanderingPlague) return false;
      if (EbonPlaguebringer != other.EbonPlaguebringer) return false;
      if (ScourgeStrike != other.ScourgeStrike) return false;
      if (RageOfRivendare != other.RageOfRivendare) return false;
      if (SummonGargoyle != other.SummonGargoyle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Butchery != 0) hash ^= Butchery.GetHashCode();
      if (Subversion != 0) hash ^= Subversion.GetHashCode();
      if (BladeBarrier != 0) hash ^= BladeBarrier.GetHashCode();
      if (BladedArmor != 0) hash ^= BladedArmor.GetHashCode();
      if (ScentOfBlood != 0) hash ^= ScentOfBlood.GetHashCode();
      if (TwoHandedWeaponSpecialization != 0) hash ^= TwoHandedWeaponSpecialization.GetHashCode();
      if (RuneTap != false) hash ^= RuneTap.GetHashCode();
      if (DarkConviction != 0) hash ^= DarkConviction.GetHashCode();
      if (DeathRuneMastery != 0) hash ^= DeathRuneMastery.GetHashCode();
      if (ImprovedRuneTap != 0) hash ^= ImprovedRuneTap.GetHashCode();
      if (SpellDeflection != 0) hash ^= SpellDeflection.GetHashCode();
      if (Vendetta != 0) hash ^= Vendetta.GetHashCode();
      if (BloodyStrikes != 0) hash ^= BloodyStrikes.GetHashCode();
      if (VeteranOfTheThirdWar != 0) hash ^= VeteranOfTheThirdWar.GetHashCode();
      if (MarkOfBlood != false) hash ^= MarkOfBlood.GetHashCode();
      if (BloodyVengeance != 0) hash ^= BloodyVengeance.GetHashCode();
      if (AbominationsMight != 0) hash ^= AbominationsMight.GetHashCode();
      if (Bloodworms != 0) hash ^= Bloodworms.GetHashCode();
      if (Hysteria != false) hash ^= Hysteria.GetHashCode();
      if (ImprovedBloodPresence != 0) hash ^= ImprovedBloodPresence.GetHashCode();
      if (ImprovedDeathStrike != 0) hash ^= ImprovedDeathStrike.GetHashCode();
      if (SuddenDoom != 0) hash ^= SuddenDoom.GetHashCode();
      if (VampiricBlood != false) hash ^= VampiricBlood.GetHashCode();
      if (WillOfTheNecropolis != 0) hash ^= WillOfTheNecropolis.GetHashCode();
      if (HeartStrike != false) hash ^= HeartStrike.GetHashCode();
      if (MightOfMograine != 0) hash ^= MightOfMograine.GetHashCode();
      if (BloodGorged != 0) hash ^= BloodGorged.GetHashCode();
      if (DancingRuneWeapon != false) hash ^= DancingRuneWeapon.GetHashCode();
      if (ImprovedIcyTouch != 0) hash ^= ImprovedIcyTouch.GetHashCode();
      if (RunicPowerMastery != 0) hash ^= RunicPowerMastery.GetHashCode();
      if (Toughness != 0) hash ^= Toughness.GetHashCode();
      if (IcyReach != 0) hash ^= IcyReach.GetHashCode();
      if (BlackIce != 0) hash ^= BlackIce.GetHashCode();
      if (NervesOfColdSteel != 0) hash ^= NervesOfColdSteel.GetHashCode();
      if (IcyTalons != 0) hash ^= IcyTalons.GetHashCode();
      if (Lichborne != false) hash ^= Lichborne.GetHashCode();
      if (Annihilation != 0) hash ^= Annihilation.GetHashCode();
      if (KillingMachine != 0) hash ^= KillingMachine.GetHashCode();
      if (ChillOfTheGrave != 0) hash ^= ChillOfTheGrave.GetHashCode();
      if (EndlessWinter != 0) hash ^= EndlessWinter.GetHashCode();
      if (FrigidDreadplate != 0) hash ^= FrigidDreadplate.GetHashCode();
      if (GlacierRot != 0) hash ^= GlacierRot.GetHashCode();
      if (Deathchill != false) hash ^= Deathchill.GetHashCode();
      if (ImprovedIcyTalons != false) hash ^= ImprovedIcyTalons.GetHashCode();
      if (MercilessCombat != 0) hash ^= MercilessCombat.GetHashCode();
      if (Rime != 0) hash ^= Rime.GetHashCode();
      if (Chilblains != 0) hash ^= Chilblains.GetHashCode();
      if (HungeringCold != false) hash ^= HungeringCold.GetHashCode();
      if (ImprovedFrostPresence != 0) hash ^= ImprovedFrostPresence.GetHashCode();
      if (ThreatOfThassarian != 0) hash ^= ThreatOfThassarian.GetHashCode();
      if (BloodOfTheNorth != 0) hash ^= BloodOfTheNorth.GetHashCode();
      if (UnbreakableArmor != false) hash ^= UnbreakableArmor.GetHashCode();
      if (Acclimation != 0) hash ^= Acclimation.GetHashCode();
      if (FrostStrike != false) hash ^= FrostStrike.GetHashCode();
      if (GuileOfGorefiend != 0) hash ^= GuileOfGorefiend.GetHashCode();
      if (TundraStalker != 0) hash ^= TundraStalker.GetHashCode();
      if (HowlingBlast != false) hash ^= HowlingBlast.GetHashCode();
      if (ViciousStrikes != 0) hash ^= ViciousStrikes.GetHashCode();
      if (Virulence != 0) hash ^= Virulence.GetHashCode();
      if (Anticipation != 0) hash ^= Anticipation.GetHashCode();
      if (Epidemic != 0) hash ^= Epidemic.GetHashCode();
      if (Morbidity != 0) hash ^= Morbidity.GetHashCode();
      if (UnholyCommand != 0) hash ^= UnholyCommand.GetHashCode();
      if (RavenousDead != 0) hash ^= RavenousDead.GetHashCode();
      if (Outbreak != 0) hash ^= Outbreak.GetHashCode();
      if (Necrosis != 0) hash ^= Necrosis.GetHashCode();
      if (CorpseExplosion != false) hash ^= CorpseExplosion.GetHashCode();
      if (OnAPaleHorse != 0) hash ^= OnAPaleHorse.GetHashCode();
      if (BloodCakedBlade != 0) hash ^= BloodCakedBlade.GetHashCode();
      if (NightOfTheDead != 0) hash ^= NightOfTheDead.GetHashCode();
      if (UnholyBlight != false) hash ^= UnholyBlight.GetHashCode();
      if (Impurity != 0) hash ^= Impurity.GetHashCode();
      if (Dirge != 0) hash ^= Dirge.GetHashCode();
      if (Desecration != 0) hash ^= Desecration.GetHashCode();
      if (MagicSuppression != 0) hash ^= MagicSuppression.GetHashCode();
      if (Reaping != 0) hash ^= Reaping.GetHashCode();
      if (MasterOfGhouls != false) hash ^= MasterOfGhouls.GetHashCode();
      if (Desolation != 0) hash ^= Desolation.GetHashCode();
      if (AntiMagicZone != false) hash ^= AntiMagicZone.GetHashCode();
      if (ImprovedUnholyPresence != 0) hash ^= ImprovedUnholyPresence.GetHashCode();
      if (GhoulFrenzy != false) hash ^= GhoulFrenzy.GetHashCode();
      if (CryptFever != 0) hash ^= CryptFever.GetHashCode();
      if (BoneShield != false) hash ^= BoneShield.GetHashCode();
      if (WanderingPlague != 0) hash ^= WanderingPlague.GetHashCode();
      if (EbonPlaguebringer != 0) hash ^= EbonPlaguebringer.GetHashCode();
      if (ScourgeStrike != false) hash ^= ScourgeStrike.GetHashCode();
      if (RageOfRivendare != 0) hash ^= RageOfRivendare.GetHashCode();
      if (SummonGargoyle != false) hash ^= SummonGargoyle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Butchery != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Butchery);
      }
      if (Subversion != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Subversion);
      }
      if (BladeBarrier != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BladeBarrier);
      }
      if (BladedArmor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BladedArmor);
      }
      if (ScentOfBlood != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ScentOfBlood);
      }
      if (TwoHandedWeaponSpecialization != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TwoHandedWeaponSpecialization);
      }
      if (RuneTap != false) {
        output.WriteRawTag(56);
        output.WriteBool(RuneTap);
      }
      if (DarkConviction != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DarkConviction);
      }
      if (DeathRuneMastery != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(DeathRuneMastery);
      }
      if (ImprovedRuneTap != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ImprovedRuneTap);
      }
      if (SpellDeflection != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SpellDeflection);
      }
      if (Vendetta != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Vendetta);
      }
      if (BloodyStrikes != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(BloodyStrikes);
      }
      if (VeteranOfTheThirdWar != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(VeteranOfTheThirdWar);
      }
      if (MarkOfBlood != false) {
        output.WriteRawTag(120);
        output.WriteBool(MarkOfBlood);
      }
      if (BloodyVengeance != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(BloodyVengeance);
      }
      if (AbominationsMight != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(AbominationsMight);
      }
      if (Bloodworms != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Bloodworms);
      }
      if (Hysteria != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(Hysteria);
      }
      if (ImprovedBloodPresence != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ImprovedBloodPresence);
      }
      if (ImprovedDeathStrike != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(ImprovedDeathStrike);
      }
      if (SuddenDoom != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(SuddenDoom);
      }
      if (VampiricBlood != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(VampiricBlood);
      }
      if (WillOfTheNecropolis != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(WillOfTheNecropolis);
      }
      if (HeartStrike != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(HeartStrike);
      }
      if (MightOfMograine != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(MightOfMograine);
      }
      if (BloodGorged != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(BloodGorged);
      }
      if (DancingRuneWeapon != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(DancingRuneWeapon);
      }
      if (ImprovedIcyTouch != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(ImprovedIcyTouch);
      }
      if (RunicPowerMastery != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(RunicPowerMastery);
      }
      if (Toughness != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Toughness);
      }
      if (IcyReach != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(IcyReach);
      }
      if (BlackIce != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(BlackIce);
      }
      if (NervesOfColdSteel != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(NervesOfColdSteel);
      }
      if (IcyTalons != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(IcyTalons);
      }
      if (Lichborne != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(Lichborne);
      }
      if (Annihilation != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(Annihilation);
      }
      if (KillingMachine != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(KillingMachine);
      }
      if (ChillOfTheGrave != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(ChillOfTheGrave);
      }
      if (EndlessWinter != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(EndlessWinter);
      }
      if (FrigidDreadplate != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(FrigidDreadplate);
      }
      if (GlacierRot != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(GlacierRot);
      }
      if (Deathchill != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(Deathchill);
      }
      if (ImprovedIcyTalons != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(ImprovedIcyTalons);
      }
      if (MercilessCombat != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(MercilessCombat);
      }
      if (Rime != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(Rime);
      }
      if (Chilblains != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(Chilblains);
      }
      if (HungeringCold != false) {
        output.WriteRawTag(128, 3);
        output.WriteBool(HungeringCold);
      }
      if (ImprovedFrostPresence != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(ImprovedFrostPresence);
      }
      if (ThreatOfThassarian != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(ThreatOfThassarian);
      }
      if (BloodOfTheNorth != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(BloodOfTheNorth);
      }
      if (UnbreakableArmor != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(UnbreakableArmor);
      }
      if (Acclimation != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(Acclimation);
      }
      if (FrostStrike != false) {
        output.WriteRawTag(176, 3);
        output.WriteBool(FrostStrike);
      }
      if (GuileOfGorefiend != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(GuileOfGorefiend);
      }
      if (TundraStalker != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(TundraStalker);
      }
      if (HowlingBlast != false) {
        output.WriteRawTag(200, 3);
        output.WriteBool(HowlingBlast);
      }
      if (ViciousStrikes != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(ViciousStrikes);
      }
      if (Virulence != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(Virulence);
      }
      if (Anticipation != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(Anticipation);
      }
      if (Epidemic != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(Epidemic);
      }
      if (Morbidity != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(Morbidity);
      }
      if (UnholyCommand != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(UnholyCommand);
      }
      if (RavenousDead != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(RavenousDead);
      }
      if (Outbreak != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(Outbreak);
      }
      if (Necrosis != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(Necrosis);
      }
      if (CorpseExplosion != false) {
        output.WriteRawTag(152, 4);
        output.WriteBool(CorpseExplosion);
      }
      if (OnAPaleHorse != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(OnAPaleHorse);
      }
      if (BloodCakedBlade != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(BloodCakedBlade);
      }
      if (NightOfTheDead != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(NightOfTheDead);
      }
      if (UnholyBlight != false) {
        output.WriteRawTag(184, 4);
        output.WriteBool(UnholyBlight);
      }
      if (Impurity != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(Impurity);
      }
      if (Dirge != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(Dirge);
      }
      if (Desecration != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(Desecration);
      }
      if (MagicSuppression != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(MagicSuppression);
      }
      if (Reaping != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(Reaping);
      }
      if (MasterOfGhouls != false) {
        output.WriteRawTag(232, 4);
        output.WriteBool(MasterOfGhouls);
      }
      if (Desolation != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(Desolation);
      }
      if (AntiMagicZone != false) {
        output.WriteRawTag(248, 4);
        output.WriteBool(AntiMagicZone);
      }
      if (ImprovedUnholyPresence != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(ImprovedUnholyPresence);
      }
      if (GhoulFrenzy != false) {
        output.WriteRawTag(136, 5);
        output.WriteBool(GhoulFrenzy);
      }
      if (CryptFever != 0) {
        output.WriteRawTag(144, 5);
        output.WriteInt32(CryptFever);
      }
      if (BoneShield != false) {
        output.WriteRawTag(152, 5);
        output.WriteBool(BoneShield);
      }
      if (WanderingPlague != 0) {
        output.WriteRawTag(160, 5);
        output.WriteInt32(WanderingPlague);
      }
      if (EbonPlaguebringer != 0) {
        output.WriteRawTag(168, 5);
        output.WriteInt32(EbonPlaguebringer);
      }
      if (ScourgeStrike != false) {
        output.WriteRawTag(176, 5);
        output.WriteBool(ScourgeStrike);
      }
      if (RageOfRivendare != 0) {
        output.WriteRawTag(184, 5);
        output.WriteInt32(RageOfRivendare);
      }
      if (SummonGargoyle != false) {
        output.WriteRawTag(192, 5);
        output.WriteBool(SummonGargoyle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Butchery != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Butchery);
      }
      if (Subversion != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Subversion);
      }
      if (BladeBarrier != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BladeBarrier);
      }
      if (BladedArmor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BladedArmor);
      }
      if (ScentOfBlood != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ScentOfBlood);
      }
      if (TwoHandedWeaponSpecialization != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TwoHandedWeaponSpecialization);
      }
      if (RuneTap != false) {
        output.WriteRawTag(56);
        output.WriteBool(RuneTap);
      }
      if (DarkConviction != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DarkConviction);
      }
      if (DeathRuneMastery != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(DeathRuneMastery);
      }
      if (ImprovedRuneTap != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ImprovedRuneTap);
      }
      if (SpellDeflection != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SpellDeflection);
      }
      if (Vendetta != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Vendetta);
      }
      if (BloodyStrikes != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(BloodyStrikes);
      }
      if (VeteranOfTheThirdWar != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(VeteranOfTheThirdWar);
      }
      if (MarkOfBlood != false) {
        output.WriteRawTag(120);
        output.WriteBool(MarkOfBlood);
      }
      if (BloodyVengeance != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(BloodyVengeance);
      }
      if (AbominationsMight != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(AbominationsMight);
      }
      if (Bloodworms != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Bloodworms);
      }
      if (Hysteria != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(Hysteria);
      }
      if (ImprovedBloodPresence != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ImprovedBloodPresence);
      }
      if (ImprovedDeathStrike != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(ImprovedDeathStrike);
      }
      if (SuddenDoom != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(SuddenDoom);
      }
      if (VampiricBlood != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(VampiricBlood);
      }
      if (WillOfTheNecropolis != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(WillOfTheNecropolis);
      }
      if (HeartStrike != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(HeartStrike);
      }
      if (MightOfMograine != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(MightOfMograine);
      }
      if (BloodGorged != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(BloodGorged);
      }
      if (DancingRuneWeapon != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(DancingRuneWeapon);
      }
      if (ImprovedIcyTouch != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(ImprovedIcyTouch);
      }
      if (RunicPowerMastery != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(RunicPowerMastery);
      }
      if (Toughness != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Toughness);
      }
      if (IcyReach != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(IcyReach);
      }
      if (BlackIce != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(BlackIce);
      }
      if (NervesOfColdSteel != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(NervesOfColdSteel);
      }
      if (IcyTalons != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(IcyTalons);
      }
      if (Lichborne != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(Lichborne);
      }
      if (Annihilation != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(Annihilation);
      }
      if (KillingMachine != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(KillingMachine);
      }
      if (ChillOfTheGrave != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(ChillOfTheGrave);
      }
      if (EndlessWinter != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(EndlessWinter);
      }
      if (FrigidDreadplate != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(FrigidDreadplate);
      }
      if (GlacierRot != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(GlacierRot);
      }
      if (Deathchill != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(Deathchill);
      }
      if (ImprovedIcyTalons != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(ImprovedIcyTalons);
      }
      if (MercilessCombat != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(MercilessCombat);
      }
      if (Rime != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(Rime);
      }
      if (Chilblains != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(Chilblains);
      }
      if (HungeringCold != false) {
        output.WriteRawTag(128, 3);
        output.WriteBool(HungeringCold);
      }
      if (ImprovedFrostPresence != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(ImprovedFrostPresence);
      }
      if (ThreatOfThassarian != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(ThreatOfThassarian);
      }
      if (BloodOfTheNorth != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(BloodOfTheNorth);
      }
      if (UnbreakableArmor != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(UnbreakableArmor);
      }
      if (Acclimation != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(Acclimation);
      }
      if (FrostStrike != false) {
        output.WriteRawTag(176, 3);
        output.WriteBool(FrostStrike);
      }
      if (GuileOfGorefiend != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(GuileOfGorefiend);
      }
      if (TundraStalker != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(TundraStalker);
      }
      if (HowlingBlast != false) {
        output.WriteRawTag(200, 3);
        output.WriteBool(HowlingBlast);
      }
      if (ViciousStrikes != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(ViciousStrikes);
      }
      if (Virulence != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(Virulence);
      }
      if (Anticipation != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(Anticipation);
      }
      if (Epidemic != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(Epidemic);
      }
      if (Morbidity != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(Morbidity);
      }
      if (UnholyCommand != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(UnholyCommand);
      }
      if (RavenousDead != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(RavenousDead);
      }
      if (Outbreak != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(Outbreak);
      }
      if (Necrosis != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(Necrosis);
      }
      if (CorpseExplosion != false) {
        output.WriteRawTag(152, 4);
        output.WriteBool(CorpseExplosion);
      }
      if (OnAPaleHorse != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(OnAPaleHorse);
      }
      if (BloodCakedBlade != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(BloodCakedBlade);
      }
      if (NightOfTheDead != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(NightOfTheDead);
      }
      if (UnholyBlight != false) {
        output.WriteRawTag(184, 4);
        output.WriteBool(UnholyBlight);
      }
      if (Impurity != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(Impurity);
      }
      if (Dirge != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(Dirge);
      }
      if (Desecration != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(Desecration);
      }
      if (MagicSuppression != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(MagicSuppression);
      }
      if (Reaping != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(Reaping);
      }
      if (MasterOfGhouls != false) {
        output.WriteRawTag(232, 4);
        output.WriteBool(MasterOfGhouls);
      }
      if (Desolation != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(Desolation);
      }
      if (AntiMagicZone != false) {
        output.WriteRawTag(248, 4);
        output.WriteBool(AntiMagicZone);
      }
      if (ImprovedUnholyPresence != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(ImprovedUnholyPresence);
      }
      if (GhoulFrenzy != false) {
        output.WriteRawTag(136, 5);
        output.WriteBool(GhoulFrenzy);
      }
      if (CryptFever != 0) {
        output.WriteRawTag(144, 5);
        output.WriteInt32(CryptFever);
      }
      if (BoneShield != false) {
        output.WriteRawTag(152, 5);
        output.WriteBool(BoneShield);
      }
      if (WanderingPlague != 0) {
        output.WriteRawTag(160, 5);
        output.WriteInt32(WanderingPlague);
      }
      if (EbonPlaguebringer != 0) {
        output.WriteRawTag(168, 5);
        output.WriteInt32(EbonPlaguebringer);
      }
      if (ScourgeStrike != false) {
        output.WriteRawTag(176, 5);
        output.WriteBool(ScourgeStrike);
      }
      if (RageOfRivendare != 0) {
        output.WriteRawTag(184, 5);
        output.WriteInt32(RageOfRivendare);
      }
      if (SummonGargoyle != false) {
        output.WriteRawTag(192, 5);
        output.WriteBool(SummonGargoyle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Butchery != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Butchery);
      }
      if (Subversion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Subversion);
      }
      if (BladeBarrier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BladeBarrier);
      }
      if (BladedArmor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BladedArmor);
      }
      if (ScentOfBlood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScentOfBlood);
      }
      if (TwoHandedWeaponSpecialization != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TwoHandedWeaponSpecialization);
      }
      if (RuneTap != false) {
        size += 1 + 1;
      }
      if (DarkConviction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DarkConviction);
      }
      if (DeathRuneMastery != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeathRuneMastery);
      }
      if (ImprovedRuneTap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedRuneTap);
      }
      if (SpellDeflection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpellDeflection);
      }
      if (Vendetta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vendetta);
      }
      if (BloodyStrikes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BloodyStrikes);
      }
      if (VeteranOfTheThirdWar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VeteranOfTheThirdWar);
      }
      if (MarkOfBlood != false) {
        size += 1 + 1;
      }
      if (BloodyVengeance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BloodyVengeance);
      }
      if (AbominationsMight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AbominationsMight);
      }
      if (Bloodworms != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Bloodworms);
      }
      if (Hysteria != false) {
        size += 2 + 1;
      }
      if (ImprovedBloodPresence != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedBloodPresence);
      }
      if (ImprovedDeathStrike != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedDeathStrike);
      }
      if (SuddenDoom != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SuddenDoom);
      }
      if (VampiricBlood != false) {
        size += 2 + 1;
      }
      if (WillOfTheNecropolis != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WillOfTheNecropolis);
      }
      if (HeartStrike != false) {
        size += 2 + 1;
      }
      if (MightOfMograine != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MightOfMograine);
      }
      if (BloodGorged != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BloodGorged);
      }
      if (DancingRuneWeapon != false) {
        size += 2 + 1;
      }
      if (ImprovedIcyTouch != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedIcyTouch);
      }
      if (RunicPowerMastery != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RunicPowerMastery);
      }
      if (Toughness != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Toughness);
      }
      if (IcyReach != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IcyReach);
      }
      if (BlackIce != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BlackIce);
      }
      if (NervesOfColdSteel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NervesOfColdSteel);
      }
      if (IcyTalons != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IcyTalons);
      }
      if (Lichborne != false) {
        size += 2 + 1;
      }
      if (Annihilation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Annihilation);
      }
      if (KillingMachine != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(KillingMachine);
      }
      if (ChillOfTheGrave != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChillOfTheGrave);
      }
      if (EndlessWinter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EndlessWinter);
      }
      if (FrigidDreadplate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FrigidDreadplate);
      }
      if (GlacierRot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GlacierRot);
      }
      if (Deathchill != false) {
        size += 2 + 1;
      }
      if (ImprovedIcyTalons != false) {
        size += 2 + 1;
      }
      if (MercilessCombat != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MercilessCombat);
      }
      if (Rime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Rime);
      }
      if (Chilblains != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Chilblains);
      }
      if (HungeringCold != false) {
        size += 2 + 1;
      }
      if (ImprovedFrostPresence != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedFrostPresence);
      }
      if (ThreatOfThassarian != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ThreatOfThassarian);
      }
      if (BloodOfTheNorth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BloodOfTheNorth);
      }
      if (UnbreakableArmor != false) {
        size += 2 + 1;
      }
      if (Acclimation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Acclimation);
      }
      if (FrostStrike != false) {
        size += 2 + 1;
      }
      if (GuileOfGorefiend != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuileOfGorefiend);
      }
      if (TundraStalker != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TundraStalker);
      }
      if (HowlingBlast != false) {
        size += 2 + 1;
      }
      if (ViciousStrikes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ViciousStrikes);
      }
      if (Virulence != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Virulence);
      }
      if (Anticipation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Anticipation);
      }
      if (Epidemic != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Epidemic);
      }
      if (Morbidity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Morbidity);
      }
      if (UnholyCommand != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnholyCommand);
      }
      if (RavenousDead != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RavenousDead);
      }
      if (Outbreak != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Outbreak);
      }
      if (Necrosis != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Necrosis);
      }
      if (CorpseExplosion != false) {
        size += 2 + 1;
      }
      if (OnAPaleHorse != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OnAPaleHorse);
      }
      if (BloodCakedBlade != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BloodCakedBlade);
      }
      if (NightOfTheDead != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NightOfTheDead);
      }
      if (UnholyBlight != false) {
        size += 2 + 1;
      }
      if (Impurity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Impurity);
      }
      if (Dirge != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Dirge);
      }
      if (Desecration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Desecration);
      }
      if (MagicSuppression != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MagicSuppression);
      }
      if (Reaping != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Reaping);
      }
      if (MasterOfGhouls != false) {
        size += 2 + 1;
      }
      if (Desolation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Desolation);
      }
      if (AntiMagicZone != false) {
        size += 2 + 1;
      }
      if (ImprovedUnholyPresence != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedUnholyPresence);
      }
      if (GhoulFrenzy != false) {
        size += 2 + 1;
      }
      if (CryptFever != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CryptFever);
      }
      if (BoneShield != false) {
        size += 2 + 1;
      }
      if (WanderingPlague != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WanderingPlague);
      }
      if (EbonPlaguebringer != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EbonPlaguebringer);
      }
      if (ScourgeStrike != false) {
        size += 2 + 1;
      }
      if (RageOfRivendare != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RageOfRivendare);
      }
      if (SummonGargoyle != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DeathknightTalents other) {
      if (other == null) {
        return;
      }
      if (other.Butchery != 0) {
        Butchery = other.Butchery;
      }
      if (other.Subversion != 0) {
        Subversion = other.Subversion;
      }
      if (other.BladeBarrier != 0) {
        BladeBarrier = other.BladeBarrier;
      }
      if (other.BladedArmor != 0) {
        BladedArmor = other.BladedArmor;
      }
      if (other.ScentOfBlood != 0) {
        ScentOfBlood = other.ScentOfBlood;
      }
      if (other.TwoHandedWeaponSpecialization != 0) {
        TwoHandedWeaponSpecialization = other.TwoHandedWeaponSpecialization;
      }
      if (other.RuneTap != false) {
        RuneTap = other.RuneTap;
      }
      if (other.DarkConviction != 0) {
        DarkConviction = other.DarkConviction;
      }
      if (other.DeathRuneMastery != 0) {
        DeathRuneMastery = other.DeathRuneMastery;
      }
      if (other.ImprovedRuneTap != 0) {
        ImprovedRuneTap = other.ImprovedRuneTap;
      }
      if (other.SpellDeflection != 0) {
        SpellDeflection = other.SpellDeflection;
      }
      if (other.Vendetta != 0) {
        Vendetta = other.Vendetta;
      }
      if (other.BloodyStrikes != 0) {
        BloodyStrikes = other.BloodyStrikes;
      }
      if (other.VeteranOfTheThirdWar != 0) {
        VeteranOfTheThirdWar = other.VeteranOfTheThirdWar;
      }
      if (other.MarkOfBlood != false) {
        MarkOfBlood = other.MarkOfBlood;
      }
      if (other.BloodyVengeance != 0) {
        BloodyVengeance = other.BloodyVengeance;
      }
      if (other.AbominationsMight != 0) {
        AbominationsMight = other.AbominationsMight;
      }
      if (other.Bloodworms != 0) {
        Bloodworms = other.Bloodworms;
      }
      if (other.Hysteria != false) {
        Hysteria = other.Hysteria;
      }
      if (other.ImprovedBloodPresence != 0) {
        ImprovedBloodPresence = other.ImprovedBloodPresence;
      }
      if (other.ImprovedDeathStrike != 0) {
        ImprovedDeathStrike = other.ImprovedDeathStrike;
      }
      if (other.SuddenDoom != 0) {
        SuddenDoom = other.SuddenDoom;
      }
      if (other.VampiricBlood != false) {
        VampiricBlood = other.VampiricBlood;
      }
      if (other.WillOfTheNecropolis != 0) {
        WillOfTheNecropolis = other.WillOfTheNecropolis;
      }
      if (other.HeartStrike != false) {
        HeartStrike = other.HeartStrike;
      }
      if (other.MightOfMograine != 0) {
        MightOfMograine = other.MightOfMograine;
      }
      if (other.BloodGorged != 0) {
        BloodGorged = other.BloodGorged;
      }
      if (other.DancingRuneWeapon != false) {
        DancingRuneWeapon = other.DancingRuneWeapon;
      }
      if (other.ImprovedIcyTouch != 0) {
        ImprovedIcyTouch = other.ImprovedIcyTouch;
      }
      if (other.RunicPowerMastery != 0) {
        RunicPowerMastery = other.RunicPowerMastery;
      }
      if (other.Toughness != 0) {
        Toughness = other.Toughness;
      }
      if (other.IcyReach != 0) {
        IcyReach = other.IcyReach;
      }
      if (other.BlackIce != 0) {
        BlackIce = other.BlackIce;
      }
      if (other.NervesOfColdSteel != 0) {
        NervesOfColdSteel = other.NervesOfColdSteel;
      }
      if (other.IcyTalons != 0) {
        IcyTalons = other.IcyTalons;
      }
      if (other.Lichborne != false) {
        Lichborne = other.Lichborne;
      }
      if (other.Annihilation != 0) {
        Annihilation = other.Annihilation;
      }
      if (other.KillingMachine != 0) {
        KillingMachine = other.KillingMachine;
      }
      if (other.ChillOfTheGrave != 0) {
        ChillOfTheGrave = other.ChillOfTheGrave;
      }
      if (other.EndlessWinter != 0) {
        EndlessWinter = other.EndlessWinter;
      }
      if (other.FrigidDreadplate != 0) {
        FrigidDreadplate = other.FrigidDreadplate;
      }
      if (other.GlacierRot != 0) {
        GlacierRot = other.GlacierRot;
      }
      if (other.Deathchill != false) {
        Deathchill = other.Deathchill;
      }
      if (other.ImprovedIcyTalons != false) {
        ImprovedIcyTalons = other.ImprovedIcyTalons;
      }
      if (other.MercilessCombat != 0) {
        MercilessCombat = other.MercilessCombat;
      }
      if (other.Rime != 0) {
        Rime = other.Rime;
      }
      if (other.Chilblains != 0) {
        Chilblains = other.Chilblains;
      }
      if (other.HungeringCold != false) {
        HungeringCold = other.HungeringCold;
      }
      if (other.ImprovedFrostPresence != 0) {
        ImprovedFrostPresence = other.ImprovedFrostPresence;
      }
      if (other.ThreatOfThassarian != 0) {
        ThreatOfThassarian = other.ThreatOfThassarian;
      }
      if (other.BloodOfTheNorth != 0) {
        BloodOfTheNorth = other.BloodOfTheNorth;
      }
      if (other.UnbreakableArmor != false) {
        UnbreakableArmor = other.UnbreakableArmor;
      }
      if (other.Acclimation != 0) {
        Acclimation = other.Acclimation;
      }
      if (other.FrostStrike != false) {
        FrostStrike = other.FrostStrike;
      }
      if (other.GuileOfGorefiend != 0) {
        GuileOfGorefiend = other.GuileOfGorefiend;
      }
      if (other.TundraStalker != 0) {
        TundraStalker = other.TundraStalker;
      }
      if (other.HowlingBlast != false) {
        HowlingBlast = other.HowlingBlast;
      }
      if (other.ViciousStrikes != 0) {
        ViciousStrikes = other.ViciousStrikes;
      }
      if (other.Virulence != 0) {
        Virulence = other.Virulence;
      }
      if (other.Anticipation != 0) {
        Anticipation = other.Anticipation;
      }
      if (other.Epidemic != 0) {
        Epidemic = other.Epidemic;
      }
      if (other.Morbidity != 0) {
        Morbidity = other.Morbidity;
      }
      if (other.UnholyCommand != 0) {
        UnholyCommand = other.UnholyCommand;
      }
      if (other.RavenousDead != 0) {
        RavenousDead = other.RavenousDead;
      }
      if (other.Outbreak != 0) {
        Outbreak = other.Outbreak;
      }
      if (other.Necrosis != 0) {
        Necrosis = other.Necrosis;
      }
      if (other.CorpseExplosion != false) {
        CorpseExplosion = other.CorpseExplosion;
      }
      if (other.OnAPaleHorse != 0) {
        OnAPaleHorse = other.OnAPaleHorse;
      }
      if (other.BloodCakedBlade != 0) {
        BloodCakedBlade = other.BloodCakedBlade;
      }
      if (other.NightOfTheDead != 0) {
        NightOfTheDead = other.NightOfTheDead;
      }
      if (other.UnholyBlight != false) {
        UnholyBlight = other.UnholyBlight;
      }
      if (other.Impurity != 0) {
        Impurity = other.Impurity;
      }
      if (other.Dirge != 0) {
        Dirge = other.Dirge;
      }
      if (other.Desecration != 0) {
        Desecration = other.Desecration;
      }
      if (other.MagicSuppression != 0) {
        MagicSuppression = other.MagicSuppression;
      }
      if (other.Reaping != 0) {
        Reaping = other.Reaping;
      }
      if (other.MasterOfGhouls != false) {
        MasterOfGhouls = other.MasterOfGhouls;
      }
      if (other.Desolation != 0) {
        Desolation = other.Desolation;
      }
      if (other.AntiMagicZone != false) {
        AntiMagicZone = other.AntiMagicZone;
      }
      if (other.ImprovedUnholyPresence != 0) {
        ImprovedUnholyPresence = other.ImprovedUnholyPresence;
      }
      if (other.GhoulFrenzy != false) {
        GhoulFrenzy = other.GhoulFrenzy;
      }
      if (other.CryptFever != 0) {
        CryptFever = other.CryptFever;
      }
      if (other.BoneShield != false) {
        BoneShield = other.BoneShield;
      }
      if (other.WanderingPlague != 0) {
        WanderingPlague = other.WanderingPlague;
      }
      if (other.EbonPlaguebringer != 0) {
        EbonPlaguebringer = other.EbonPlaguebringer;
      }
      if (other.ScourgeStrike != false) {
        ScourgeStrike = other.ScourgeStrike;
      }
      if (other.RageOfRivendare != 0) {
        RageOfRivendare = other.RageOfRivendare;
      }
      if (other.SummonGargoyle != false) {
        SummonGargoyle = other.SummonGargoyle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Butchery = input.ReadInt32();
            break;
          }
          case 16: {
            Subversion = input.ReadInt32();
            break;
          }
          case 24: {
            BladeBarrier = input.ReadInt32();
            break;
          }
          case 32: {
            BladedArmor = input.ReadInt32();
            break;
          }
          case 40: {
            ScentOfBlood = input.ReadInt32();
            break;
          }
          case 48: {
            TwoHandedWeaponSpecialization = input.ReadInt32();
            break;
          }
          case 56: {
            RuneTap = input.ReadBool();
            break;
          }
          case 64: {
            DarkConviction = input.ReadInt32();
            break;
          }
          case 72: {
            DeathRuneMastery = input.ReadInt32();
            break;
          }
          case 80: {
            ImprovedRuneTap = input.ReadInt32();
            break;
          }
          case 88: {
            SpellDeflection = input.ReadInt32();
            break;
          }
          case 96: {
            Vendetta = input.ReadInt32();
            break;
          }
          case 104: {
            BloodyStrikes = input.ReadInt32();
            break;
          }
          case 112: {
            VeteranOfTheThirdWar = input.ReadInt32();
            break;
          }
          case 120: {
            MarkOfBlood = input.ReadBool();
            break;
          }
          case 128: {
            BloodyVengeance = input.ReadInt32();
            break;
          }
          case 136: {
            AbominationsMight = input.ReadInt32();
            break;
          }
          case 144: {
            Bloodworms = input.ReadInt32();
            break;
          }
          case 152: {
            Hysteria = input.ReadBool();
            break;
          }
          case 160: {
            ImprovedBloodPresence = input.ReadInt32();
            break;
          }
          case 168: {
            ImprovedDeathStrike = input.ReadInt32();
            break;
          }
          case 176: {
            SuddenDoom = input.ReadInt32();
            break;
          }
          case 184: {
            VampiricBlood = input.ReadBool();
            break;
          }
          case 192: {
            WillOfTheNecropolis = input.ReadInt32();
            break;
          }
          case 200: {
            HeartStrike = input.ReadBool();
            break;
          }
          case 208: {
            MightOfMograine = input.ReadInt32();
            break;
          }
          case 216: {
            BloodGorged = input.ReadInt32();
            break;
          }
          case 224: {
            DancingRuneWeapon = input.ReadBool();
            break;
          }
          case 232: {
            ImprovedIcyTouch = input.ReadInt32();
            break;
          }
          case 240: {
            RunicPowerMastery = input.ReadInt32();
            break;
          }
          case 248: {
            Toughness = input.ReadInt32();
            break;
          }
          case 256: {
            IcyReach = input.ReadInt32();
            break;
          }
          case 264: {
            BlackIce = input.ReadInt32();
            break;
          }
          case 272: {
            NervesOfColdSteel = input.ReadInt32();
            break;
          }
          case 280: {
            IcyTalons = input.ReadInt32();
            break;
          }
          case 288: {
            Lichborne = input.ReadBool();
            break;
          }
          case 296: {
            Annihilation = input.ReadInt32();
            break;
          }
          case 304: {
            KillingMachine = input.ReadInt32();
            break;
          }
          case 312: {
            ChillOfTheGrave = input.ReadInt32();
            break;
          }
          case 320: {
            EndlessWinter = input.ReadInt32();
            break;
          }
          case 328: {
            FrigidDreadplate = input.ReadInt32();
            break;
          }
          case 336: {
            GlacierRot = input.ReadInt32();
            break;
          }
          case 344: {
            Deathchill = input.ReadBool();
            break;
          }
          case 352: {
            ImprovedIcyTalons = input.ReadBool();
            break;
          }
          case 360: {
            MercilessCombat = input.ReadInt32();
            break;
          }
          case 368: {
            Rime = input.ReadInt32();
            break;
          }
          case 376: {
            Chilblains = input.ReadInt32();
            break;
          }
          case 384: {
            HungeringCold = input.ReadBool();
            break;
          }
          case 392: {
            ImprovedFrostPresence = input.ReadInt32();
            break;
          }
          case 400: {
            ThreatOfThassarian = input.ReadInt32();
            break;
          }
          case 408: {
            BloodOfTheNorth = input.ReadInt32();
            break;
          }
          case 416: {
            UnbreakableArmor = input.ReadBool();
            break;
          }
          case 424: {
            Acclimation = input.ReadInt32();
            break;
          }
          case 432: {
            FrostStrike = input.ReadBool();
            break;
          }
          case 440: {
            GuileOfGorefiend = input.ReadInt32();
            break;
          }
          case 448: {
            TundraStalker = input.ReadInt32();
            break;
          }
          case 456: {
            HowlingBlast = input.ReadBool();
            break;
          }
          case 464: {
            ViciousStrikes = input.ReadInt32();
            break;
          }
          case 472: {
            Virulence = input.ReadInt32();
            break;
          }
          case 480: {
            Anticipation = input.ReadInt32();
            break;
          }
          case 488: {
            Epidemic = input.ReadInt32();
            break;
          }
          case 496: {
            Morbidity = input.ReadInt32();
            break;
          }
          case 504: {
            UnholyCommand = input.ReadInt32();
            break;
          }
          case 512: {
            RavenousDead = input.ReadInt32();
            break;
          }
          case 520: {
            Outbreak = input.ReadInt32();
            break;
          }
          case 528: {
            Necrosis = input.ReadInt32();
            break;
          }
          case 536: {
            CorpseExplosion = input.ReadBool();
            break;
          }
          case 544: {
            OnAPaleHorse = input.ReadInt32();
            break;
          }
          case 552: {
            BloodCakedBlade = input.ReadInt32();
            break;
          }
          case 560: {
            NightOfTheDead = input.ReadInt32();
            break;
          }
          case 568: {
            UnholyBlight = input.ReadBool();
            break;
          }
          case 576: {
            Impurity = input.ReadInt32();
            break;
          }
          case 584: {
            Dirge = input.ReadInt32();
            break;
          }
          case 592: {
            Desecration = input.ReadInt32();
            break;
          }
          case 600: {
            MagicSuppression = input.ReadInt32();
            break;
          }
          case 608: {
            Reaping = input.ReadInt32();
            break;
          }
          case 616: {
            MasterOfGhouls = input.ReadBool();
            break;
          }
          case 624: {
            Desolation = input.ReadInt32();
            break;
          }
          case 632: {
            AntiMagicZone = input.ReadBool();
            break;
          }
          case 640: {
            ImprovedUnholyPresence = input.ReadInt32();
            break;
          }
          case 648: {
            GhoulFrenzy = input.ReadBool();
            break;
          }
          case 656: {
            CryptFever = input.ReadInt32();
            break;
          }
          case 664: {
            BoneShield = input.ReadBool();
            break;
          }
          case 672: {
            WanderingPlague = input.ReadInt32();
            break;
          }
          case 680: {
            EbonPlaguebringer = input.ReadInt32();
            break;
          }
          case 688: {
            ScourgeStrike = input.ReadBool();
            break;
          }
          case 696: {
            RageOfRivendare = input.ReadInt32();
            break;
          }
          case 704: {
            SummonGargoyle = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Butchery = input.ReadInt32();
            break;
          }
          case 16: {
            Subversion = input.ReadInt32();
            break;
          }
          case 24: {
            BladeBarrier = input.ReadInt32();
            break;
          }
          case 32: {
            BladedArmor = input.ReadInt32();
            break;
          }
          case 40: {
            ScentOfBlood = input.ReadInt32();
            break;
          }
          case 48: {
            TwoHandedWeaponSpecialization = input.ReadInt32();
            break;
          }
          case 56: {
            RuneTap = input.ReadBool();
            break;
          }
          case 64: {
            DarkConviction = input.ReadInt32();
            break;
          }
          case 72: {
            DeathRuneMastery = input.ReadInt32();
            break;
          }
          case 80: {
            ImprovedRuneTap = input.ReadInt32();
            break;
          }
          case 88: {
            SpellDeflection = input.ReadInt32();
            break;
          }
          case 96: {
            Vendetta = input.ReadInt32();
            break;
          }
          case 104: {
            BloodyStrikes = input.ReadInt32();
            break;
          }
          case 112: {
            VeteranOfTheThirdWar = input.ReadInt32();
            break;
          }
          case 120: {
            MarkOfBlood = input.ReadBool();
            break;
          }
          case 128: {
            BloodyVengeance = input.ReadInt32();
            break;
          }
          case 136: {
            AbominationsMight = input.ReadInt32();
            break;
          }
          case 144: {
            Bloodworms = input.ReadInt32();
            break;
          }
          case 152: {
            Hysteria = input.ReadBool();
            break;
          }
          case 160: {
            ImprovedBloodPresence = input.ReadInt32();
            break;
          }
          case 168: {
            ImprovedDeathStrike = input.ReadInt32();
            break;
          }
          case 176: {
            SuddenDoom = input.ReadInt32();
            break;
          }
          case 184: {
            VampiricBlood = input.ReadBool();
            break;
          }
          case 192: {
            WillOfTheNecropolis = input.ReadInt32();
            break;
          }
          case 200: {
            HeartStrike = input.ReadBool();
            break;
          }
          case 208: {
            MightOfMograine = input.ReadInt32();
            break;
          }
          case 216: {
            BloodGorged = input.ReadInt32();
            break;
          }
          case 224: {
            DancingRuneWeapon = input.ReadBool();
            break;
          }
          case 232: {
            ImprovedIcyTouch = input.ReadInt32();
            break;
          }
          case 240: {
            RunicPowerMastery = input.ReadInt32();
            break;
          }
          case 248: {
            Toughness = input.ReadInt32();
            break;
          }
          case 256: {
            IcyReach = input.ReadInt32();
            break;
          }
          case 264: {
            BlackIce = input.ReadInt32();
            break;
          }
          case 272: {
            NervesOfColdSteel = input.ReadInt32();
            break;
          }
          case 280: {
            IcyTalons = input.ReadInt32();
            break;
          }
          case 288: {
            Lichborne = input.ReadBool();
            break;
          }
          case 296: {
            Annihilation = input.ReadInt32();
            break;
          }
          case 304: {
            KillingMachine = input.ReadInt32();
            break;
          }
          case 312: {
            ChillOfTheGrave = input.ReadInt32();
            break;
          }
          case 320: {
            EndlessWinter = input.ReadInt32();
            break;
          }
          case 328: {
            FrigidDreadplate = input.ReadInt32();
            break;
          }
          case 336: {
            GlacierRot = input.ReadInt32();
            break;
          }
          case 344: {
            Deathchill = input.ReadBool();
            break;
          }
          case 352: {
            ImprovedIcyTalons = input.ReadBool();
            break;
          }
          case 360: {
            MercilessCombat = input.ReadInt32();
            break;
          }
          case 368: {
            Rime = input.ReadInt32();
            break;
          }
          case 376: {
            Chilblains = input.ReadInt32();
            break;
          }
          case 384: {
            HungeringCold = input.ReadBool();
            break;
          }
          case 392: {
            ImprovedFrostPresence = input.ReadInt32();
            break;
          }
          case 400: {
            ThreatOfThassarian = input.ReadInt32();
            break;
          }
          case 408: {
            BloodOfTheNorth = input.ReadInt32();
            break;
          }
          case 416: {
            UnbreakableArmor = input.ReadBool();
            break;
          }
          case 424: {
            Acclimation = input.ReadInt32();
            break;
          }
          case 432: {
            FrostStrike = input.ReadBool();
            break;
          }
          case 440: {
            GuileOfGorefiend = input.ReadInt32();
            break;
          }
          case 448: {
            TundraStalker = input.ReadInt32();
            break;
          }
          case 456: {
            HowlingBlast = input.ReadBool();
            break;
          }
          case 464: {
            ViciousStrikes = input.ReadInt32();
            break;
          }
          case 472: {
            Virulence = input.ReadInt32();
            break;
          }
          case 480: {
            Anticipation = input.ReadInt32();
            break;
          }
          case 488: {
            Epidemic = input.ReadInt32();
            break;
          }
          case 496: {
            Morbidity = input.ReadInt32();
            break;
          }
          case 504: {
            UnholyCommand = input.ReadInt32();
            break;
          }
          case 512: {
            RavenousDead = input.ReadInt32();
            break;
          }
          case 520: {
            Outbreak = input.ReadInt32();
            break;
          }
          case 528: {
            Necrosis = input.ReadInt32();
            break;
          }
          case 536: {
            CorpseExplosion = input.ReadBool();
            break;
          }
          case 544: {
            OnAPaleHorse = input.ReadInt32();
            break;
          }
          case 552: {
            BloodCakedBlade = input.ReadInt32();
            break;
          }
          case 560: {
            NightOfTheDead = input.ReadInt32();
            break;
          }
          case 568: {
            UnholyBlight = input.ReadBool();
            break;
          }
          case 576: {
            Impurity = input.ReadInt32();
            break;
          }
          case 584: {
            Dirge = input.ReadInt32();
            break;
          }
          case 592: {
            Desecration = input.ReadInt32();
            break;
          }
          case 600: {
            MagicSuppression = input.ReadInt32();
            break;
          }
          case 608: {
            Reaping = input.ReadInt32();
            break;
          }
          case 616: {
            MasterOfGhouls = input.ReadBool();
            break;
          }
          case 624: {
            Desolation = input.ReadInt32();
            break;
          }
          case 632: {
            AntiMagicZone = input.ReadBool();
            break;
          }
          case 640: {
            ImprovedUnholyPresence = input.ReadInt32();
            break;
          }
          case 648: {
            GhoulFrenzy = input.ReadBool();
            break;
          }
          case 656: {
            CryptFever = input.ReadInt32();
            break;
          }
          case 664: {
            BoneShield = input.ReadBool();
            break;
          }
          case 672: {
            WanderingPlague = input.ReadInt32();
            break;
          }
          case 680: {
            EbonPlaguebringer = input.ReadInt32();
            break;
          }
          case 688: {
            ScourgeStrike = input.ReadBool();
            break;
          }
          case 696: {
            RageOfRivendare = input.ReadInt32();
            break;
          }
          case 704: {
            SummonGargoyle = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Deathknight : pb::IMessage<Deathknight>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Deathknight> _parser = new pb::MessageParser<Deathknight>(() => new Deathknight());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Deathknight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.DeathknightReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Deathknight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Deathknight(Deathknight other) : this() {
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Deathknight Clone() {
      return new Deathknight(this);
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::SirusDbScrapper.UIDatabase.Deathknight.Types.Options options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SirusDbScrapper.UIDatabase.Deathknight.Types.Options Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Deathknight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Deathknight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Deathknight other) {
      if (other == null) {
        return;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::SirusDbScrapper.UIDatabase.Deathknight.Types.Options();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.Deathknight.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.Deathknight.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Deathknight message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Rotation : pb::IMessage<Rotation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Rotation> _parser = new pb::MessageParser<Rotation>(() => new Rotation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Rotation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.Deathknight.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation(Rotation other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation Clone() {
          return new Rotation(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Rotation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Rotation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Rotation other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

      public sealed partial class Options : pb::IMessage<Options>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Options> _parser = new pb::MessageParser<Options>(() => new Options());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Options> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.Deathknight.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options(Options other) : this() {
          startingRunicPower_ = other.startingRunicPower_;
          petUptime_ = other.petUptime_;
          unholyFrenzyTarget_ = other.unholyFrenzyTarget_ != null ? other.unholyFrenzyTarget_.Clone() : null;
          drwPestiApply_ = other.drwPestiApply_;
          useAms_ = other.useAms_;
          avgAmsSuccessRate_ = other.avgAmsSuccessRate_;
          avgAmsHit_ = other.avgAmsHit_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options Clone() {
          return new Options(this);
        }

        /// <summary>Field number for the "starting_runic_power" field.</summary>
        public const int StartingRunicPowerFieldNumber = 1;
        private double startingRunicPower_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double StartingRunicPower {
          get { return startingRunicPower_; }
          set {
            startingRunicPower_ = value;
          }
        }

        /// <summary>Field number for the "pet_uptime" field.</summary>
        public const int PetUptimeFieldNumber = 2;
        private double petUptime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double PetUptime {
          get { return petUptime_; }
          set {
            petUptime_ = value;
          }
        }

        /// <summary>Field number for the "unholy_frenzy_target" field.</summary>
        public const int UnholyFrenzyTargetFieldNumber = 5;
        private global::SirusDbScrapper.UIDatabase.UnitReference unholyFrenzyTarget_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.UnitReference UnholyFrenzyTarget {
          get { return unholyFrenzyTarget_; }
          set {
            unholyFrenzyTarget_ = value;
          }
        }

        /// <summary>Field number for the "drw_pesti_apply" field.</summary>
        public const int DrwPestiApplyFieldNumber = 6;
        private bool drwPestiApply_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool DrwPestiApply {
          get { return drwPestiApply_; }
          set {
            drwPestiApply_ = value;
          }
        }

        /// <summary>Field number for the "use_ams" field.</summary>
        public const int UseAmsFieldNumber = 9;
        private bool useAms_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool UseAms {
          get { return useAms_; }
          set {
            useAms_ = value;
          }
        }

        /// <summary>Field number for the "avg_ams_success_rate" field.</summary>
        public const int AvgAmsSuccessRateFieldNumber = 10;
        private double avgAmsSuccessRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double AvgAmsSuccessRate {
          get { return avgAmsSuccessRate_; }
          set {
            avgAmsSuccessRate_ = value;
          }
        }

        /// <summary>Field number for the "avg_ams_hit" field.</summary>
        public const int AvgAmsHitFieldNumber = 11;
        private double avgAmsHit_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double AvgAmsHit {
          get { return avgAmsHit_; }
          set {
            avgAmsHit_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Options);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Options other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StartingRunicPower, other.StartingRunicPower)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PetUptime, other.PetUptime)) return false;
          if (!object.Equals(UnholyFrenzyTarget, other.UnholyFrenzyTarget)) return false;
          if (DrwPestiApply != other.DrwPestiApply) return false;
          if (UseAms != other.UseAms) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgAmsSuccessRate, other.AvgAmsSuccessRate)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgAmsHit, other.AvgAmsHit)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (StartingRunicPower != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StartingRunicPower);
          if (PetUptime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PetUptime);
          if (unholyFrenzyTarget_ != null) hash ^= UnholyFrenzyTarget.GetHashCode();
          if (DrwPestiApply != false) hash ^= DrwPestiApply.GetHashCode();
          if (UseAms != false) hash ^= UseAms.GetHashCode();
          if (AvgAmsSuccessRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgAmsSuccessRate);
          if (AvgAmsHit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgAmsHit);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (StartingRunicPower != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(StartingRunicPower);
          }
          if (PetUptime != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(PetUptime);
          }
          if (unholyFrenzyTarget_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(UnholyFrenzyTarget);
          }
          if (DrwPestiApply != false) {
            output.WriteRawTag(48);
            output.WriteBool(DrwPestiApply);
          }
          if (UseAms != false) {
            output.WriteRawTag(72);
            output.WriteBool(UseAms);
          }
          if (AvgAmsSuccessRate != 0D) {
            output.WriteRawTag(81);
            output.WriteDouble(AvgAmsSuccessRate);
          }
          if (AvgAmsHit != 0D) {
            output.WriteRawTag(89);
            output.WriteDouble(AvgAmsHit);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (StartingRunicPower != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(StartingRunicPower);
          }
          if (PetUptime != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(PetUptime);
          }
          if (unholyFrenzyTarget_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(UnholyFrenzyTarget);
          }
          if (DrwPestiApply != false) {
            output.WriteRawTag(48);
            output.WriteBool(DrwPestiApply);
          }
          if (UseAms != false) {
            output.WriteRawTag(72);
            output.WriteBool(UseAms);
          }
          if (AvgAmsSuccessRate != 0D) {
            output.WriteRawTag(81);
            output.WriteDouble(AvgAmsSuccessRate);
          }
          if (AvgAmsHit != 0D) {
            output.WriteRawTag(89);
            output.WriteDouble(AvgAmsHit);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (StartingRunicPower != 0D) {
            size += 1 + 8;
          }
          if (PetUptime != 0D) {
            size += 1 + 8;
          }
          if (unholyFrenzyTarget_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnholyFrenzyTarget);
          }
          if (DrwPestiApply != false) {
            size += 1 + 1;
          }
          if (UseAms != false) {
            size += 1 + 1;
          }
          if (AvgAmsSuccessRate != 0D) {
            size += 1 + 8;
          }
          if (AvgAmsHit != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Options other) {
          if (other == null) {
            return;
          }
          if (other.StartingRunicPower != 0D) {
            StartingRunicPower = other.StartingRunicPower;
          }
          if (other.PetUptime != 0D) {
            PetUptime = other.PetUptime;
          }
          if (other.unholyFrenzyTarget_ != null) {
            if (unholyFrenzyTarget_ == null) {
              UnholyFrenzyTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
            }
            UnholyFrenzyTarget.MergeFrom(other.UnholyFrenzyTarget);
          }
          if (other.DrwPestiApply != false) {
            DrwPestiApply = other.DrwPestiApply;
          }
          if (other.UseAms != false) {
            UseAms = other.UseAms;
          }
          if (other.AvgAmsSuccessRate != 0D) {
            AvgAmsSuccessRate = other.AvgAmsSuccessRate;
          }
          if (other.AvgAmsHit != 0D) {
            AvgAmsHit = other.AvgAmsHit;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                StartingRunicPower = input.ReadDouble();
                break;
              }
              case 17: {
                PetUptime = input.ReadDouble();
                break;
              }
              case 42: {
                if (unholyFrenzyTarget_ == null) {
                  UnholyFrenzyTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
                }
                input.ReadMessage(UnholyFrenzyTarget);
                break;
              }
              case 48: {
                DrwPestiApply = input.ReadBool();
                break;
              }
              case 72: {
                UseAms = input.ReadBool();
                break;
              }
              case 81: {
                AvgAmsSuccessRate = input.ReadDouble();
                break;
              }
              case 89: {
                AvgAmsHit = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                StartingRunicPower = input.ReadDouble();
                break;
              }
              case 17: {
                PetUptime = input.ReadDouble();
                break;
              }
              case 42: {
                if (unholyFrenzyTarget_ == null) {
                  UnholyFrenzyTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
                }
                input.ReadMessage(UnholyFrenzyTarget);
                break;
              }
              case 48: {
                DrwPestiApply = input.ReadBool();
                break;
              }
              case 72: {
                UseAms = input.ReadBool();
                break;
              }
              case 81: {
                AvgAmsSuccessRate = input.ReadDouble();
                break;
              }
              case 89: {
                AvgAmsHit = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class TankDeathknight : pb::IMessage<TankDeathknight>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TankDeathknight> _parser = new pb::MessageParser<TankDeathknight>(() => new TankDeathknight());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TankDeathknight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.DeathknightReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TankDeathknight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TankDeathknight(TankDeathknight other) : this() {
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TankDeathknight Clone() {
      return new TankDeathknight(this);
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 1;
    private global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Options options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Options Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TankDeathknight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TankDeathknight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (rotation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rotation);
      }
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (rotation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rotation);
      }
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TankDeathknight other) {
      if (other == null) {
        return;
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Options();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rotation_ == null) {
              Rotation = new global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (rotation_ == null) {
              Rotation = new global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TankDeathknight message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Rotation : pb::IMessage<Rotation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Rotation> _parser = new pb::MessageParser<Rotation>(() => new Rotation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Rotation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.TankDeathknight.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation(Rotation other) : this() {
          opener_ = other.opener_;
          optimizationSetting_ = other.optimizationSetting_;
          bloodSpell_ = other.bloodSpell_;
          presence_ = other.presence_;
          bloodTapPrio_ = other.bloodTapPrio_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation Clone() {
          return new Rotation(this);
        }

        /// <summary>Field number for the "opener" field.</summary>
        public const int OpenerFieldNumber = 1;
        private global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Opener opener_ = global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Opener.Regular;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Opener Opener {
          get { return opener_; }
          set {
            opener_ = value;
          }
        }

        /// <summary>Field number for the "optimization_setting" field.</summary>
        public const int OptimizationSettingFieldNumber = 2;
        private global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.OptimizationSetting optimizationSetting_ = global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.OptimizationSetting.Hps;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.OptimizationSetting OptimizationSetting {
          get { return optimizationSetting_; }
          set {
            optimizationSetting_ = value;
          }
        }

        /// <summary>Field number for the "blood_spell" field.</summary>
        public const int BloodSpellFieldNumber = 3;
        private global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodSpell bloodSpell_ = global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodSpell.BloodStrike;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodSpell BloodSpell {
          get { return bloodSpell_; }
          set {
            bloodSpell_ = value;
          }
        }

        /// <summary>Field number for the "presence" field.</summary>
        public const int PresenceFieldNumber = 4;
        private global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Presence presence_ = global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Presence.Blood;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Presence Presence {
          get { return presence_; }
          set {
            presence_ = value;
          }
        }

        /// <summary>Field number for the "blood_tap_prio" field.</summary>
        public const int BloodTapPrioFieldNumber = 5;
        private global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodTapPrio bloodTapPrio_ = global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodTapPrio.Defensive;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodTapPrio BloodTapPrio {
          get { return bloodTapPrio_; }
          set {
            bloodTapPrio_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Rotation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Rotation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Opener != other.Opener) return false;
          if (OptimizationSetting != other.OptimizationSetting) return false;
          if (BloodSpell != other.BloodSpell) return false;
          if (Presence != other.Presence) return false;
          if (BloodTapPrio != other.BloodTapPrio) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Opener != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Opener.Regular) hash ^= Opener.GetHashCode();
          if (OptimizationSetting != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.OptimizationSetting.Hps) hash ^= OptimizationSetting.GetHashCode();
          if (BloodSpell != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodSpell.BloodStrike) hash ^= BloodSpell.GetHashCode();
          if (Presence != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Presence.Blood) hash ^= Presence.GetHashCode();
          if (BloodTapPrio != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodTapPrio.Defensive) hash ^= BloodTapPrio.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Opener != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Opener.Regular) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Opener);
          }
          if (OptimizationSetting != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.OptimizationSetting.Hps) {
            output.WriteRawTag(16);
            output.WriteEnum((int) OptimizationSetting);
          }
          if (BloodSpell != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodSpell.BloodStrike) {
            output.WriteRawTag(24);
            output.WriteEnum((int) BloodSpell);
          }
          if (Presence != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Presence.Blood) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Presence);
          }
          if (BloodTapPrio != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodTapPrio.Defensive) {
            output.WriteRawTag(40);
            output.WriteEnum((int) BloodTapPrio);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Opener != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Opener.Regular) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Opener);
          }
          if (OptimizationSetting != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.OptimizationSetting.Hps) {
            output.WriteRawTag(16);
            output.WriteEnum((int) OptimizationSetting);
          }
          if (BloodSpell != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodSpell.BloodStrike) {
            output.WriteRawTag(24);
            output.WriteEnum((int) BloodSpell);
          }
          if (Presence != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Presence.Blood) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Presence);
          }
          if (BloodTapPrio != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodTapPrio.Defensive) {
            output.WriteRawTag(40);
            output.WriteEnum((int) BloodTapPrio);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Opener != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Opener.Regular) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Opener);
          }
          if (OptimizationSetting != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.OptimizationSetting.Hps) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OptimizationSetting);
          }
          if (BloodSpell != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodSpell.BloodStrike) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BloodSpell);
          }
          if (Presence != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Presence.Blood) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Presence);
          }
          if (BloodTapPrio != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodTapPrio.Defensive) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BloodTapPrio);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Rotation other) {
          if (other == null) {
            return;
          }
          if (other.Opener != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Opener.Regular) {
            Opener = other.Opener;
          }
          if (other.OptimizationSetting != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.OptimizationSetting.Hps) {
            OptimizationSetting = other.OptimizationSetting;
          }
          if (other.BloodSpell != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodSpell.BloodStrike) {
            BloodSpell = other.BloodSpell;
          }
          if (other.Presence != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Presence.Blood) {
            Presence = other.Presence;
          }
          if (other.BloodTapPrio != global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodTapPrio.Defensive) {
            BloodTapPrio = other.BloodTapPrio;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Opener = (global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Opener) input.ReadEnum();
                break;
              }
              case 16: {
                OptimizationSetting = (global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.OptimizationSetting) input.ReadEnum();
                break;
              }
              case 24: {
                BloodSpell = (global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodSpell) input.ReadEnum();
                break;
              }
              case 32: {
                Presence = (global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Presence) input.ReadEnum();
                break;
              }
              case 40: {
                BloodTapPrio = (global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodTapPrio) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Opener = (global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Opener) input.ReadEnum();
                break;
              }
              case 16: {
                OptimizationSetting = (global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.OptimizationSetting) input.ReadEnum();
                break;
              }
              case 24: {
                BloodSpell = (global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodSpell) input.ReadEnum();
                break;
              }
              case 32: {
                Presence = (global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.Presence) input.ReadEnum();
                break;
              }
              case 40: {
                BloodTapPrio = (global::SirusDbScrapper.UIDatabase.TankDeathknight.Types.Rotation.Types.BloodTapPrio) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Rotation message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public enum Opener {
            [pbr::OriginalName("Regular")] Regular = 0,
            [pbr::OriginalName("Threat")] Threat = 1,
          }

          public enum OptimizationSetting {
            [pbr::OriginalName("Hps")] Hps = 0,
            [pbr::OriginalName("Tps")] Tps = 1,
          }

          public enum BloodSpell {
            [pbr::OriginalName("BloodStrike")] BloodStrike = 0,
            [pbr::OriginalName("BloodBoil")] BloodBoil = 1,
            [pbr::OriginalName("HeartStrike")] HeartStrike = 2,
          }

          public enum BloodTapPrio {
            [pbr::OriginalName("Defensive")] Defensive = 0,
            [pbr::OriginalName("Offensive")] Offensive = 1,
          }

          public enum Presence {
            [pbr::OriginalName("Blood")] Blood = 0,
            [pbr::OriginalName("Frost")] Frost = 1,
            [pbr::OriginalName("Unholy")] Unholy = 2,
          }

        }
        #endregion

      }

      public sealed partial class Options : pb::IMessage<Options>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Options> _parser = new pb::MessageParser<Options>(() => new Options());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Options> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.TankDeathknight.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options(Options other) : this() {
          startingRunicPower_ = other.startingRunicPower_;
          unholyFrenzyTarget_ = other.unholyFrenzyTarget_ != null ? other.unholyFrenzyTarget_.Clone() : null;
          defensiveDelay_ = other.defensiveDelay_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options Clone() {
          return new Options(this);
        }

        /// <summary>Field number for the "starting_runic_power" field.</summary>
        public const int StartingRunicPowerFieldNumber = 1;
        private double startingRunicPower_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double StartingRunicPower {
          get { return startingRunicPower_; }
          set {
            startingRunicPower_ = value;
          }
        }

        /// <summary>Field number for the "unholy_frenzy_target" field.</summary>
        public const int UnholyFrenzyTargetFieldNumber = 2;
        private global::SirusDbScrapper.UIDatabase.UnitReference unholyFrenzyTarget_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.UnitReference UnholyFrenzyTarget {
          get { return unholyFrenzyTarget_; }
          set {
            unholyFrenzyTarget_ = value;
          }
        }

        /// <summary>Field number for the "defensive_delay" field.</summary>
        public const int DefensiveDelayFieldNumber = 3;
        private double defensiveDelay_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double DefensiveDelay {
          get { return defensiveDelay_; }
          set {
            defensiveDelay_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Options);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Options other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StartingRunicPower, other.StartingRunicPower)) return false;
          if (!object.Equals(UnholyFrenzyTarget, other.UnholyFrenzyTarget)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DefensiveDelay, other.DefensiveDelay)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (StartingRunicPower != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StartingRunicPower);
          if (unholyFrenzyTarget_ != null) hash ^= UnholyFrenzyTarget.GetHashCode();
          if (DefensiveDelay != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DefensiveDelay);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (StartingRunicPower != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(StartingRunicPower);
          }
          if (unholyFrenzyTarget_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(UnholyFrenzyTarget);
          }
          if (DefensiveDelay != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(DefensiveDelay);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (StartingRunicPower != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(StartingRunicPower);
          }
          if (unholyFrenzyTarget_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(UnholyFrenzyTarget);
          }
          if (DefensiveDelay != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(DefensiveDelay);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (StartingRunicPower != 0D) {
            size += 1 + 8;
          }
          if (unholyFrenzyTarget_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnholyFrenzyTarget);
          }
          if (DefensiveDelay != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Options other) {
          if (other == null) {
            return;
          }
          if (other.StartingRunicPower != 0D) {
            StartingRunicPower = other.StartingRunicPower;
          }
          if (other.unholyFrenzyTarget_ != null) {
            if (unholyFrenzyTarget_ == null) {
              UnholyFrenzyTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
            }
            UnholyFrenzyTarget.MergeFrom(other.UnholyFrenzyTarget);
          }
          if (other.DefensiveDelay != 0D) {
            DefensiveDelay = other.DefensiveDelay;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                StartingRunicPower = input.ReadDouble();
                break;
              }
              case 18: {
                if (unholyFrenzyTarget_ == null) {
                  UnholyFrenzyTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
                }
                input.ReadMessage(UnholyFrenzyTarget);
                break;
              }
              case 25: {
                DefensiveDelay = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                StartingRunicPower = input.ReadDouble();
                break;
              }
              case 18: {
                if (unholyFrenzyTarget_ == null) {
                  UnholyFrenzyTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
                }
                input.ReadMessage(UnholyFrenzyTarget);
                break;
              }
              case 25: {
                DefensiveDelay = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
