// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rogue.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SirusDbScrapper.UIDatabase {

  /// <summary>Holder for reflection information generated from rogue.proto</summary>
  public static partial class RogueReflection {

    #region Descriptor
    /// <summary>File descriptor for rogue.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RogueReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgtyb2d1ZS5wcm90bxIFcHJvdG8aDGNvbW1vbi5wcm90byLKDwoMUm9ndWVU",
            "YWxlbnRzEhsKE2ltcHJvdmVkX2V2aXNjZXJhdGUYASABKAUSGwoTcmVtb3Jz",
            "ZWxlc3NfYXR0YWNrcxgCIAEoBRIOCgZtYWxpY2UYAyABKAUSFAoMcnV0aGxl",
            "c3NuZXNzGAQgASgFEhUKDWJsb29kX3NwYXR0ZXIYBSABKAUSGQoRcHVuY3R1",
            "cmluZ193b3VuZHMYBiABKAUSDQoFdmlnb3IYByABKAgSHQoVaW1wcm92ZWRf",
            "ZXhwb3NlX2FybW9yGAggASgFEhEKCWxldGhhbGl0eRgJIAEoBRIUCgx2aWxl",
            "X3BvaXNvbnMYCiABKAUSGAoQaW1wcm92ZWRfcG9pc29ucxgLIAEoBRIUCgxm",
            "bGVldF9mb290ZWQYDCABKAUSEgoKY29sZF9ibG9vZBgNIAEoCBIcChRpbXBy",
            "b3ZlZF9raWRuZXlfc2hvdBgOIAEoBRIWCg5xdWlja19yZWNvdmVyeRgPIAEo",
            "BRIRCglzZWFsX2ZhdGUYECABKAUSDgoGbXVyZGVyGBEgASgFEhMKC2RlYWRs",
            "eV9icmV3GBIgASgFEhAKCG92ZXJraWxsGBMgASgIEhcKD2RlYWRlbmVkX25l",
            "cnZlcxgUIAEoBRIXCg9mb2N1c2VkX2F0dGFja3MYFSABKAUSFQoNZmluZF93",
            "ZWFrbmVzcxgWIAEoBRIXCg9tYXN0ZXJfcG9pc29uZXIYFyABKAUSEAoIbXV0",
            "aWxhdGUYGCABKAgSFwoPdHVybl90aGVfdGFibGVzGBkgASgFEhgKEGN1dF90",
            "b190aGVfY2hhc2UYGiABKAUSGAoQaHVuZ2VyX2Zvcl9ibG9vZBgbIAEoCBIW",
            "Cg5pbXByb3ZlZF9nb3VnZRgcIAEoBRIgChhpbXByb3ZlZF9zaW5pc3Rlcl9z",
            "dHJpa2UYHSABKAUSIQoZZHVhbF93aWVsZF9zcGVjaWFsaXphdGlvbhgeIAEo",
            "BRIfChdpbXByb3ZlZF9zbGljZV9hbmRfZGljZRgfIAEoBRISCgpkZWZsZWN0",
            "aW9uGCAgASgFEhEKCXByZWNpc2lvbhghIAEoBRIRCgllbmR1cmFuY2UYIiAB",
            "KAUSDwoHcmlwb3N0ZRgjIAEoCBIdChVjbG9zZV9xdWFydGVyc19jb21iYXQY",
            "JCABKAUSFQoNaW1wcm92ZWRfa2ljaxglIAEoBRIXCg9pbXByb3ZlZF9zcHJp",
            "bnQYJiABKAUSGgoSbGlnaHRuaW5nX3JlZmxleGVzGCcgASgFEhIKCmFnZ3Jl",
            "c3Npb24YKCABKAUSGwoTbWFjZV9zcGVjaWFsaXphdGlvbhgpIAEoBRIUCgxi",
            "bGFkZV9mbHVycnkYKiABKAgSFgoOaGFja19hbmRfc2xhc2gYKyABKAUSGAoQ",
            "d2VhcG9uX2V4cGVydGlzZRgsIAEoBRIWCg5ibGFkZV90d2lzdGluZxgtIAEo",
            "BRIQCgh2aXRhbGl0eRguIAEoBRIXCg9hZHJlbmFsaW5lX3J1c2gYLyABKAgS",
            "FwoPbmVydmVzX29mX3N0ZWVsGDAgASgFEh8KF3Rocm93aW5nX3NwZWNpYWxp",
            "emF0aW9uGDEgASgFEhYKDmNvbWJhdF9wb3RlbmN5GDIgASgFEhgKEHVuZmFp",
            "cl9hZHZhbnRhZ2UYMyABKAUSGAoQc3VycHJpc2VfYXR0YWNrcxg0IAEoCBIV",
            "Cg1zYXZhZ2VfY29tYmF0GDUgASgFEhgKEHByZXlfb25fdGhlX3dlYWsYNiAB",
            "KAUSFQoNa2lsbGluZ19zcHJlZRg3IAEoCBIaChJyZWxlbnRsZXNzX3N0cmlr",
            "ZXMYOCABKAUSGwoTbWFzdGVyX29mX2RlY2VwdGlvbhg5IAEoBRITCgtvcHBv",
            "cnR1bml0eRg6IAEoBRIXCg9zbGVpZ2h0X29mX2hhbmQYOyABKAUSFAoMZGly",
            "dHlfdHJpY2tzGDwgASgFEhIKCmNhbW91ZmxhZ2UYPSABKAUSEwoLZWx1c2l2",
            "ZW5lc3MYPiABKAUSFgoOZ2hvc3RseV9zdHJpa2UYPyABKAgSFwoPc2VycmF0",
            "ZWRfYmxhZGVzGEAgASgFEg0KBXNldHVwGEEgASgFEhIKCmluaXRpYXRpdmUY",
            "QiABKAUSFwoPaW1wcm92ZWRfYW1idXNoGEMgASgFEhkKEWhlaWdodGVuZWRf",
            "c2Vuc2VzGEQgASgFEhMKC3ByZXBhcmF0aW9uGEUgASgIEhMKC2RpcnR5X2Rl",
            "ZWRzGEYgASgFEhIKCmhlbW9ycmhhZ2UYRyABKAgSGgoSbWFzdGVyX29mX3N1",
            "YnRsZXR5GEggASgFEhIKCmRlYWRsaW5lc3MYSSABKAUSGgoSZW52ZWxvcGlu",
            "Z19zaGFkb3dzGEogASgFEhUKDXByZW1lZGl0YXRpb24YSyABKAgSEwoLY2hl",
            "YXRfZGVhdGgYTCABKAUSGAoQc2luaXN0ZXJfY2FsbGluZxhNIAEoBRIOCgZ3",
            "YXlsYXkYTiABKAUSGwoTaG9ub3JfYW1vbmdfdGhpZXZlcxhPIAEoBRISCgpz",
            "aGFkb3dzdGVwGFAgASgIEhUKDWZpbHRoeV90cmlja3MYUSABKAUSIgoac2xh",
            "dWdodGVyX2Zyb21fdGhlX3NoYWRvd3MYUiABKAUSFAoMc2hhZG93X2RhbmNl",
            "GFMgASgIItsDCgVSb2d1ZRIlCgdvcHRpb25zGAMgASgLMhQucHJvdG8uUm9n",
            "dWUuT3B0aW9ucxoKCghSb3RhdGlvbhqeAwoHT3B0aW9ucxI4Chp0cmlja3Nf",
            "b2ZfdGhlX3RyYWRlX3RhcmdldBgBIAEoCzIULnByb3RvLlVuaXRSZWZlcmVu",
            "Y2USMgoIbWhfaW1idWUYAiABKA4yIC5wcm90by5Sb2d1ZS5PcHRpb25zLlBv",
            "aXNvbkltYnVlEjIKCG9oX2ltYnVlGAMgASgOMiAucHJvdG8uUm9ndWUuT3B0",
            "aW9ucy5Qb2lzb25JbWJ1ZRIiChpzdGFydGluZ19vdmVya2lsbF9kdXJhdGlv",
            "bhgEIAEoBRIeChZhcHBseV9wb2lzb25zX21hbnVhbGx5GAUgASgIEiIKGmhv",
            "bm9yX29mX3RoaWV2ZXNfY3JpdF9yYXRlGAYgASgFEhsKE2Fzc3VtZV9ibGVl",
            "ZF9hY3RpdmUYByABKAgSGQoRdmFuaXNoX2JyZWFrX3RpbWUYCCABKAIiUQoL",
            "UG9pc29uSW1idWUSDAoITm9Qb2lzb24QABIRCg1JbnN0YW50UG9pc29uEAES",
            "EAoMRGVhZGx5UG9pc29uEAISDwoLV291bmRQb2lzb24QAyrjBQoPUm9ndWVN",
            "YWpvckdseXBoEhcKE1JvZ3VlTWFqb3JHbHlwaE5vbmUQABIbChVHbHlwaE9m",
            "QWRyZW5hbGluZVJ1c2gQys8CEhMKDUdseXBoT2ZBbWJ1c2gQy88CEhUKD0ds",
            "eXBoT2ZCYWNrc3RhYhDMzwISGAoSR2x5cGhPZkJsYWRlRmx1cnJ5EM3PAhIb",
            "ChVHbHlwaE9mQ2xvYWtPZlNoYWRvd3MQyeUCEhwKFkdseXBoT2ZDcmlwcGxp",
            "bmdQb2lzb24Qzs8CEhgKEkdseXBoT2ZEZWFkbHlUaHJvdxDPzwISFAoOR2x5",
            "cGhPZkV2YXNpb24Q0M8CEhcKEUdseXBoT2ZFdmlzY2VyYXRlENHPAhIYChJH",
            "bHlwaE9mRXhwb3NlQXJtb3IQ0s8CEhgKEkdseXBoT2ZGYW5PZktuaXZlcxDG",
            "5QISEgoMR2x5cGhPZkZlaW50ENPPAhIUCg5HbHlwaE9mR2Fycm90ZRDUzwIS",
            "GgoUR2x5cGhPZkdob3N0bHlTdHJpa2UQ1c8CEhIKDEdseXBoT2ZHb3VnZRDW",
            "zwISFwoRR2x5cGhPZkhlbW9ycmhhZ2UQ188CEhsKFUdseXBoT2ZIdW5nZXJG",
            "b3JCbG9vZBDB5QISGQoTR2x5cGhPZktpbGxpbmdTcHJlZRDC5QISFQoPR2x5",
            "cGhPZk11dGlsYXRlEMjlAhIYChJHbHlwaE9mUHJlcGFyYXRpb24Q2M8CEhQK",
            "DkdseXBoT2ZSdXB0dXJlENnPAhIQCgpHbHlwaE9mU2FwENrPAhIYChJHbHlw",
            "aE9mU2hhZG93RGFuY2UQxOUCEhsKFUdseXBoT2ZTaW5pc3RlclN0cmlrZRDc",
            "zwISGQoTR2x5cGhPZlNsaWNlQW5kRGljZRDdzwISEwoNR2x5cGhPZlNwcmlu",
            "dBDezwISHQoXR2x5cGhPZlRyaWNrc09mVGhlVHJhZGUQx+UCEhIKDEdseXBo",
            "T2ZWaWdvchDbzwIquAEKD1JvZ3VlTWlub3JHbHlwaBIXChNSb2d1ZU1pbm9y",
            "R2x5cGhOb25lEAASGQoTR2x5cGhPZkJsdXJyZWRTcGVlZBDz0gISFQoPR2x5",
            "cGhPZkRpc3RyYWN0EPDSAhIVCg9HbHlwaE9mUGlja0xvY2sQ8dICEhcKEUds",
            "eXBoT2ZQaWNrUG9ja2V0EM/SAhIVCg9HbHlwaE9mU2FmZUZhbGwQ8tICEhMK",
            "DUdseXBoT2ZWYW5pc2gQ9NICQh2qAhpTaXJ1c0RiU2NyYXBwZXIuVUlEYXRh",
            "YmFzZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SirusDbScrapper.UIDatabase.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SirusDbScrapper.UIDatabase.RogueMajorGlyph), typeof(global::SirusDbScrapper.UIDatabase.RogueMinorGlyph), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.RogueTalents), global::SirusDbScrapper.UIDatabase.RogueTalents.Parser, new[]{ "ImprovedEviscerate", "RemorselessAttacks", "Malice", "Ruthlessness", "BloodSpatter", "PuncturingWounds", "Vigor", "ImprovedExposeArmor", "Lethality", "VilePoisons", "ImprovedPoisons", "FleetFooted", "ColdBlood", "ImprovedKidneyShot", "QuickRecovery", "SealFate", "Murder", "DeadlyBrew", "Overkill", "DeadenedNerves", "FocusedAttacks", "FindWeakness", "MasterPoisoner", "Mutilate", "TurnTheTables", "CutToTheChase", "HungerForBlood", "ImprovedGouge", "ImprovedSinisterStrike", "DualWieldSpecialization", "ImprovedSliceAndDice", "Deflection", "Precision", "Endurance", "Riposte", "CloseQuartersCombat", "ImprovedKick", "ImprovedSprint", "LightningReflexes", "Aggression", "MaceSpecialization", "BladeFlurry", "HackAndSlash", "WeaponExpertise", "BladeTwisting", "Vitality", "AdrenalineRush", "NervesOfSteel", "ThrowingSpecialization", "CombatPotency", "UnfairAdvantage", "SurpriseAttacks", "SavageCombat", "PreyOnTheWeak", "KillingSpree", "RelentlessStrikes", "MasterOfDeception", "Opportunity", "SleightOfHand", "DirtyTricks", "Camouflage", "Elusiveness", "GhostlyStrike", "SerratedBlades", "Setup", "Initiative", "ImprovedAmbush", "HeightenedSenses", "Preparation", "DirtyDeeds", "Hemorrhage", "MasterOfSubtlety", "Deadliness", "EnvelopingShadows", "Premeditation", "CheatDeath", "SinisterCalling", "Waylay", "HonorAmongThieves", "Shadowstep", "FilthyTricks", "SlaughterFromTheShadows", "ShadowDance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.Rogue), global::SirusDbScrapper.UIDatabase.Rogue.Parser, new[]{ "Options" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.Rogue.Types.Rotation), global::SirusDbScrapper.UIDatabase.Rogue.Types.Rotation.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.Rogue.Types.Options), global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Parser, new[]{ "TricksOfTheTradeTarget", "MhImbue", "OhImbue", "StartingOverkillDuration", "ApplyPoisonsManually", "HonorOfThievesCritRate", "AssumeBleedActive", "VanishBreakTime" }, null, new[]{ typeof(global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue) }, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum RogueMajorGlyph {
    [pbr::OriginalName("RogueMajorGlyphNone")] None = 0,
    [pbr::OriginalName("GlyphOfAdrenalineRush")] GlyphOfAdrenalineRush = 42954,
    [pbr::OriginalName("GlyphOfAmbush")] GlyphOfAmbush = 42955,
    [pbr::OriginalName("GlyphOfBackstab")] GlyphOfBackstab = 42956,
    [pbr::OriginalName("GlyphOfBladeFlurry")] GlyphOfBladeFlurry = 42957,
    [pbr::OriginalName("GlyphOfCloakOfShadows")] GlyphOfCloakOfShadows = 45769,
    [pbr::OriginalName("GlyphOfCripplingPoison")] GlyphOfCripplingPoison = 42958,
    [pbr::OriginalName("GlyphOfDeadlyThrow")] GlyphOfDeadlyThrow = 42959,
    [pbr::OriginalName("GlyphOfEvasion")] GlyphOfEvasion = 42960,
    [pbr::OriginalName("GlyphOfEviscerate")] GlyphOfEviscerate = 42961,
    [pbr::OriginalName("GlyphOfExposeArmor")] GlyphOfExposeArmor = 42962,
    [pbr::OriginalName("GlyphOfFanOfKnives")] GlyphOfFanOfKnives = 45766,
    [pbr::OriginalName("GlyphOfFeint")] GlyphOfFeint = 42963,
    [pbr::OriginalName("GlyphOfGarrote")] GlyphOfGarrote = 42964,
    [pbr::OriginalName("GlyphOfGhostlyStrike")] GlyphOfGhostlyStrike = 42965,
    [pbr::OriginalName("GlyphOfGouge")] GlyphOfGouge = 42966,
    [pbr::OriginalName("GlyphOfHemorrhage")] GlyphOfHemorrhage = 42967,
    [pbr::OriginalName("GlyphOfHungerForBlood")] GlyphOfHungerForBlood = 45761,
    [pbr::OriginalName("GlyphOfKillingSpree")] GlyphOfKillingSpree = 45762,
    [pbr::OriginalName("GlyphOfMutilate")] GlyphOfMutilate = 45768,
    [pbr::OriginalName("GlyphOfPreparation")] GlyphOfPreparation = 42968,
    [pbr::OriginalName("GlyphOfRupture")] GlyphOfRupture = 42969,
    [pbr::OriginalName("GlyphOfSap")] GlyphOfSap = 42970,
    [pbr::OriginalName("GlyphOfShadowDance")] GlyphOfShadowDance = 45764,
    [pbr::OriginalName("GlyphOfSinisterStrike")] GlyphOfSinisterStrike = 42972,
    [pbr::OriginalName("GlyphOfSliceAndDice")] GlyphOfSliceAndDice = 42973,
    [pbr::OriginalName("GlyphOfSprint")] GlyphOfSprint = 42974,
    [pbr::OriginalName("GlyphOfTricksOfTheTrade")] GlyphOfTricksOfTheTrade = 45767,
    [pbr::OriginalName("GlyphOfVigor")] GlyphOfVigor = 42971,
  }

  public enum RogueMinorGlyph {
    [pbr::OriginalName("RogueMinorGlyphNone")] None = 0,
    [pbr::OriginalName("GlyphOfBlurredSpeed")] GlyphOfBlurredSpeed = 43379,
    [pbr::OriginalName("GlyphOfDistract")] GlyphOfDistract = 43376,
    [pbr::OriginalName("GlyphOfPickLock")] GlyphOfPickLock = 43377,
    [pbr::OriginalName("GlyphOfPickPocket")] GlyphOfPickPocket = 43343,
    [pbr::OriginalName("GlyphOfSafeFall")] GlyphOfSafeFall = 43378,
    [pbr::OriginalName("GlyphOfVanish")] GlyphOfVanish = 43380,
  }

  #endregion

  #region Messages
  public sealed partial class RogueTalents : pb::IMessage<RogueTalents>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RogueTalents> _parser = new pb::MessageParser<RogueTalents>(() => new RogueTalents());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RogueTalents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.RogueReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RogueTalents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RogueTalents(RogueTalents other) : this() {
      improvedEviscerate_ = other.improvedEviscerate_;
      remorselessAttacks_ = other.remorselessAttacks_;
      malice_ = other.malice_;
      ruthlessness_ = other.ruthlessness_;
      bloodSpatter_ = other.bloodSpatter_;
      puncturingWounds_ = other.puncturingWounds_;
      vigor_ = other.vigor_;
      improvedExposeArmor_ = other.improvedExposeArmor_;
      lethality_ = other.lethality_;
      vilePoisons_ = other.vilePoisons_;
      improvedPoisons_ = other.improvedPoisons_;
      fleetFooted_ = other.fleetFooted_;
      coldBlood_ = other.coldBlood_;
      improvedKidneyShot_ = other.improvedKidneyShot_;
      quickRecovery_ = other.quickRecovery_;
      sealFate_ = other.sealFate_;
      murder_ = other.murder_;
      deadlyBrew_ = other.deadlyBrew_;
      overkill_ = other.overkill_;
      deadenedNerves_ = other.deadenedNerves_;
      focusedAttacks_ = other.focusedAttacks_;
      findWeakness_ = other.findWeakness_;
      masterPoisoner_ = other.masterPoisoner_;
      mutilate_ = other.mutilate_;
      turnTheTables_ = other.turnTheTables_;
      cutToTheChase_ = other.cutToTheChase_;
      hungerForBlood_ = other.hungerForBlood_;
      improvedGouge_ = other.improvedGouge_;
      improvedSinisterStrike_ = other.improvedSinisterStrike_;
      dualWieldSpecialization_ = other.dualWieldSpecialization_;
      improvedSliceAndDice_ = other.improvedSliceAndDice_;
      deflection_ = other.deflection_;
      precision_ = other.precision_;
      endurance_ = other.endurance_;
      riposte_ = other.riposte_;
      closeQuartersCombat_ = other.closeQuartersCombat_;
      improvedKick_ = other.improvedKick_;
      improvedSprint_ = other.improvedSprint_;
      lightningReflexes_ = other.lightningReflexes_;
      aggression_ = other.aggression_;
      maceSpecialization_ = other.maceSpecialization_;
      bladeFlurry_ = other.bladeFlurry_;
      hackAndSlash_ = other.hackAndSlash_;
      weaponExpertise_ = other.weaponExpertise_;
      bladeTwisting_ = other.bladeTwisting_;
      vitality_ = other.vitality_;
      adrenalineRush_ = other.adrenalineRush_;
      nervesOfSteel_ = other.nervesOfSteel_;
      throwingSpecialization_ = other.throwingSpecialization_;
      combatPotency_ = other.combatPotency_;
      unfairAdvantage_ = other.unfairAdvantage_;
      surpriseAttacks_ = other.surpriseAttacks_;
      savageCombat_ = other.savageCombat_;
      preyOnTheWeak_ = other.preyOnTheWeak_;
      killingSpree_ = other.killingSpree_;
      relentlessStrikes_ = other.relentlessStrikes_;
      masterOfDeception_ = other.masterOfDeception_;
      opportunity_ = other.opportunity_;
      sleightOfHand_ = other.sleightOfHand_;
      dirtyTricks_ = other.dirtyTricks_;
      camouflage_ = other.camouflage_;
      elusiveness_ = other.elusiveness_;
      ghostlyStrike_ = other.ghostlyStrike_;
      serratedBlades_ = other.serratedBlades_;
      setup_ = other.setup_;
      initiative_ = other.initiative_;
      improvedAmbush_ = other.improvedAmbush_;
      heightenedSenses_ = other.heightenedSenses_;
      preparation_ = other.preparation_;
      dirtyDeeds_ = other.dirtyDeeds_;
      hemorrhage_ = other.hemorrhage_;
      masterOfSubtlety_ = other.masterOfSubtlety_;
      deadliness_ = other.deadliness_;
      envelopingShadows_ = other.envelopingShadows_;
      premeditation_ = other.premeditation_;
      cheatDeath_ = other.cheatDeath_;
      sinisterCalling_ = other.sinisterCalling_;
      waylay_ = other.waylay_;
      honorAmongThieves_ = other.honorAmongThieves_;
      shadowstep_ = other.shadowstep_;
      filthyTricks_ = other.filthyTricks_;
      slaughterFromTheShadows_ = other.slaughterFromTheShadows_;
      shadowDance_ = other.shadowDance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RogueTalents Clone() {
      return new RogueTalents(this);
    }

    /// <summary>Field number for the "improved_eviscerate" field.</summary>
    public const int ImprovedEviscerateFieldNumber = 1;
    private int improvedEviscerate_;
    /// <summary>
    /// Assassination
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedEviscerate {
      get { return improvedEviscerate_; }
      set {
        improvedEviscerate_ = value;
      }
    }

    /// <summary>Field number for the "remorseless_attacks" field.</summary>
    public const int RemorselessAttacksFieldNumber = 2;
    private int remorselessAttacks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RemorselessAttacks {
      get { return remorselessAttacks_; }
      set {
        remorselessAttacks_ = value;
      }
    }

    /// <summary>Field number for the "malice" field.</summary>
    public const int MaliceFieldNumber = 3;
    private int malice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Malice {
      get { return malice_; }
      set {
        malice_ = value;
      }
    }

    /// <summary>Field number for the "ruthlessness" field.</summary>
    public const int RuthlessnessFieldNumber = 4;
    private int ruthlessness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ruthlessness {
      get { return ruthlessness_; }
      set {
        ruthlessness_ = value;
      }
    }

    /// <summary>Field number for the "blood_spatter" field.</summary>
    public const int BloodSpatterFieldNumber = 5;
    private int bloodSpatter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BloodSpatter {
      get { return bloodSpatter_; }
      set {
        bloodSpatter_ = value;
      }
    }

    /// <summary>Field number for the "puncturing_wounds" field.</summary>
    public const int PuncturingWoundsFieldNumber = 6;
    private int puncturingWounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PuncturingWounds {
      get { return puncturingWounds_; }
      set {
        puncturingWounds_ = value;
      }
    }

    /// <summary>Field number for the "vigor" field.</summary>
    public const int VigorFieldNumber = 7;
    private bool vigor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Vigor {
      get { return vigor_; }
      set {
        vigor_ = value;
      }
    }

    /// <summary>Field number for the "improved_expose_armor" field.</summary>
    public const int ImprovedExposeArmorFieldNumber = 8;
    private int improvedExposeArmor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedExposeArmor {
      get { return improvedExposeArmor_; }
      set {
        improvedExposeArmor_ = value;
      }
    }

    /// <summary>Field number for the "lethality" field.</summary>
    public const int LethalityFieldNumber = 9;
    private int lethality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lethality {
      get { return lethality_; }
      set {
        lethality_ = value;
      }
    }

    /// <summary>Field number for the "vile_poisons" field.</summary>
    public const int VilePoisonsFieldNumber = 10;
    private int vilePoisons_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VilePoisons {
      get { return vilePoisons_; }
      set {
        vilePoisons_ = value;
      }
    }

    /// <summary>Field number for the "improved_poisons" field.</summary>
    public const int ImprovedPoisonsFieldNumber = 11;
    private int improvedPoisons_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedPoisons {
      get { return improvedPoisons_; }
      set {
        improvedPoisons_ = value;
      }
    }

    /// <summary>Field number for the "fleet_footed" field.</summary>
    public const int FleetFootedFieldNumber = 12;
    private int fleetFooted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FleetFooted {
      get { return fleetFooted_; }
      set {
        fleetFooted_ = value;
      }
    }

    /// <summary>Field number for the "cold_blood" field.</summary>
    public const int ColdBloodFieldNumber = 13;
    private bool coldBlood_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ColdBlood {
      get { return coldBlood_; }
      set {
        coldBlood_ = value;
      }
    }

    /// <summary>Field number for the "improved_kidney_shot" field.</summary>
    public const int ImprovedKidneyShotFieldNumber = 14;
    private int improvedKidneyShot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedKidneyShot {
      get { return improvedKidneyShot_; }
      set {
        improvedKidneyShot_ = value;
      }
    }

    /// <summary>Field number for the "quick_recovery" field.</summary>
    public const int QuickRecoveryFieldNumber = 15;
    private int quickRecovery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int QuickRecovery {
      get { return quickRecovery_; }
      set {
        quickRecovery_ = value;
      }
    }

    /// <summary>Field number for the "seal_fate" field.</summary>
    public const int SealFateFieldNumber = 16;
    private int sealFate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SealFate {
      get { return sealFate_; }
      set {
        sealFate_ = value;
      }
    }

    /// <summary>Field number for the "murder" field.</summary>
    public const int MurderFieldNumber = 17;
    private int murder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Murder {
      get { return murder_; }
      set {
        murder_ = value;
      }
    }

    /// <summary>Field number for the "deadly_brew" field.</summary>
    public const int DeadlyBrewFieldNumber = 18;
    private int deadlyBrew_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DeadlyBrew {
      get { return deadlyBrew_; }
      set {
        deadlyBrew_ = value;
      }
    }

    /// <summary>Field number for the "overkill" field.</summary>
    public const int OverkillFieldNumber = 19;
    private bool overkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Overkill {
      get { return overkill_; }
      set {
        overkill_ = value;
      }
    }

    /// <summary>Field number for the "deadened_nerves" field.</summary>
    public const int DeadenedNervesFieldNumber = 20;
    private int deadenedNerves_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DeadenedNerves {
      get { return deadenedNerves_; }
      set {
        deadenedNerves_ = value;
      }
    }

    /// <summary>Field number for the "focused_attacks" field.</summary>
    public const int FocusedAttacksFieldNumber = 21;
    private int focusedAttacks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FocusedAttacks {
      get { return focusedAttacks_; }
      set {
        focusedAttacks_ = value;
      }
    }

    /// <summary>Field number for the "find_weakness" field.</summary>
    public const int FindWeaknessFieldNumber = 22;
    private int findWeakness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FindWeakness {
      get { return findWeakness_; }
      set {
        findWeakness_ = value;
      }
    }

    /// <summary>Field number for the "master_poisoner" field.</summary>
    public const int MasterPoisonerFieldNumber = 23;
    private int masterPoisoner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MasterPoisoner {
      get { return masterPoisoner_; }
      set {
        masterPoisoner_ = value;
      }
    }

    /// <summary>Field number for the "mutilate" field.</summary>
    public const int MutilateFieldNumber = 24;
    private bool mutilate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Mutilate {
      get { return mutilate_; }
      set {
        mutilate_ = value;
      }
    }

    /// <summary>Field number for the "turn_the_tables" field.</summary>
    public const int TurnTheTablesFieldNumber = 25;
    private int turnTheTables_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TurnTheTables {
      get { return turnTheTables_; }
      set {
        turnTheTables_ = value;
      }
    }

    /// <summary>Field number for the "cut_to_the_chase" field.</summary>
    public const int CutToTheChaseFieldNumber = 26;
    private int cutToTheChase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CutToTheChase {
      get { return cutToTheChase_; }
      set {
        cutToTheChase_ = value;
      }
    }

    /// <summary>Field number for the "hunger_for_blood" field.</summary>
    public const int HungerForBloodFieldNumber = 27;
    private bool hungerForBlood_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HungerForBlood {
      get { return hungerForBlood_; }
      set {
        hungerForBlood_ = value;
      }
    }

    /// <summary>Field number for the "improved_gouge" field.</summary>
    public const int ImprovedGougeFieldNumber = 28;
    private int improvedGouge_;
    /// <summary>
    /// Combat
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedGouge {
      get { return improvedGouge_; }
      set {
        improvedGouge_ = value;
      }
    }

    /// <summary>Field number for the "improved_sinister_strike" field.</summary>
    public const int ImprovedSinisterStrikeFieldNumber = 29;
    private int improvedSinisterStrike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedSinisterStrike {
      get { return improvedSinisterStrike_; }
      set {
        improvedSinisterStrike_ = value;
      }
    }

    /// <summary>Field number for the "dual_wield_specialization" field.</summary>
    public const int DualWieldSpecializationFieldNumber = 30;
    private int dualWieldSpecialization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DualWieldSpecialization {
      get { return dualWieldSpecialization_; }
      set {
        dualWieldSpecialization_ = value;
      }
    }

    /// <summary>Field number for the "improved_slice_and_dice" field.</summary>
    public const int ImprovedSliceAndDiceFieldNumber = 31;
    private int improvedSliceAndDice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedSliceAndDice {
      get { return improvedSliceAndDice_; }
      set {
        improvedSliceAndDice_ = value;
      }
    }

    /// <summary>Field number for the "deflection" field.</summary>
    public const int DeflectionFieldNumber = 32;
    private int deflection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Deflection {
      get { return deflection_; }
      set {
        deflection_ = value;
      }
    }

    /// <summary>Field number for the "precision" field.</summary>
    public const int PrecisionFieldNumber = 33;
    private int precision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Precision {
      get { return precision_; }
      set {
        precision_ = value;
      }
    }

    /// <summary>Field number for the "endurance" field.</summary>
    public const int EnduranceFieldNumber = 34;
    private int endurance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Endurance {
      get { return endurance_; }
      set {
        endurance_ = value;
      }
    }

    /// <summary>Field number for the "riposte" field.</summary>
    public const int RiposteFieldNumber = 35;
    private bool riposte_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Riposte {
      get { return riposte_; }
      set {
        riposte_ = value;
      }
    }

    /// <summary>Field number for the "close_quarters_combat" field.</summary>
    public const int CloseQuartersCombatFieldNumber = 36;
    private int closeQuartersCombat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CloseQuartersCombat {
      get { return closeQuartersCombat_; }
      set {
        closeQuartersCombat_ = value;
      }
    }

    /// <summary>Field number for the "improved_kick" field.</summary>
    public const int ImprovedKickFieldNumber = 37;
    private int improvedKick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedKick {
      get { return improvedKick_; }
      set {
        improvedKick_ = value;
      }
    }

    /// <summary>Field number for the "improved_sprint" field.</summary>
    public const int ImprovedSprintFieldNumber = 38;
    private int improvedSprint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedSprint {
      get { return improvedSprint_; }
      set {
        improvedSprint_ = value;
      }
    }

    /// <summary>Field number for the "lightning_reflexes" field.</summary>
    public const int LightningReflexesFieldNumber = 39;
    private int lightningReflexes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LightningReflexes {
      get { return lightningReflexes_; }
      set {
        lightningReflexes_ = value;
      }
    }

    /// <summary>Field number for the "aggression" field.</summary>
    public const int AggressionFieldNumber = 40;
    private int aggression_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Aggression {
      get { return aggression_; }
      set {
        aggression_ = value;
      }
    }

    /// <summary>Field number for the "mace_specialization" field.</summary>
    public const int MaceSpecializationFieldNumber = 41;
    private int maceSpecialization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaceSpecialization {
      get { return maceSpecialization_; }
      set {
        maceSpecialization_ = value;
      }
    }

    /// <summary>Field number for the "blade_flurry" field.</summary>
    public const int BladeFlurryFieldNumber = 42;
    private bool bladeFlurry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BladeFlurry {
      get { return bladeFlurry_; }
      set {
        bladeFlurry_ = value;
      }
    }

    /// <summary>Field number for the "hack_and_slash" field.</summary>
    public const int HackAndSlashFieldNumber = 43;
    private int hackAndSlash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HackAndSlash {
      get { return hackAndSlash_; }
      set {
        hackAndSlash_ = value;
      }
    }

    /// <summary>Field number for the "weapon_expertise" field.</summary>
    public const int WeaponExpertiseFieldNumber = 44;
    private int weaponExpertise_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WeaponExpertise {
      get { return weaponExpertise_; }
      set {
        weaponExpertise_ = value;
      }
    }

    /// <summary>Field number for the "blade_twisting" field.</summary>
    public const int BladeTwistingFieldNumber = 45;
    private int bladeTwisting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BladeTwisting {
      get { return bladeTwisting_; }
      set {
        bladeTwisting_ = value;
      }
    }

    /// <summary>Field number for the "vitality" field.</summary>
    public const int VitalityFieldNumber = 46;
    private int vitality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Vitality {
      get { return vitality_; }
      set {
        vitality_ = value;
      }
    }

    /// <summary>Field number for the "adrenaline_rush" field.</summary>
    public const int AdrenalineRushFieldNumber = 47;
    private bool adrenalineRush_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AdrenalineRush {
      get { return adrenalineRush_; }
      set {
        adrenalineRush_ = value;
      }
    }

    /// <summary>Field number for the "nerves_of_steel" field.</summary>
    public const int NervesOfSteelFieldNumber = 48;
    private int nervesOfSteel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NervesOfSteel {
      get { return nervesOfSteel_; }
      set {
        nervesOfSteel_ = value;
      }
    }

    /// <summary>Field number for the "throwing_specialization" field.</summary>
    public const int ThrowingSpecializationFieldNumber = 49;
    private int throwingSpecialization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ThrowingSpecialization {
      get { return throwingSpecialization_; }
      set {
        throwingSpecialization_ = value;
      }
    }

    /// <summary>Field number for the "combat_potency" field.</summary>
    public const int CombatPotencyFieldNumber = 50;
    private int combatPotency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CombatPotency {
      get { return combatPotency_; }
      set {
        combatPotency_ = value;
      }
    }

    /// <summary>Field number for the "unfair_advantage" field.</summary>
    public const int UnfairAdvantageFieldNumber = 51;
    private int unfairAdvantage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnfairAdvantage {
      get { return unfairAdvantage_; }
      set {
        unfairAdvantage_ = value;
      }
    }

    /// <summary>Field number for the "surprise_attacks" field.</summary>
    public const int SurpriseAttacksFieldNumber = 52;
    private bool surpriseAttacks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SurpriseAttacks {
      get { return surpriseAttacks_; }
      set {
        surpriseAttacks_ = value;
      }
    }

    /// <summary>Field number for the "savage_combat" field.</summary>
    public const int SavageCombatFieldNumber = 53;
    private int savageCombat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SavageCombat {
      get { return savageCombat_; }
      set {
        savageCombat_ = value;
      }
    }

    /// <summary>Field number for the "prey_on_the_weak" field.</summary>
    public const int PreyOnTheWeakFieldNumber = 54;
    private int preyOnTheWeak_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PreyOnTheWeak {
      get { return preyOnTheWeak_; }
      set {
        preyOnTheWeak_ = value;
      }
    }

    /// <summary>Field number for the "killing_spree" field.</summary>
    public const int KillingSpreeFieldNumber = 55;
    private bool killingSpree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool KillingSpree {
      get { return killingSpree_; }
      set {
        killingSpree_ = value;
      }
    }

    /// <summary>Field number for the "relentless_strikes" field.</summary>
    public const int RelentlessStrikesFieldNumber = 56;
    private int relentlessStrikes_;
    /// <summary>
    /// Subtlety
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RelentlessStrikes {
      get { return relentlessStrikes_; }
      set {
        relentlessStrikes_ = value;
      }
    }

    /// <summary>Field number for the "master_of_deception" field.</summary>
    public const int MasterOfDeceptionFieldNumber = 57;
    private int masterOfDeception_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MasterOfDeception {
      get { return masterOfDeception_; }
      set {
        masterOfDeception_ = value;
      }
    }

    /// <summary>Field number for the "opportunity" field.</summary>
    public const int OpportunityFieldNumber = 58;
    private int opportunity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Opportunity {
      get { return opportunity_; }
      set {
        opportunity_ = value;
      }
    }

    /// <summary>Field number for the "sleight_of_hand" field.</summary>
    public const int SleightOfHandFieldNumber = 59;
    private int sleightOfHand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SleightOfHand {
      get { return sleightOfHand_; }
      set {
        sleightOfHand_ = value;
      }
    }

    /// <summary>Field number for the "dirty_tricks" field.</summary>
    public const int DirtyTricksFieldNumber = 60;
    private int dirtyTricks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirtyTricks {
      get { return dirtyTricks_; }
      set {
        dirtyTricks_ = value;
      }
    }

    /// <summary>Field number for the "camouflage" field.</summary>
    public const int CamouflageFieldNumber = 61;
    private int camouflage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Camouflage {
      get { return camouflage_; }
      set {
        camouflage_ = value;
      }
    }

    /// <summary>Field number for the "elusiveness" field.</summary>
    public const int ElusivenessFieldNumber = 62;
    private int elusiveness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Elusiveness {
      get { return elusiveness_; }
      set {
        elusiveness_ = value;
      }
    }

    /// <summary>Field number for the "ghostly_strike" field.</summary>
    public const int GhostlyStrikeFieldNumber = 63;
    private bool ghostlyStrike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GhostlyStrike {
      get { return ghostlyStrike_; }
      set {
        ghostlyStrike_ = value;
      }
    }

    /// <summary>Field number for the "serrated_blades" field.</summary>
    public const int SerratedBladesFieldNumber = 64;
    private int serratedBlades_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SerratedBlades {
      get { return serratedBlades_; }
      set {
        serratedBlades_ = value;
      }
    }

    /// <summary>Field number for the "setup" field.</summary>
    public const int SetupFieldNumber = 65;
    private int setup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Setup {
      get { return setup_; }
      set {
        setup_ = value;
      }
    }

    /// <summary>Field number for the "initiative" field.</summary>
    public const int InitiativeFieldNumber = 66;
    private int initiative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Initiative {
      get { return initiative_; }
      set {
        initiative_ = value;
      }
    }

    /// <summary>Field number for the "improved_ambush" field.</summary>
    public const int ImprovedAmbushFieldNumber = 67;
    private int improvedAmbush_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedAmbush {
      get { return improvedAmbush_; }
      set {
        improvedAmbush_ = value;
      }
    }

    /// <summary>Field number for the "heightened_senses" field.</summary>
    public const int HeightenedSensesFieldNumber = 68;
    private int heightenedSenses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HeightenedSenses {
      get { return heightenedSenses_; }
      set {
        heightenedSenses_ = value;
      }
    }

    /// <summary>Field number for the "preparation" field.</summary>
    public const int PreparationFieldNumber = 69;
    private bool preparation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Preparation {
      get { return preparation_; }
      set {
        preparation_ = value;
      }
    }

    /// <summary>Field number for the "dirty_deeds" field.</summary>
    public const int DirtyDeedsFieldNumber = 70;
    private int dirtyDeeds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirtyDeeds {
      get { return dirtyDeeds_; }
      set {
        dirtyDeeds_ = value;
      }
    }

    /// <summary>Field number for the "hemorrhage" field.</summary>
    public const int HemorrhageFieldNumber = 71;
    private bool hemorrhage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Hemorrhage {
      get { return hemorrhage_; }
      set {
        hemorrhage_ = value;
      }
    }

    /// <summary>Field number for the "master_of_subtlety" field.</summary>
    public const int MasterOfSubtletyFieldNumber = 72;
    private int masterOfSubtlety_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MasterOfSubtlety {
      get { return masterOfSubtlety_; }
      set {
        masterOfSubtlety_ = value;
      }
    }

    /// <summary>Field number for the "deadliness" field.</summary>
    public const int DeadlinessFieldNumber = 73;
    private int deadliness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Deadliness {
      get { return deadliness_; }
      set {
        deadliness_ = value;
      }
    }

    /// <summary>Field number for the "enveloping_shadows" field.</summary>
    public const int EnvelopingShadowsFieldNumber = 74;
    private int envelopingShadows_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EnvelopingShadows {
      get { return envelopingShadows_; }
      set {
        envelopingShadows_ = value;
      }
    }

    /// <summary>Field number for the "premeditation" field.</summary>
    public const int PremeditationFieldNumber = 75;
    private bool premeditation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Premeditation {
      get { return premeditation_; }
      set {
        premeditation_ = value;
      }
    }

    /// <summary>Field number for the "cheat_death" field.</summary>
    public const int CheatDeathFieldNumber = 76;
    private int cheatDeath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CheatDeath {
      get { return cheatDeath_; }
      set {
        cheatDeath_ = value;
      }
    }

    /// <summary>Field number for the "sinister_calling" field.</summary>
    public const int SinisterCallingFieldNumber = 77;
    private int sinisterCalling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SinisterCalling {
      get { return sinisterCalling_; }
      set {
        sinisterCalling_ = value;
      }
    }

    /// <summary>Field number for the "waylay" field.</summary>
    public const int WaylayFieldNumber = 78;
    private int waylay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Waylay {
      get { return waylay_; }
      set {
        waylay_ = value;
      }
    }

    /// <summary>Field number for the "honor_among_thieves" field.</summary>
    public const int HonorAmongThievesFieldNumber = 79;
    private int honorAmongThieves_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HonorAmongThieves {
      get { return honorAmongThieves_; }
      set {
        honorAmongThieves_ = value;
      }
    }

    /// <summary>Field number for the "shadowstep" field.</summary>
    public const int ShadowstepFieldNumber = 80;
    private bool shadowstep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Shadowstep {
      get { return shadowstep_; }
      set {
        shadowstep_ = value;
      }
    }

    /// <summary>Field number for the "filthy_tricks" field.</summary>
    public const int FilthyTricksFieldNumber = 81;
    private int filthyTricks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FilthyTricks {
      get { return filthyTricks_; }
      set {
        filthyTricks_ = value;
      }
    }

    /// <summary>Field number for the "slaughter_from_the_shadows" field.</summary>
    public const int SlaughterFromTheShadowsFieldNumber = 82;
    private int slaughterFromTheShadows_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SlaughterFromTheShadows {
      get { return slaughterFromTheShadows_; }
      set {
        slaughterFromTheShadows_ = value;
      }
    }

    /// <summary>Field number for the "shadow_dance" field.</summary>
    public const int ShadowDanceFieldNumber = 83;
    private bool shadowDance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShadowDance {
      get { return shadowDance_; }
      set {
        shadowDance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RogueTalents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RogueTalents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImprovedEviscerate != other.ImprovedEviscerate) return false;
      if (RemorselessAttacks != other.RemorselessAttacks) return false;
      if (Malice != other.Malice) return false;
      if (Ruthlessness != other.Ruthlessness) return false;
      if (BloodSpatter != other.BloodSpatter) return false;
      if (PuncturingWounds != other.PuncturingWounds) return false;
      if (Vigor != other.Vigor) return false;
      if (ImprovedExposeArmor != other.ImprovedExposeArmor) return false;
      if (Lethality != other.Lethality) return false;
      if (VilePoisons != other.VilePoisons) return false;
      if (ImprovedPoisons != other.ImprovedPoisons) return false;
      if (FleetFooted != other.FleetFooted) return false;
      if (ColdBlood != other.ColdBlood) return false;
      if (ImprovedKidneyShot != other.ImprovedKidneyShot) return false;
      if (QuickRecovery != other.QuickRecovery) return false;
      if (SealFate != other.SealFate) return false;
      if (Murder != other.Murder) return false;
      if (DeadlyBrew != other.DeadlyBrew) return false;
      if (Overkill != other.Overkill) return false;
      if (DeadenedNerves != other.DeadenedNerves) return false;
      if (FocusedAttacks != other.FocusedAttacks) return false;
      if (FindWeakness != other.FindWeakness) return false;
      if (MasterPoisoner != other.MasterPoisoner) return false;
      if (Mutilate != other.Mutilate) return false;
      if (TurnTheTables != other.TurnTheTables) return false;
      if (CutToTheChase != other.CutToTheChase) return false;
      if (HungerForBlood != other.HungerForBlood) return false;
      if (ImprovedGouge != other.ImprovedGouge) return false;
      if (ImprovedSinisterStrike != other.ImprovedSinisterStrike) return false;
      if (DualWieldSpecialization != other.DualWieldSpecialization) return false;
      if (ImprovedSliceAndDice != other.ImprovedSliceAndDice) return false;
      if (Deflection != other.Deflection) return false;
      if (Precision != other.Precision) return false;
      if (Endurance != other.Endurance) return false;
      if (Riposte != other.Riposte) return false;
      if (CloseQuartersCombat != other.CloseQuartersCombat) return false;
      if (ImprovedKick != other.ImprovedKick) return false;
      if (ImprovedSprint != other.ImprovedSprint) return false;
      if (LightningReflexes != other.LightningReflexes) return false;
      if (Aggression != other.Aggression) return false;
      if (MaceSpecialization != other.MaceSpecialization) return false;
      if (BladeFlurry != other.BladeFlurry) return false;
      if (HackAndSlash != other.HackAndSlash) return false;
      if (WeaponExpertise != other.WeaponExpertise) return false;
      if (BladeTwisting != other.BladeTwisting) return false;
      if (Vitality != other.Vitality) return false;
      if (AdrenalineRush != other.AdrenalineRush) return false;
      if (NervesOfSteel != other.NervesOfSteel) return false;
      if (ThrowingSpecialization != other.ThrowingSpecialization) return false;
      if (CombatPotency != other.CombatPotency) return false;
      if (UnfairAdvantage != other.UnfairAdvantage) return false;
      if (SurpriseAttacks != other.SurpriseAttacks) return false;
      if (SavageCombat != other.SavageCombat) return false;
      if (PreyOnTheWeak != other.PreyOnTheWeak) return false;
      if (KillingSpree != other.KillingSpree) return false;
      if (RelentlessStrikes != other.RelentlessStrikes) return false;
      if (MasterOfDeception != other.MasterOfDeception) return false;
      if (Opportunity != other.Opportunity) return false;
      if (SleightOfHand != other.SleightOfHand) return false;
      if (DirtyTricks != other.DirtyTricks) return false;
      if (Camouflage != other.Camouflage) return false;
      if (Elusiveness != other.Elusiveness) return false;
      if (GhostlyStrike != other.GhostlyStrike) return false;
      if (SerratedBlades != other.SerratedBlades) return false;
      if (Setup != other.Setup) return false;
      if (Initiative != other.Initiative) return false;
      if (ImprovedAmbush != other.ImprovedAmbush) return false;
      if (HeightenedSenses != other.HeightenedSenses) return false;
      if (Preparation != other.Preparation) return false;
      if (DirtyDeeds != other.DirtyDeeds) return false;
      if (Hemorrhage != other.Hemorrhage) return false;
      if (MasterOfSubtlety != other.MasterOfSubtlety) return false;
      if (Deadliness != other.Deadliness) return false;
      if (EnvelopingShadows != other.EnvelopingShadows) return false;
      if (Premeditation != other.Premeditation) return false;
      if (CheatDeath != other.CheatDeath) return false;
      if (SinisterCalling != other.SinisterCalling) return false;
      if (Waylay != other.Waylay) return false;
      if (HonorAmongThieves != other.HonorAmongThieves) return false;
      if (Shadowstep != other.Shadowstep) return false;
      if (FilthyTricks != other.FilthyTricks) return false;
      if (SlaughterFromTheShadows != other.SlaughterFromTheShadows) return false;
      if (ShadowDance != other.ShadowDance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ImprovedEviscerate != 0) hash ^= ImprovedEviscerate.GetHashCode();
      if (RemorselessAttacks != 0) hash ^= RemorselessAttacks.GetHashCode();
      if (Malice != 0) hash ^= Malice.GetHashCode();
      if (Ruthlessness != 0) hash ^= Ruthlessness.GetHashCode();
      if (BloodSpatter != 0) hash ^= BloodSpatter.GetHashCode();
      if (PuncturingWounds != 0) hash ^= PuncturingWounds.GetHashCode();
      if (Vigor != false) hash ^= Vigor.GetHashCode();
      if (ImprovedExposeArmor != 0) hash ^= ImprovedExposeArmor.GetHashCode();
      if (Lethality != 0) hash ^= Lethality.GetHashCode();
      if (VilePoisons != 0) hash ^= VilePoisons.GetHashCode();
      if (ImprovedPoisons != 0) hash ^= ImprovedPoisons.GetHashCode();
      if (FleetFooted != 0) hash ^= FleetFooted.GetHashCode();
      if (ColdBlood != false) hash ^= ColdBlood.GetHashCode();
      if (ImprovedKidneyShot != 0) hash ^= ImprovedKidneyShot.GetHashCode();
      if (QuickRecovery != 0) hash ^= QuickRecovery.GetHashCode();
      if (SealFate != 0) hash ^= SealFate.GetHashCode();
      if (Murder != 0) hash ^= Murder.GetHashCode();
      if (DeadlyBrew != 0) hash ^= DeadlyBrew.GetHashCode();
      if (Overkill != false) hash ^= Overkill.GetHashCode();
      if (DeadenedNerves != 0) hash ^= DeadenedNerves.GetHashCode();
      if (FocusedAttacks != 0) hash ^= FocusedAttacks.GetHashCode();
      if (FindWeakness != 0) hash ^= FindWeakness.GetHashCode();
      if (MasterPoisoner != 0) hash ^= MasterPoisoner.GetHashCode();
      if (Mutilate != false) hash ^= Mutilate.GetHashCode();
      if (TurnTheTables != 0) hash ^= TurnTheTables.GetHashCode();
      if (CutToTheChase != 0) hash ^= CutToTheChase.GetHashCode();
      if (HungerForBlood != false) hash ^= HungerForBlood.GetHashCode();
      if (ImprovedGouge != 0) hash ^= ImprovedGouge.GetHashCode();
      if (ImprovedSinisterStrike != 0) hash ^= ImprovedSinisterStrike.GetHashCode();
      if (DualWieldSpecialization != 0) hash ^= DualWieldSpecialization.GetHashCode();
      if (ImprovedSliceAndDice != 0) hash ^= ImprovedSliceAndDice.GetHashCode();
      if (Deflection != 0) hash ^= Deflection.GetHashCode();
      if (Precision != 0) hash ^= Precision.GetHashCode();
      if (Endurance != 0) hash ^= Endurance.GetHashCode();
      if (Riposte != false) hash ^= Riposte.GetHashCode();
      if (CloseQuartersCombat != 0) hash ^= CloseQuartersCombat.GetHashCode();
      if (ImprovedKick != 0) hash ^= ImprovedKick.GetHashCode();
      if (ImprovedSprint != 0) hash ^= ImprovedSprint.GetHashCode();
      if (LightningReflexes != 0) hash ^= LightningReflexes.GetHashCode();
      if (Aggression != 0) hash ^= Aggression.GetHashCode();
      if (MaceSpecialization != 0) hash ^= MaceSpecialization.GetHashCode();
      if (BladeFlurry != false) hash ^= BladeFlurry.GetHashCode();
      if (HackAndSlash != 0) hash ^= HackAndSlash.GetHashCode();
      if (WeaponExpertise != 0) hash ^= WeaponExpertise.GetHashCode();
      if (BladeTwisting != 0) hash ^= BladeTwisting.GetHashCode();
      if (Vitality != 0) hash ^= Vitality.GetHashCode();
      if (AdrenalineRush != false) hash ^= AdrenalineRush.GetHashCode();
      if (NervesOfSteel != 0) hash ^= NervesOfSteel.GetHashCode();
      if (ThrowingSpecialization != 0) hash ^= ThrowingSpecialization.GetHashCode();
      if (CombatPotency != 0) hash ^= CombatPotency.GetHashCode();
      if (UnfairAdvantage != 0) hash ^= UnfairAdvantage.GetHashCode();
      if (SurpriseAttacks != false) hash ^= SurpriseAttacks.GetHashCode();
      if (SavageCombat != 0) hash ^= SavageCombat.GetHashCode();
      if (PreyOnTheWeak != 0) hash ^= PreyOnTheWeak.GetHashCode();
      if (KillingSpree != false) hash ^= KillingSpree.GetHashCode();
      if (RelentlessStrikes != 0) hash ^= RelentlessStrikes.GetHashCode();
      if (MasterOfDeception != 0) hash ^= MasterOfDeception.GetHashCode();
      if (Opportunity != 0) hash ^= Opportunity.GetHashCode();
      if (SleightOfHand != 0) hash ^= SleightOfHand.GetHashCode();
      if (DirtyTricks != 0) hash ^= DirtyTricks.GetHashCode();
      if (Camouflage != 0) hash ^= Camouflage.GetHashCode();
      if (Elusiveness != 0) hash ^= Elusiveness.GetHashCode();
      if (GhostlyStrike != false) hash ^= GhostlyStrike.GetHashCode();
      if (SerratedBlades != 0) hash ^= SerratedBlades.GetHashCode();
      if (Setup != 0) hash ^= Setup.GetHashCode();
      if (Initiative != 0) hash ^= Initiative.GetHashCode();
      if (ImprovedAmbush != 0) hash ^= ImprovedAmbush.GetHashCode();
      if (HeightenedSenses != 0) hash ^= HeightenedSenses.GetHashCode();
      if (Preparation != false) hash ^= Preparation.GetHashCode();
      if (DirtyDeeds != 0) hash ^= DirtyDeeds.GetHashCode();
      if (Hemorrhage != false) hash ^= Hemorrhage.GetHashCode();
      if (MasterOfSubtlety != 0) hash ^= MasterOfSubtlety.GetHashCode();
      if (Deadliness != 0) hash ^= Deadliness.GetHashCode();
      if (EnvelopingShadows != 0) hash ^= EnvelopingShadows.GetHashCode();
      if (Premeditation != false) hash ^= Premeditation.GetHashCode();
      if (CheatDeath != 0) hash ^= CheatDeath.GetHashCode();
      if (SinisterCalling != 0) hash ^= SinisterCalling.GetHashCode();
      if (Waylay != 0) hash ^= Waylay.GetHashCode();
      if (HonorAmongThieves != 0) hash ^= HonorAmongThieves.GetHashCode();
      if (Shadowstep != false) hash ^= Shadowstep.GetHashCode();
      if (FilthyTricks != 0) hash ^= FilthyTricks.GetHashCode();
      if (SlaughterFromTheShadows != 0) hash ^= SlaughterFromTheShadows.GetHashCode();
      if (ShadowDance != false) hash ^= ShadowDance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ImprovedEviscerate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ImprovedEviscerate);
      }
      if (RemorselessAttacks != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemorselessAttacks);
      }
      if (Malice != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Malice);
      }
      if (Ruthlessness != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ruthlessness);
      }
      if (BloodSpatter != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BloodSpatter);
      }
      if (PuncturingWounds != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PuncturingWounds);
      }
      if (Vigor != false) {
        output.WriteRawTag(56);
        output.WriteBool(Vigor);
      }
      if (ImprovedExposeArmor != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ImprovedExposeArmor);
      }
      if (Lethality != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Lethality);
      }
      if (VilePoisons != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(VilePoisons);
      }
      if (ImprovedPoisons != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ImprovedPoisons);
      }
      if (FleetFooted != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(FleetFooted);
      }
      if (ColdBlood != false) {
        output.WriteRawTag(104);
        output.WriteBool(ColdBlood);
      }
      if (ImprovedKidneyShot != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ImprovedKidneyShot);
      }
      if (QuickRecovery != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(QuickRecovery);
      }
      if (SealFate != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(SealFate);
      }
      if (Murder != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Murder);
      }
      if (DeadlyBrew != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(DeadlyBrew);
      }
      if (Overkill != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(Overkill);
      }
      if (DeadenedNerves != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(DeadenedNerves);
      }
      if (FocusedAttacks != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(FocusedAttacks);
      }
      if (FindWeakness != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(FindWeakness);
      }
      if (MasterPoisoner != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(MasterPoisoner);
      }
      if (Mutilate != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(Mutilate);
      }
      if (TurnTheTables != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(TurnTheTables);
      }
      if (CutToTheChase != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(CutToTheChase);
      }
      if (HungerForBlood != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(HungerForBlood);
      }
      if (ImprovedGouge != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(ImprovedGouge);
      }
      if (ImprovedSinisterStrike != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(ImprovedSinisterStrike);
      }
      if (DualWieldSpecialization != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(DualWieldSpecialization);
      }
      if (ImprovedSliceAndDice != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(ImprovedSliceAndDice);
      }
      if (Deflection != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(Deflection);
      }
      if (Precision != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(Precision);
      }
      if (Endurance != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Endurance);
      }
      if (Riposte != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(Riposte);
      }
      if (CloseQuartersCombat != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(CloseQuartersCombat);
      }
      if (ImprovedKick != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(ImprovedKick);
      }
      if (ImprovedSprint != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(ImprovedSprint);
      }
      if (LightningReflexes != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(LightningReflexes);
      }
      if (Aggression != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(Aggression);
      }
      if (MaceSpecialization != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(MaceSpecialization);
      }
      if (BladeFlurry != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(BladeFlurry);
      }
      if (HackAndSlash != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(HackAndSlash);
      }
      if (WeaponExpertise != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(WeaponExpertise);
      }
      if (BladeTwisting != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(BladeTwisting);
      }
      if (Vitality != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(Vitality);
      }
      if (AdrenalineRush != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(AdrenalineRush);
      }
      if (NervesOfSteel != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(NervesOfSteel);
      }
      if (ThrowingSpecialization != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(ThrowingSpecialization);
      }
      if (CombatPotency != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(CombatPotency);
      }
      if (UnfairAdvantage != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(UnfairAdvantage);
      }
      if (SurpriseAttacks != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(SurpriseAttacks);
      }
      if (SavageCombat != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(SavageCombat);
      }
      if (PreyOnTheWeak != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(PreyOnTheWeak);
      }
      if (KillingSpree != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(KillingSpree);
      }
      if (RelentlessStrikes != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(RelentlessStrikes);
      }
      if (MasterOfDeception != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(MasterOfDeception);
      }
      if (Opportunity != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(Opportunity);
      }
      if (SleightOfHand != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(SleightOfHand);
      }
      if (DirtyTricks != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(DirtyTricks);
      }
      if (Camouflage != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(Camouflage);
      }
      if (Elusiveness != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(Elusiveness);
      }
      if (GhostlyStrike != false) {
        output.WriteRawTag(248, 3);
        output.WriteBool(GhostlyStrike);
      }
      if (SerratedBlades != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(SerratedBlades);
      }
      if (Setup != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(Setup);
      }
      if (Initiative != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(Initiative);
      }
      if (ImprovedAmbush != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(ImprovedAmbush);
      }
      if (HeightenedSenses != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(HeightenedSenses);
      }
      if (Preparation != false) {
        output.WriteRawTag(168, 4);
        output.WriteBool(Preparation);
      }
      if (DirtyDeeds != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(DirtyDeeds);
      }
      if (Hemorrhage != false) {
        output.WriteRawTag(184, 4);
        output.WriteBool(Hemorrhage);
      }
      if (MasterOfSubtlety != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(MasterOfSubtlety);
      }
      if (Deadliness != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(Deadliness);
      }
      if (EnvelopingShadows != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(EnvelopingShadows);
      }
      if (Premeditation != false) {
        output.WriteRawTag(216, 4);
        output.WriteBool(Premeditation);
      }
      if (CheatDeath != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(CheatDeath);
      }
      if (SinisterCalling != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(SinisterCalling);
      }
      if (Waylay != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(Waylay);
      }
      if (HonorAmongThieves != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(HonorAmongThieves);
      }
      if (Shadowstep != false) {
        output.WriteRawTag(128, 5);
        output.WriteBool(Shadowstep);
      }
      if (FilthyTricks != 0) {
        output.WriteRawTag(136, 5);
        output.WriteInt32(FilthyTricks);
      }
      if (SlaughterFromTheShadows != 0) {
        output.WriteRawTag(144, 5);
        output.WriteInt32(SlaughterFromTheShadows);
      }
      if (ShadowDance != false) {
        output.WriteRawTag(152, 5);
        output.WriteBool(ShadowDance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ImprovedEviscerate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ImprovedEviscerate);
      }
      if (RemorselessAttacks != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemorselessAttacks);
      }
      if (Malice != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Malice);
      }
      if (Ruthlessness != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ruthlessness);
      }
      if (BloodSpatter != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BloodSpatter);
      }
      if (PuncturingWounds != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PuncturingWounds);
      }
      if (Vigor != false) {
        output.WriteRawTag(56);
        output.WriteBool(Vigor);
      }
      if (ImprovedExposeArmor != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ImprovedExposeArmor);
      }
      if (Lethality != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Lethality);
      }
      if (VilePoisons != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(VilePoisons);
      }
      if (ImprovedPoisons != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ImprovedPoisons);
      }
      if (FleetFooted != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(FleetFooted);
      }
      if (ColdBlood != false) {
        output.WriteRawTag(104);
        output.WriteBool(ColdBlood);
      }
      if (ImprovedKidneyShot != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ImprovedKidneyShot);
      }
      if (QuickRecovery != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(QuickRecovery);
      }
      if (SealFate != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(SealFate);
      }
      if (Murder != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Murder);
      }
      if (DeadlyBrew != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(DeadlyBrew);
      }
      if (Overkill != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(Overkill);
      }
      if (DeadenedNerves != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(DeadenedNerves);
      }
      if (FocusedAttacks != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(FocusedAttacks);
      }
      if (FindWeakness != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(FindWeakness);
      }
      if (MasterPoisoner != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(MasterPoisoner);
      }
      if (Mutilate != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(Mutilate);
      }
      if (TurnTheTables != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(TurnTheTables);
      }
      if (CutToTheChase != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(CutToTheChase);
      }
      if (HungerForBlood != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(HungerForBlood);
      }
      if (ImprovedGouge != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(ImprovedGouge);
      }
      if (ImprovedSinisterStrike != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(ImprovedSinisterStrike);
      }
      if (DualWieldSpecialization != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(DualWieldSpecialization);
      }
      if (ImprovedSliceAndDice != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(ImprovedSliceAndDice);
      }
      if (Deflection != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(Deflection);
      }
      if (Precision != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(Precision);
      }
      if (Endurance != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Endurance);
      }
      if (Riposte != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(Riposte);
      }
      if (CloseQuartersCombat != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(CloseQuartersCombat);
      }
      if (ImprovedKick != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(ImprovedKick);
      }
      if (ImprovedSprint != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(ImprovedSprint);
      }
      if (LightningReflexes != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(LightningReflexes);
      }
      if (Aggression != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(Aggression);
      }
      if (MaceSpecialization != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(MaceSpecialization);
      }
      if (BladeFlurry != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(BladeFlurry);
      }
      if (HackAndSlash != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(HackAndSlash);
      }
      if (WeaponExpertise != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(WeaponExpertise);
      }
      if (BladeTwisting != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(BladeTwisting);
      }
      if (Vitality != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(Vitality);
      }
      if (AdrenalineRush != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(AdrenalineRush);
      }
      if (NervesOfSteel != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(NervesOfSteel);
      }
      if (ThrowingSpecialization != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(ThrowingSpecialization);
      }
      if (CombatPotency != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(CombatPotency);
      }
      if (UnfairAdvantage != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(UnfairAdvantage);
      }
      if (SurpriseAttacks != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(SurpriseAttacks);
      }
      if (SavageCombat != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(SavageCombat);
      }
      if (PreyOnTheWeak != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(PreyOnTheWeak);
      }
      if (KillingSpree != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(KillingSpree);
      }
      if (RelentlessStrikes != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(RelentlessStrikes);
      }
      if (MasterOfDeception != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(MasterOfDeception);
      }
      if (Opportunity != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(Opportunity);
      }
      if (SleightOfHand != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(SleightOfHand);
      }
      if (DirtyTricks != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(DirtyTricks);
      }
      if (Camouflage != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(Camouflage);
      }
      if (Elusiveness != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(Elusiveness);
      }
      if (GhostlyStrike != false) {
        output.WriteRawTag(248, 3);
        output.WriteBool(GhostlyStrike);
      }
      if (SerratedBlades != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(SerratedBlades);
      }
      if (Setup != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(Setup);
      }
      if (Initiative != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(Initiative);
      }
      if (ImprovedAmbush != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(ImprovedAmbush);
      }
      if (HeightenedSenses != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(HeightenedSenses);
      }
      if (Preparation != false) {
        output.WriteRawTag(168, 4);
        output.WriteBool(Preparation);
      }
      if (DirtyDeeds != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(DirtyDeeds);
      }
      if (Hemorrhage != false) {
        output.WriteRawTag(184, 4);
        output.WriteBool(Hemorrhage);
      }
      if (MasterOfSubtlety != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(MasterOfSubtlety);
      }
      if (Deadliness != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(Deadliness);
      }
      if (EnvelopingShadows != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(EnvelopingShadows);
      }
      if (Premeditation != false) {
        output.WriteRawTag(216, 4);
        output.WriteBool(Premeditation);
      }
      if (CheatDeath != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(CheatDeath);
      }
      if (SinisterCalling != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(SinisterCalling);
      }
      if (Waylay != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(Waylay);
      }
      if (HonorAmongThieves != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(HonorAmongThieves);
      }
      if (Shadowstep != false) {
        output.WriteRawTag(128, 5);
        output.WriteBool(Shadowstep);
      }
      if (FilthyTricks != 0) {
        output.WriteRawTag(136, 5);
        output.WriteInt32(FilthyTricks);
      }
      if (SlaughterFromTheShadows != 0) {
        output.WriteRawTag(144, 5);
        output.WriteInt32(SlaughterFromTheShadows);
      }
      if (ShadowDance != false) {
        output.WriteRawTag(152, 5);
        output.WriteBool(ShadowDance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ImprovedEviscerate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedEviscerate);
      }
      if (RemorselessAttacks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemorselessAttacks);
      }
      if (Malice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Malice);
      }
      if (Ruthlessness != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ruthlessness);
      }
      if (BloodSpatter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BloodSpatter);
      }
      if (PuncturingWounds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PuncturingWounds);
      }
      if (Vigor != false) {
        size += 1 + 1;
      }
      if (ImprovedExposeArmor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedExposeArmor);
      }
      if (Lethality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lethality);
      }
      if (VilePoisons != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VilePoisons);
      }
      if (ImprovedPoisons != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedPoisons);
      }
      if (FleetFooted != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FleetFooted);
      }
      if (ColdBlood != false) {
        size += 1 + 1;
      }
      if (ImprovedKidneyShot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedKidneyShot);
      }
      if (QuickRecovery != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuickRecovery);
      }
      if (SealFate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SealFate);
      }
      if (Murder != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Murder);
      }
      if (DeadlyBrew != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeadlyBrew);
      }
      if (Overkill != false) {
        size += 2 + 1;
      }
      if (DeadenedNerves != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeadenedNerves);
      }
      if (FocusedAttacks != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FocusedAttacks);
      }
      if (FindWeakness != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FindWeakness);
      }
      if (MasterPoisoner != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MasterPoisoner);
      }
      if (Mutilate != false) {
        size += 2 + 1;
      }
      if (TurnTheTables != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TurnTheTables);
      }
      if (CutToTheChase != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CutToTheChase);
      }
      if (HungerForBlood != false) {
        size += 2 + 1;
      }
      if (ImprovedGouge != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedGouge);
      }
      if (ImprovedSinisterStrike != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedSinisterStrike);
      }
      if (DualWieldSpecialization != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DualWieldSpecialization);
      }
      if (ImprovedSliceAndDice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedSliceAndDice);
      }
      if (Deflection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Deflection);
      }
      if (Precision != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Precision);
      }
      if (Endurance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Endurance);
      }
      if (Riposte != false) {
        size += 2 + 1;
      }
      if (CloseQuartersCombat != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CloseQuartersCombat);
      }
      if (ImprovedKick != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedKick);
      }
      if (ImprovedSprint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedSprint);
      }
      if (LightningReflexes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LightningReflexes);
      }
      if (Aggression != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Aggression);
      }
      if (MaceSpecialization != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaceSpecialization);
      }
      if (BladeFlurry != false) {
        size += 2 + 1;
      }
      if (HackAndSlash != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HackAndSlash);
      }
      if (WeaponExpertise != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WeaponExpertise);
      }
      if (BladeTwisting != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BladeTwisting);
      }
      if (Vitality != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Vitality);
      }
      if (AdrenalineRush != false) {
        size += 2 + 1;
      }
      if (NervesOfSteel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NervesOfSteel);
      }
      if (ThrowingSpecialization != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ThrowingSpecialization);
      }
      if (CombatPotency != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CombatPotency);
      }
      if (UnfairAdvantage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnfairAdvantage);
      }
      if (SurpriseAttacks != false) {
        size += 2 + 1;
      }
      if (SavageCombat != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SavageCombat);
      }
      if (PreyOnTheWeak != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PreyOnTheWeak);
      }
      if (KillingSpree != false) {
        size += 2 + 1;
      }
      if (RelentlessStrikes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RelentlessStrikes);
      }
      if (MasterOfDeception != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MasterOfDeception);
      }
      if (Opportunity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Opportunity);
      }
      if (SleightOfHand != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SleightOfHand);
      }
      if (DirtyTricks != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirtyTricks);
      }
      if (Camouflage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Camouflage);
      }
      if (Elusiveness != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Elusiveness);
      }
      if (GhostlyStrike != false) {
        size += 2 + 1;
      }
      if (SerratedBlades != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SerratedBlades);
      }
      if (Setup != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Setup);
      }
      if (Initiative != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Initiative);
      }
      if (ImprovedAmbush != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedAmbush);
      }
      if (HeightenedSenses != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HeightenedSenses);
      }
      if (Preparation != false) {
        size += 2 + 1;
      }
      if (DirtyDeeds != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirtyDeeds);
      }
      if (Hemorrhage != false) {
        size += 2 + 1;
      }
      if (MasterOfSubtlety != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MasterOfSubtlety);
      }
      if (Deadliness != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Deadliness);
      }
      if (EnvelopingShadows != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EnvelopingShadows);
      }
      if (Premeditation != false) {
        size += 2 + 1;
      }
      if (CheatDeath != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CheatDeath);
      }
      if (SinisterCalling != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SinisterCalling);
      }
      if (Waylay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Waylay);
      }
      if (HonorAmongThieves != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HonorAmongThieves);
      }
      if (Shadowstep != false) {
        size += 2 + 1;
      }
      if (FilthyTricks != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FilthyTricks);
      }
      if (SlaughterFromTheShadows != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SlaughterFromTheShadows);
      }
      if (ShadowDance != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RogueTalents other) {
      if (other == null) {
        return;
      }
      if (other.ImprovedEviscerate != 0) {
        ImprovedEviscerate = other.ImprovedEviscerate;
      }
      if (other.RemorselessAttacks != 0) {
        RemorselessAttacks = other.RemorselessAttacks;
      }
      if (other.Malice != 0) {
        Malice = other.Malice;
      }
      if (other.Ruthlessness != 0) {
        Ruthlessness = other.Ruthlessness;
      }
      if (other.BloodSpatter != 0) {
        BloodSpatter = other.BloodSpatter;
      }
      if (other.PuncturingWounds != 0) {
        PuncturingWounds = other.PuncturingWounds;
      }
      if (other.Vigor != false) {
        Vigor = other.Vigor;
      }
      if (other.ImprovedExposeArmor != 0) {
        ImprovedExposeArmor = other.ImprovedExposeArmor;
      }
      if (other.Lethality != 0) {
        Lethality = other.Lethality;
      }
      if (other.VilePoisons != 0) {
        VilePoisons = other.VilePoisons;
      }
      if (other.ImprovedPoisons != 0) {
        ImprovedPoisons = other.ImprovedPoisons;
      }
      if (other.FleetFooted != 0) {
        FleetFooted = other.FleetFooted;
      }
      if (other.ColdBlood != false) {
        ColdBlood = other.ColdBlood;
      }
      if (other.ImprovedKidneyShot != 0) {
        ImprovedKidneyShot = other.ImprovedKidneyShot;
      }
      if (other.QuickRecovery != 0) {
        QuickRecovery = other.QuickRecovery;
      }
      if (other.SealFate != 0) {
        SealFate = other.SealFate;
      }
      if (other.Murder != 0) {
        Murder = other.Murder;
      }
      if (other.DeadlyBrew != 0) {
        DeadlyBrew = other.DeadlyBrew;
      }
      if (other.Overkill != false) {
        Overkill = other.Overkill;
      }
      if (other.DeadenedNerves != 0) {
        DeadenedNerves = other.DeadenedNerves;
      }
      if (other.FocusedAttacks != 0) {
        FocusedAttacks = other.FocusedAttacks;
      }
      if (other.FindWeakness != 0) {
        FindWeakness = other.FindWeakness;
      }
      if (other.MasterPoisoner != 0) {
        MasterPoisoner = other.MasterPoisoner;
      }
      if (other.Mutilate != false) {
        Mutilate = other.Mutilate;
      }
      if (other.TurnTheTables != 0) {
        TurnTheTables = other.TurnTheTables;
      }
      if (other.CutToTheChase != 0) {
        CutToTheChase = other.CutToTheChase;
      }
      if (other.HungerForBlood != false) {
        HungerForBlood = other.HungerForBlood;
      }
      if (other.ImprovedGouge != 0) {
        ImprovedGouge = other.ImprovedGouge;
      }
      if (other.ImprovedSinisterStrike != 0) {
        ImprovedSinisterStrike = other.ImprovedSinisterStrike;
      }
      if (other.DualWieldSpecialization != 0) {
        DualWieldSpecialization = other.DualWieldSpecialization;
      }
      if (other.ImprovedSliceAndDice != 0) {
        ImprovedSliceAndDice = other.ImprovedSliceAndDice;
      }
      if (other.Deflection != 0) {
        Deflection = other.Deflection;
      }
      if (other.Precision != 0) {
        Precision = other.Precision;
      }
      if (other.Endurance != 0) {
        Endurance = other.Endurance;
      }
      if (other.Riposte != false) {
        Riposte = other.Riposte;
      }
      if (other.CloseQuartersCombat != 0) {
        CloseQuartersCombat = other.CloseQuartersCombat;
      }
      if (other.ImprovedKick != 0) {
        ImprovedKick = other.ImprovedKick;
      }
      if (other.ImprovedSprint != 0) {
        ImprovedSprint = other.ImprovedSprint;
      }
      if (other.LightningReflexes != 0) {
        LightningReflexes = other.LightningReflexes;
      }
      if (other.Aggression != 0) {
        Aggression = other.Aggression;
      }
      if (other.MaceSpecialization != 0) {
        MaceSpecialization = other.MaceSpecialization;
      }
      if (other.BladeFlurry != false) {
        BladeFlurry = other.BladeFlurry;
      }
      if (other.HackAndSlash != 0) {
        HackAndSlash = other.HackAndSlash;
      }
      if (other.WeaponExpertise != 0) {
        WeaponExpertise = other.WeaponExpertise;
      }
      if (other.BladeTwisting != 0) {
        BladeTwisting = other.BladeTwisting;
      }
      if (other.Vitality != 0) {
        Vitality = other.Vitality;
      }
      if (other.AdrenalineRush != false) {
        AdrenalineRush = other.AdrenalineRush;
      }
      if (other.NervesOfSteel != 0) {
        NervesOfSteel = other.NervesOfSteel;
      }
      if (other.ThrowingSpecialization != 0) {
        ThrowingSpecialization = other.ThrowingSpecialization;
      }
      if (other.CombatPotency != 0) {
        CombatPotency = other.CombatPotency;
      }
      if (other.UnfairAdvantage != 0) {
        UnfairAdvantage = other.UnfairAdvantage;
      }
      if (other.SurpriseAttacks != false) {
        SurpriseAttacks = other.SurpriseAttacks;
      }
      if (other.SavageCombat != 0) {
        SavageCombat = other.SavageCombat;
      }
      if (other.PreyOnTheWeak != 0) {
        PreyOnTheWeak = other.PreyOnTheWeak;
      }
      if (other.KillingSpree != false) {
        KillingSpree = other.KillingSpree;
      }
      if (other.RelentlessStrikes != 0) {
        RelentlessStrikes = other.RelentlessStrikes;
      }
      if (other.MasterOfDeception != 0) {
        MasterOfDeception = other.MasterOfDeception;
      }
      if (other.Opportunity != 0) {
        Opportunity = other.Opportunity;
      }
      if (other.SleightOfHand != 0) {
        SleightOfHand = other.SleightOfHand;
      }
      if (other.DirtyTricks != 0) {
        DirtyTricks = other.DirtyTricks;
      }
      if (other.Camouflage != 0) {
        Camouflage = other.Camouflage;
      }
      if (other.Elusiveness != 0) {
        Elusiveness = other.Elusiveness;
      }
      if (other.GhostlyStrike != false) {
        GhostlyStrike = other.GhostlyStrike;
      }
      if (other.SerratedBlades != 0) {
        SerratedBlades = other.SerratedBlades;
      }
      if (other.Setup != 0) {
        Setup = other.Setup;
      }
      if (other.Initiative != 0) {
        Initiative = other.Initiative;
      }
      if (other.ImprovedAmbush != 0) {
        ImprovedAmbush = other.ImprovedAmbush;
      }
      if (other.HeightenedSenses != 0) {
        HeightenedSenses = other.HeightenedSenses;
      }
      if (other.Preparation != false) {
        Preparation = other.Preparation;
      }
      if (other.DirtyDeeds != 0) {
        DirtyDeeds = other.DirtyDeeds;
      }
      if (other.Hemorrhage != false) {
        Hemorrhage = other.Hemorrhage;
      }
      if (other.MasterOfSubtlety != 0) {
        MasterOfSubtlety = other.MasterOfSubtlety;
      }
      if (other.Deadliness != 0) {
        Deadliness = other.Deadliness;
      }
      if (other.EnvelopingShadows != 0) {
        EnvelopingShadows = other.EnvelopingShadows;
      }
      if (other.Premeditation != false) {
        Premeditation = other.Premeditation;
      }
      if (other.CheatDeath != 0) {
        CheatDeath = other.CheatDeath;
      }
      if (other.SinisterCalling != 0) {
        SinisterCalling = other.SinisterCalling;
      }
      if (other.Waylay != 0) {
        Waylay = other.Waylay;
      }
      if (other.HonorAmongThieves != 0) {
        HonorAmongThieves = other.HonorAmongThieves;
      }
      if (other.Shadowstep != false) {
        Shadowstep = other.Shadowstep;
      }
      if (other.FilthyTricks != 0) {
        FilthyTricks = other.FilthyTricks;
      }
      if (other.SlaughterFromTheShadows != 0) {
        SlaughterFromTheShadows = other.SlaughterFromTheShadows;
      }
      if (other.ShadowDance != false) {
        ShadowDance = other.ShadowDance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ImprovedEviscerate = input.ReadInt32();
            break;
          }
          case 16: {
            RemorselessAttacks = input.ReadInt32();
            break;
          }
          case 24: {
            Malice = input.ReadInt32();
            break;
          }
          case 32: {
            Ruthlessness = input.ReadInt32();
            break;
          }
          case 40: {
            BloodSpatter = input.ReadInt32();
            break;
          }
          case 48: {
            PuncturingWounds = input.ReadInt32();
            break;
          }
          case 56: {
            Vigor = input.ReadBool();
            break;
          }
          case 64: {
            ImprovedExposeArmor = input.ReadInt32();
            break;
          }
          case 72: {
            Lethality = input.ReadInt32();
            break;
          }
          case 80: {
            VilePoisons = input.ReadInt32();
            break;
          }
          case 88: {
            ImprovedPoisons = input.ReadInt32();
            break;
          }
          case 96: {
            FleetFooted = input.ReadInt32();
            break;
          }
          case 104: {
            ColdBlood = input.ReadBool();
            break;
          }
          case 112: {
            ImprovedKidneyShot = input.ReadInt32();
            break;
          }
          case 120: {
            QuickRecovery = input.ReadInt32();
            break;
          }
          case 128: {
            SealFate = input.ReadInt32();
            break;
          }
          case 136: {
            Murder = input.ReadInt32();
            break;
          }
          case 144: {
            DeadlyBrew = input.ReadInt32();
            break;
          }
          case 152: {
            Overkill = input.ReadBool();
            break;
          }
          case 160: {
            DeadenedNerves = input.ReadInt32();
            break;
          }
          case 168: {
            FocusedAttacks = input.ReadInt32();
            break;
          }
          case 176: {
            FindWeakness = input.ReadInt32();
            break;
          }
          case 184: {
            MasterPoisoner = input.ReadInt32();
            break;
          }
          case 192: {
            Mutilate = input.ReadBool();
            break;
          }
          case 200: {
            TurnTheTables = input.ReadInt32();
            break;
          }
          case 208: {
            CutToTheChase = input.ReadInt32();
            break;
          }
          case 216: {
            HungerForBlood = input.ReadBool();
            break;
          }
          case 224: {
            ImprovedGouge = input.ReadInt32();
            break;
          }
          case 232: {
            ImprovedSinisterStrike = input.ReadInt32();
            break;
          }
          case 240: {
            DualWieldSpecialization = input.ReadInt32();
            break;
          }
          case 248: {
            ImprovedSliceAndDice = input.ReadInt32();
            break;
          }
          case 256: {
            Deflection = input.ReadInt32();
            break;
          }
          case 264: {
            Precision = input.ReadInt32();
            break;
          }
          case 272: {
            Endurance = input.ReadInt32();
            break;
          }
          case 280: {
            Riposte = input.ReadBool();
            break;
          }
          case 288: {
            CloseQuartersCombat = input.ReadInt32();
            break;
          }
          case 296: {
            ImprovedKick = input.ReadInt32();
            break;
          }
          case 304: {
            ImprovedSprint = input.ReadInt32();
            break;
          }
          case 312: {
            LightningReflexes = input.ReadInt32();
            break;
          }
          case 320: {
            Aggression = input.ReadInt32();
            break;
          }
          case 328: {
            MaceSpecialization = input.ReadInt32();
            break;
          }
          case 336: {
            BladeFlurry = input.ReadBool();
            break;
          }
          case 344: {
            HackAndSlash = input.ReadInt32();
            break;
          }
          case 352: {
            WeaponExpertise = input.ReadInt32();
            break;
          }
          case 360: {
            BladeTwisting = input.ReadInt32();
            break;
          }
          case 368: {
            Vitality = input.ReadInt32();
            break;
          }
          case 376: {
            AdrenalineRush = input.ReadBool();
            break;
          }
          case 384: {
            NervesOfSteel = input.ReadInt32();
            break;
          }
          case 392: {
            ThrowingSpecialization = input.ReadInt32();
            break;
          }
          case 400: {
            CombatPotency = input.ReadInt32();
            break;
          }
          case 408: {
            UnfairAdvantage = input.ReadInt32();
            break;
          }
          case 416: {
            SurpriseAttacks = input.ReadBool();
            break;
          }
          case 424: {
            SavageCombat = input.ReadInt32();
            break;
          }
          case 432: {
            PreyOnTheWeak = input.ReadInt32();
            break;
          }
          case 440: {
            KillingSpree = input.ReadBool();
            break;
          }
          case 448: {
            RelentlessStrikes = input.ReadInt32();
            break;
          }
          case 456: {
            MasterOfDeception = input.ReadInt32();
            break;
          }
          case 464: {
            Opportunity = input.ReadInt32();
            break;
          }
          case 472: {
            SleightOfHand = input.ReadInt32();
            break;
          }
          case 480: {
            DirtyTricks = input.ReadInt32();
            break;
          }
          case 488: {
            Camouflage = input.ReadInt32();
            break;
          }
          case 496: {
            Elusiveness = input.ReadInt32();
            break;
          }
          case 504: {
            GhostlyStrike = input.ReadBool();
            break;
          }
          case 512: {
            SerratedBlades = input.ReadInt32();
            break;
          }
          case 520: {
            Setup = input.ReadInt32();
            break;
          }
          case 528: {
            Initiative = input.ReadInt32();
            break;
          }
          case 536: {
            ImprovedAmbush = input.ReadInt32();
            break;
          }
          case 544: {
            HeightenedSenses = input.ReadInt32();
            break;
          }
          case 552: {
            Preparation = input.ReadBool();
            break;
          }
          case 560: {
            DirtyDeeds = input.ReadInt32();
            break;
          }
          case 568: {
            Hemorrhage = input.ReadBool();
            break;
          }
          case 576: {
            MasterOfSubtlety = input.ReadInt32();
            break;
          }
          case 584: {
            Deadliness = input.ReadInt32();
            break;
          }
          case 592: {
            EnvelopingShadows = input.ReadInt32();
            break;
          }
          case 600: {
            Premeditation = input.ReadBool();
            break;
          }
          case 608: {
            CheatDeath = input.ReadInt32();
            break;
          }
          case 616: {
            SinisterCalling = input.ReadInt32();
            break;
          }
          case 624: {
            Waylay = input.ReadInt32();
            break;
          }
          case 632: {
            HonorAmongThieves = input.ReadInt32();
            break;
          }
          case 640: {
            Shadowstep = input.ReadBool();
            break;
          }
          case 648: {
            FilthyTricks = input.ReadInt32();
            break;
          }
          case 656: {
            SlaughterFromTheShadows = input.ReadInt32();
            break;
          }
          case 664: {
            ShadowDance = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ImprovedEviscerate = input.ReadInt32();
            break;
          }
          case 16: {
            RemorselessAttacks = input.ReadInt32();
            break;
          }
          case 24: {
            Malice = input.ReadInt32();
            break;
          }
          case 32: {
            Ruthlessness = input.ReadInt32();
            break;
          }
          case 40: {
            BloodSpatter = input.ReadInt32();
            break;
          }
          case 48: {
            PuncturingWounds = input.ReadInt32();
            break;
          }
          case 56: {
            Vigor = input.ReadBool();
            break;
          }
          case 64: {
            ImprovedExposeArmor = input.ReadInt32();
            break;
          }
          case 72: {
            Lethality = input.ReadInt32();
            break;
          }
          case 80: {
            VilePoisons = input.ReadInt32();
            break;
          }
          case 88: {
            ImprovedPoisons = input.ReadInt32();
            break;
          }
          case 96: {
            FleetFooted = input.ReadInt32();
            break;
          }
          case 104: {
            ColdBlood = input.ReadBool();
            break;
          }
          case 112: {
            ImprovedKidneyShot = input.ReadInt32();
            break;
          }
          case 120: {
            QuickRecovery = input.ReadInt32();
            break;
          }
          case 128: {
            SealFate = input.ReadInt32();
            break;
          }
          case 136: {
            Murder = input.ReadInt32();
            break;
          }
          case 144: {
            DeadlyBrew = input.ReadInt32();
            break;
          }
          case 152: {
            Overkill = input.ReadBool();
            break;
          }
          case 160: {
            DeadenedNerves = input.ReadInt32();
            break;
          }
          case 168: {
            FocusedAttacks = input.ReadInt32();
            break;
          }
          case 176: {
            FindWeakness = input.ReadInt32();
            break;
          }
          case 184: {
            MasterPoisoner = input.ReadInt32();
            break;
          }
          case 192: {
            Mutilate = input.ReadBool();
            break;
          }
          case 200: {
            TurnTheTables = input.ReadInt32();
            break;
          }
          case 208: {
            CutToTheChase = input.ReadInt32();
            break;
          }
          case 216: {
            HungerForBlood = input.ReadBool();
            break;
          }
          case 224: {
            ImprovedGouge = input.ReadInt32();
            break;
          }
          case 232: {
            ImprovedSinisterStrike = input.ReadInt32();
            break;
          }
          case 240: {
            DualWieldSpecialization = input.ReadInt32();
            break;
          }
          case 248: {
            ImprovedSliceAndDice = input.ReadInt32();
            break;
          }
          case 256: {
            Deflection = input.ReadInt32();
            break;
          }
          case 264: {
            Precision = input.ReadInt32();
            break;
          }
          case 272: {
            Endurance = input.ReadInt32();
            break;
          }
          case 280: {
            Riposte = input.ReadBool();
            break;
          }
          case 288: {
            CloseQuartersCombat = input.ReadInt32();
            break;
          }
          case 296: {
            ImprovedKick = input.ReadInt32();
            break;
          }
          case 304: {
            ImprovedSprint = input.ReadInt32();
            break;
          }
          case 312: {
            LightningReflexes = input.ReadInt32();
            break;
          }
          case 320: {
            Aggression = input.ReadInt32();
            break;
          }
          case 328: {
            MaceSpecialization = input.ReadInt32();
            break;
          }
          case 336: {
            BladeFlurry = input.ReadBool();
            break;
          }
          case 344: {
            HackAndSlash = input.ReadInt32();
            break;
          }
          case 352: {
            WeaponExpertise = input.ReadInt32();
            break;
          }
          case 360: {
            BladeTwisting = input.ReadInt32();
            break;
          }
          case 368: {
            Vitality = input.ReadInt32();
            break;
          }
          case 376: {
            AdrenalineRush = input.ReadBool();
            break;
          }
          case 384: {
            NervesOfSteel = input.ReadInt32();
            break;
          }
          case 392: {
            ThrowingSpecialization = input.ReadInt32();
            break;
          }
          case 400: {
            CombatPotency = input.ReadInt32();
            break;
          }
          case 408: {
            UnfairAdvantage = input.ReadInt32();
            break;
          }
          case 416: {
            SurpriseAttacks = input.ReadBool();
            break;
          }
          case 424: {
            SavageCombat = input.ReadInt32();
            break;
          }
          case 432: {
            PreyOnTheWeak = input.ReadInt32();
            break;
          }
          case 440: {
            KillingSpree = input.ReadBool();
            break;
          }
          case 448: {
            RelentlessStrikes = input.ReadInt32();
            break;
          }
          case 456: {
            MasterOfDeception = input.ReadInt32();
            break;
          }
          case 464: {
            Opportunity = input.ReadInt32();
            break;
          }
          case 472: {
            SleightOfHand = input.ReadInt32();
            break;
          }
          case 480: {
            DirtyTricks = input.ReadInt32();
            break;
          }
          case 488: {
            Camouflage = input.ReadInt32();
            break;
          }
          case 496: {
            Elusiveness = input.ReadInt32();
            break;
          }
          case 504: {
            GhostlyStrike = input.ReadBool();
            break;
          }
          case 512: {
            SerratedBlades = input.ReadInt32();
            break;
          }
          case 520: {
            Setup = input.ReadInt32();
            break;
          }
          case 528: {
            Initiative = input.ReadInt32();
            break;
          }
          case 536: {
            ImprovedAmbush = input.ReadInt32();
            break;
          }
          case 544: {
            HeightenedSenses = input.ReadInt32();
            break;
          }
          case 552: {
            Preparation = input.ReadBool();
            break;
          }
          case 560: {
            DirtyDeeds = input.ReadInt32();
            break;
          }
          case 568: {
            Hemorrhage = input.ReadBool();
            break;
          }
          case 576: {
            MasterOfSubtlety = input.ReadInt32();
            break;
          }
          case 584: {
            Deadliness = input.ReadInt32();
            break;
          }
          case 592: {
            EnvelopingShadows = input.ReadInt32();
            break;
          }
          case 600: {
            Premeditation = input.ReadBool();
            break;
          }
          case 608: {
            CheatDeath = input.ReadInt32();
            break;
          }
          case 616: {
            SinisterCalling = input.ReadInt32();
            break;
          }
          case 624: {
            Waylay = input.ReadInt32();
            break;
          }
          case 632: {
            HonorAmongThieves = input.ReadInt32();
            break;
          }
          case 640: {
            Shadowstep = input.ReadBool();
            break;
          }
          case 648: {
            FilthyTricks = input.ReadInt32();
            break;
          }
          case 656: {
            SlaughterFromTheShadows = input.ReadInt32();
            break;
          }
          case 664: {
            ShadowDance = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Rogue : pb::IMessage<Rogue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Rogue> _parser = new pb::MessageParser<Rogue>(() => new Rogue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Rogue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.RogueReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Rogue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Rogue(Rogue other) : this() {
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Rogue Clone() {
      return new Rogue(this);
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::SirusDbScrapper.UIDatabase.Rogue.Types.Options options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SirusDbScrapper.UIDatabase.Rogue.Types.Options Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Rogue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Rogue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Rogue other) {
      if (other == null) {
        return;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::SirusDbScrapper.UIDatabase.Rogue.Types.Options();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.Rogue.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.Rogue.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Rogue message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Rotation : pb::IMessage<Rotation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Rotation> _parser = new pb::MessageParser<Rotation>(() => new Rotation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Rotation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.Rogue.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation(Rotation other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation Clone() {
          return new Rotation(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Rotation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Rotation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Rotation other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

      public sealed partial class Options : pb::IMessage<Options>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Options> _parser = new pb::MessageParser<Options>(() => new Options());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Options> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.Rogue.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options(Options other) : this() {
          tricksOfTheTradeTarget_ = other.tricksOfTheTradeTarget_ != null ? other.tricksOfTheTradeTarget_.Clone() : null;
          mhImbue_ = other.mhImbue_;
          ohImbue_ = other.ohImbue_;
          startingOverkillDuration_ = other.startingOverkillDuration_;
          applyPoisonsManually_ = other.applyPoisonsManually_;
          honorOfThievesCritRate_ = other.honorOfThievesCritRate_;
          assumeBleedActive_ = other.assumeBleedActive_;
          vanishBreakTime_ = other.vanishBreakTime_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options Clone() {
          return new Options(this);
        }

        /// <summary>Field number for the "tricks_of_the_trade_target" field.</summary>
        public const int TricksOfTheTradeTargetFieldNumber = 1;
        private global::SirusDbScrapper.UIDatabase.UnitReference tricksOfTheTradeTarget_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.UnitReference TricksOfTheTradeTarget {
          get { return tricksOfTheTradeTarget_; }
          set {
            tricksOfTheTradeTarget_ = value;
          }
        }

        /// <summary>Field number for the "mh_imbue" field.</summary>
        public const int MhImbueFieldNumber = 2;
        private global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue mhImbue_ = global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue.NoPoison;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue MhImbue {
          get { return mhImbue_; }
          set {
            mhImbue_ = value;
          }
        }

        /// <summary>Field number for the "oh_imbue" field.</summary>
        public const int OhImbueFieldNumber = 3;
        private global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue ohImbue_ = global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue.NoPoison;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue OhImbue {
          get { return ohImbue_; }
          set {
            ohImbue_ = value;
          }
        }

        /// <summary>Field number for the "starting_overkill_duration" field.</summary>
        public const int StartingOverkillDurationFieldNumber = 4;
        private int startingOverkillDuration_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int StartingOverkillDuration {
          get { return startingOverkillDuration_; }
          set {
            startingOverkillDuration_ = value;
          }
        }

        /// <summary>Field number for the "apply_poisons_manually" field.</summary>
        public const int ApplyPoisonsManuallyFieldNumber = 5;
        private bool applyPoisonsManually_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool ApplyPoisonsManually {
          get { return applyPoisonsManually_; }
          set {
            applyPoisonsManually_ = value;
          }
        }

        /// <summary>Field number for the "honor_of_thieves_crit_rate" field.</summary>
        public const int HonorOfThievesCritRateFieldNumber = 6;
        private int honorOfThievesCritRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int HonorOfThievesCritRate {
          get { return honorOfThievesCritRate_; }
          set {
            honorOfThievesCritRate_ = value;
          }
        }

        /// <summary>Field number for the "assume_bleed_active" field.</summary>
        public const int AssumeBleedActiveFieldNumber = 7;
        private bool assumeBleedActive_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool AssumeBleedActive {
          get { return assumeBleedActive_; }
          set {
            assumeBleedActive_ = value;
          }
        }

        /// <summary>Field number for the "vanish_break_time" field.</summary>
        public const int VanishBreakTimeFieldNumber = 8;
        private float vanishBreakTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float VanishBreakTime {
          get { return vanishBreakTime_; }
          set {
            vanishBreakTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Options);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Options other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(TricksOfTheTradeTarget, other.TricksOfTheTradeTarget)) return false;
          if (MhImbue != other.MhImbue) return false;
          if (OhImbue != other.OhImbue) return false;
          if (StartingOverkillDuration != other.StartingOverkillDuration) return false;
          if (ApplyPoisonsManually != other.ApplyPoisonsManually) return false;
          if (HonorOfThievesCritRate != other.HonorOfThievesCritRate) return false;
          if (AssumeBleedActive != other.AssumeBleedActive) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VanishBreakTime, other.VanishBreakTime)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (tricksOfTheTradeTarget_ != null) hash ^= TricksOfTheTradeTarget.GetHashCode();
          if (MhImbue != global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue.NoPoison) hash ^= MhImbue.GetHashCode();
          if (OhImbue != global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue.NoPoison) hash ^= OhImbue.GetHashCode();
          if (StartingOverkillDuration != 0) hash ^= StartingOverkillDuration.GetHashCode();
          if (ApplyPoisonsManually != false) hash ^= ApplyPoisonsManually.GetHashCode();
          if (HonorOfThievesCritRate != 0) hash ^= HonorOfThievesCritRate.GetHashCode();
          if (AssumeBleedActive != false) hash ^= AssumeBleedActive.GetHashCode();
          if (VanishBreakTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VanishBreakTime);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (tricksOfTheTradeTarget_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(TricksOfTheTradeTarget);
          }
          if (MhImbue != global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue.NoPoison) {
            output.WriteRawTag(16);
            output.WriteEnum((int) MhImbue);
          }
          if (OhImbue != global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue.NoPoison) {
            output.WriteRawTag(24);
            output.WriteEnum((int) OhImbue);
          }
          if (StartingOverkillDuration != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(StartingOverkillDuration);
          }
          if (ApplyPoisonsManually != false) {
            output.WriteRawTag(40);
            output.WriteBool(ApplyPoisonsManually);
          }
          if (HonorOfThievesCritRate != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(HonorOfThievesCritRate);
          }
          if (AssumeBleedActive != false) {
            output.WriteRawTag(56);
            output.WriteBool(AssumeBleedActive);
          }
          if (VanishBreakTime != 0F) {
            output.WriteRawTag(69);
            output.WriteFloat(VanishBreakTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (tricksOfTheTradeTarget_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(TricksOfTheTradeTarget);
          }
          if (MhImbue != global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue.NoPoison) {
            output.WriteRawTag(16);
            output.WriteEnum((int) MhImbue);
          }
          if (OhImbue != global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue.NoPoison) {
            output.WriteRawTag(24);
            output.WriteEnum((int) OhImbue);
          }
          if (StartingOverkillDuration != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(StartingOverkillDuration);
          }
          if (ApplyPoisonsManually != false) {
            output.WriteRawTag(40);
            output.WriteBool(ApplyPoisonsManually);
          }
          if (HonorOfThievesCritRate != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(HonorOfThievesCritRate);
          }
          if (AssumeBleedActive != false) {
            output.WriteRawTag(56);
            output.WriteBool(AssumeBleedActive);
          }
          if (VanishBreakTime != 0F) {
            output.WriteRawTag(69);
            output.WriteFloat(VanishBreakTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (tricksOfTheTradeTarget_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TricksOfTheTradeTarget);
          }
          if (MhImbue != global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue.NoPoison) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MhImbue);
          }
          if (OhImbue != global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue.NoPoison) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OhImbue);
          }
          if (StartingOverkillDuration != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartingOverkillDuration);
          }
          if (ApplyPoisonsManually != false) {
            size += 1 + 1;
          }
          if (HonorOfThievesCritRate != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HonorOfThievesCritRate);
          }
          if (AssumeBleedActive != false) {
            size += 1 + 1;
          }
          if (VanishBreakTime != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Options other) {
          if (other == null) {
            return;
          }
          if (other.tricksOfTheTradeTarget_ != null) {
            if (tricksOfTheTradeTarget_ == null) {
              TricksOfTheTradeTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
            }
            TricksOfTheTradeTarget.MergeFrom(other.TricksOfTheTradeTarget);
          }
          if (other.MhImbue != global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue.NoPoison) {
            MhImbue = other.MhImbue;
          }
          if (other.OhImbue != global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue.NoPoison) {
            OhImbue = other.OhImbue;
          }
          if (other.StartingOverkillDuration != 0) {
            StartingOverkillDuration = other.StartingOverkillDuration;
          }
          if (other.ApplyPoisonsManually != false) {
            ApplyPoisonsManually = other.ApplyPoisonsManually;
          }
          if (other.HonorOfThievesCritRate != 0) {
            HonorOfThievesCritRate = other.HonorOfThievesCritRate;
          }
          if (other.AssumeBleedActive != false) {
            AssumeBleedActive = other.AssumeBleedActive;
          }
          if (other.VanishBreakTime != 0F) {
            VanishBreakTime = other.VanishBreakTime;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tricksOfTheTradeTarget_ == null) {
                  TricksOfTheTradeTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
                }
                input.ReadMessage(TricksOfTheTradeTarget);
                break;
              }
              case 16: {
                MhImbue = (global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue) input.ReadEnum();
                break;
              }
              case 24: {
                OhImbue = (global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue) input.ReadEnum();
                break;
              }
              case 32: {
                StartingOverkillDuration = input.ReadInt32();
                break;
              }
              case 40: {
                ApplyPoisonsManually = input.ReadBool();
                break;
              }
              case 48: {
                HonorOfThievesCritRate = input.ReadInt32();
                break;
              }
              case 56: {
                AssumeBleedActive = input.ReadBool();
                break;
              }
              case 69: {
                VanishBreakTime = input.ReadFloat();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (tricksOfTheTradeTarget_ == null) {
                  TricksOfTheTradeTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
                }
                input.ReadMessage(TricksOfTheTradeTarget);
                break;
              }
              case 16: {
                MhImbue = (global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue) input.ReadEnum();
                break;
              }
              case 24: {
                OhImbue = (global::SirusDbScrapper.UIDatabase.Rogue.Types.Options.Types.PoisonImbue) input.ReadEnum();
                break;
              }
              case 32: {
                StartingOverkillDuration = input.ReadInt32();
                break;
              }
              case 40: {
                ApplyPoisonsManually = input.ReadBool();
                break;
              }
              case 48: {
                HonorOfThievesCritRate = input.ReadInt32();
                break;
              }
              case 56: {
                AssumeBleedActive = input.ReadBool();
                break;
              }
              case 69: {
                VanishBreakTime = input.ReadFloat();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Options message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public enum PoisonImbue {
            [pbr::OriginalName("NoPoison")] NoPoison = 0,
            [pbr::OriginalName("InstantPoison")] InstantPoison = 1,
            [pbr::OriginalName("DeadlyPoison")] DeadlyPoison = 2,
            [pbr::OriginalName("WoundPoison")] WoundPoison = 3,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
