// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: warlock.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SirusDbScrapper.UIDatabase {

  /// <summary>Holder for reflection information generated from warlock.proto</summary>
  public static partial class WarlockReflection {

    #region Descriptor
    /// <summary>File descriptor for warlock.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WarlockReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg13YXJsb2NrLnByb3RvEgVwcm90byKbDwoOV2FybG9ja1RhbGVudHMSHwoX",
            "aW1wcm92ZWRfY3Vyc2Vfb2ZfYWdvbnkYASABKAUSEwoLc3VwcHJlc3Npb24Y",
            "AiABKAUSGwoTaW1wcm92ZWRfY29ycnVwdGlvbhgDIAEoBRIiChppbXByb3Zl",
            "ZF9jdXJzZV9vZl93ZWFrbmVzcxgEIAEoBRIbChNpbXByb3ZlZF9kcmFpbl9z",
            "b3VsGAUgASgFEhkKEWltcHJvdmVkX2xpZmVfdGFwGAYgASgFEhMKC3NvdWxf",
            "c2lwaG9uGAcgASgFEhUKDWltcHJvdmVkX2ZlYXIYCCABKAUSGQoRZmVsX2Nv",
            "bmNlbnRyYXRpb24YCSABKAUSFQoNYW1wbGlmeV9jdXJzZRgKIAEoCBISCgpn",
            "cmltX3JlYWNoGAsgASgFEhEKCW5pZ2h0ZmFsbBgMIAEoBRIcChRlbXBvd2Vy",
            "ZWRfY29ycnVwdGlvbhgNIAEoBRIWCg5zaGFkb3dfZW1icmFjZRgOIAEoBRIT",
            "CgtzaXBob25fbGlmZRgPIAEoCBIbChNjdXJzZV9vZl9leGhhdXN0aW9uGBAg",
            "ASgIEhoKEmltcHJvdmVkX2ZlbGh1bnRlchgRIAEoBRIWCg5zaGFkb3dfbWFz",
            "dGVyeRgSIAEoBRITCgtlcmFkaWNhdGlvbhgTIAEoBRIRCgljb250YWdpb24Y",
            "FCABKAUSEQoJZGFya19wYWN0GBUgASgIEh8KF2ltcHJvdmVkX2hvd2xfb2Zf",
            "dGVycm9yGBYgASgFEhMKC21hbGVkaWN0aW9uGBcgASgFEhYKDmRlYXRoc19l",
            "bWJyYWNlGBggASgFEhsKE3Vuc3RhYmxlX2FmZmxpY3Rpb24YGSABKAgSEAoI",
            "cGFuZGVtaWMYGiABKAgSHgoWZXZlcmxhc3RpbmdfYWZmbGljdGlvbhgbIAEo",
            "BRINCgVoYXVudBgcIAEoCBIcChRpbXByb3ZlZF9oZWFsdGhzdG9uZRgdIAEo",
            "BRIUCgxpbXByb3ZlZF9pbXAYHiABKAUSFwoPZGVtb25pY19lbWJyYWNlGB8g",
            "ASgFEhMKC2ZlbF9zeW5lcmd5GCAgASgFEh4KFmltcHJvdmVkX2hlYWx0aF9m",
            "dW5uZWwYISABKAUSGQoRZGVtb25pY19icnV0YWxpdHkYIiABKAUSFAoMZmVs",
            "X3ZpdGFsaXR5GCMgASgFEhcKD2ltcHJvdmVkX3NheWFhZBgkIAEoBRIRCglz",
            "b3VsX2xpbmsYJSABKAgSFgoOZmVsX2RvbWluYXRpb24YJiABKAgSFQoNZGVt",
            "b25pY19hZWdpcxgnIAEoBRIUCgx1bmhvbHlfcG93ZXIYKCABKAUSFwoPbWFz",
            "dGVyX3N1bW1vbmVyGCkgASgFEhEKCW1hbmFfZmVlZBgqIAEoCBIXCg9tYXN0",
            "ZXJfY29uanVyb3IYKyABKAUSGwoTbWFzdGVyX2RlbW9ub2xvZ2lzdBgsIAEo",
            "BRITCgttb2x0ZW5fY29yZRgtIAEoBRIaChJkZW1vbmljX3Jlc2lsaWVuY2UY",
            "LiABKAUSGwoTZGVtb25pY19lbXBvd2VybWVudBgvIAEoCBIZChFkZW1vbmlj",
            "X2tub3dsZWRnZRgwIAEoBRIXCg9kZW1vbmljX3RhY3RpY3MYMSABKAUSEgoK",
            "ZGVjaW1hdGlvbhgyIAEoBRIgChhpbXByb3ZlZF9kZW1vbmljX3RhY3RpY3MY",
            "MyABKAUSFwoPc3VtbW9uX2ZlbGd1YXJkGDQgASgIEg8KB25lbWVzaXMYNSAB",
            "KAUSFAoMZGVtb25pY19wYWN0GDYgASgFEhUKDW1ldGFtb3JwaG9zaXMYNyAB",
            "KAgSHAoUaW1wcm92ZWRfc2hhZG93X2JvbHQYOCABKAUSDAoEYmFuZRg5IAEo",
            "BRIRCglhZnRlcm1hdGgYOiABKAUSEwoLbW9sdGVuX3NraW4YOyABKAUSEQoJ",
            "Y2F0YWNseXNtGDwgASgFEhUKDWRlbW9uaWNfcG93ZXIYPSABKAUSEgoKc2hh",
            "ZG93YnVybhg+IAEoCBIMCgRydWluGD8gASgFEhEKCWludGVuc2l0eRhAIAEo",
            "BRIZChFkZXN0cnVjdGl2ZV9yZWFjaBhBIAEoBRIdChVpbXByb3ZlZF9zZWFy",
            "aW5nX3BhaW4YQiABKAUSEAoIYmFja2xhc2gYQyABKAUSGQoRaW1wcm92ZWRf",
            "aW1tb2xhdGUYRCABKAUSEwoLZGV2YXN0YXRpb24YRSABKAgSGQoRbmV0aGVy",
            "X3Byb3RlY3Rpb24YRiABKAUSEgoKZW1iZXJzdG9ybRhHIAEoBRITCgtjb25m",
            "bGFncmF0ZRhIIAEoCBISCgpzb3VsX2xlZWNoGEkgASgFEhEKCXB5cm9jbGFz",
            "bRhKIAEoBRIYChBzaGFkb3dfYW5kX2ZsYW1lGEsgASgFEhsKE2ltcHJvdmVk",
            "X3NvdWxfbGVlY2gYTCABKAUSEQoJYmFja2RyYWZ0GE0gASgFEhIKCnNoYWRv",
            "d2Z1cnkYTiABKAgSFQoNZW1wb3dlcmVkX2ltcBhPIAEoBRIaChJmaXJlX2Fu",
            "ZF9icmltc3RvbmUYUCABKAUSEgoKY2hhb3NfYm9sdBhRIAEoCCLwAwoHV2Fy",
            "bG9jaxInCgdvcHRpb25zGAMgASgLMhYucHJvdG8uV2FybG9jay5PcHRpb25z",
            "GgoKCFJvdGF0aW9uGq8DCgdPcHRpb25zEisKBWFybW9yGAEgASgOMhwucHJv",
            "dG8uV2FybG9jay5PcHRpb25zLkFybW9yEi0KBnN1bW1vbhgCIAEoDjIdLnBy",
            "b3RvLldhcmxvY2suT3B0aW9ucy5TdW1tb24SNwoLd2VhcG9uSW1idWUYAyAB",
            "KA4yIi5wcm90by5XYXJsb2NrLk9wdGlvbnMuV2VhcG9uSW1idWUSHQoVX29s",
            "ZERQQmVoYXZpb3VyT3B0aW9uGAQgASgIEhUKDWRldG9uYXRlX3NlZWQYBSAB",
            "KAgiWgoGU3VtbW9uEgwKCE5vU3VtbW9uEAASBwoDSW1wEAESDgoKVm9pZHdh",
            "bGtlchACEgwKCFN1Y2N1YnVzEAMSDQoJRmVsaHVudGVyEAQSDAoIRmVsZ3Vh",
            "cmQQBSIyCgVBcm1vchILCgdOb0FybW9yEAASDAoIRmVsQXJtb3IQARIOCgpE",
            "ZW1vbkFybW9yEAIiSQoLV2VhcG9uSW1idWUSEQoNTm9XZWFwb25JbWJ1ZRAA",
            "EhMKD0dyYW5kU3BlbGxzdG9uZRABEhIKDkdyYW5kRmlyZXN0b25lEAIq+gUK",
            "EVdhcmxvY2tNYWpvckdseXBoEhkKFVdhcmxvY2tNYWpvckdseXBoTm9uZRAA",
            "EhYKEEdseXBoT2ZDaGFvc0JvbHQQ1eUCEhgKEkdseXBoT2ZDb25mbGFncmF0",
            "ZRDWywISFwoRR2x5cGhPZkNvcnJ1cHRpb24Q18sCEhkKE0dseXBoT2ZDdXJz",
            "ZU9mQWdvbnkQ2MsCEhYKEEdseXBoT2ZEZWF0aENvaWwQ2csCEhoKFEdseXBo",
            "T2ZEZW1vbmljQ2lyY2xlENblAhIRCgtHbHlwaE9mRmVhchDaywISFQoPR2x5",
            "cGhPZkZlbGd1YXJkENvLAhIWChBHbHlwaE9mRmVsaHVudGVyENzLAhISCgxH",
            "bHlwaE9mSGF1bnQQ0+UCEhkKE0dseXBoT2ZIZWFsdGhGdW5uZWwQ3csCEhgK",
            "EkdseXBoT2ZIZWFsdGhzdG9uZRDeywISGQoTR2x5cGhPZkhvd2xPZlRlcnJv",
            "chDfywISFQoPR2x5cGhPZkltbW9sYXRlEODLAhIQCgpHbHlwaE9mSW1wEOHL",
            "AhIXChFHbHlwaE9mSW5jaW5lcmF0ZRDVywISFAoOR2x5cGhPZkxpZmVUYXAQ",
            "2eUCEhoKFEdseXBoT2ZNZXRhbW9ycGhvc2lzENTlAhIXChFHbHlwaE9mUXVp",
            "Y2tEZWNheRCdhwMSGAoSR2x5cGhPZlNlYXJpbmdQYWluEOLLAhIXChFHbHlw",
            "aE9mU2hhZG93Qm9sdBDjywISFwoRR2x5cGhPZlNoYWRvd2J1cm4Q5MsCEhgK",
            "EkdseXBoT2ZTaGFkb3dmbGFtZRDX5QISFwoRR2x5cGhPZlNpcGhvbkxpZmUQ",
            "5csCEhUKD0dseXBoT2ZTb3VsTGluaxDd5QISFgoQR2x5cGhPZlNvdWxzdG9u",
            "ZRDmywISFQoPR2x5cGhPZlN1Y2N1YnVzEOfLAhIfChlHbHlwaE9mVW5zdGFi",
            "bGVBZmZsaWN0aW9uEOjLAhIXChFHbHlwaE9mVm9pZHdhbGtlchDpywIqyQEK",
            "EVdhcmxvY2tNaW5vckdseXBoEhkKFVdhcmxvY2tNaW5vckdseXBoTm9uZRAA",
            "Eh0KF0dseXBoT2ZDdXJzZU9mRXhoYXVzaW9uEIDTAhIWChBHbHlwaE9mRHJh",
            "aW5Tb3VsEP7SAhIbChVHbHlwaE9mU3VianVnYXRlRGVtb24QgdMCEhQKDkds",
            "eXBoT2ZLaWxyb2dnEP/SAhISCgxHbHlwaE9mU291bHMQgtMCEhsKFUdseXBo",
            "T2ZVbmVuZGluZ0JyZWF0aBD90gJCHaoCGlNpcnVzRGJTY3JhcHBlci5VSURh",
            "dGFiYXNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SirusDbScrapper.UIDatabase.WarlockMajorGlyph), typeof(global::SirusDbScrapper.UIDatabase.WarlockMinorGlyph), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.WarlockTalents), global::SirusDbScrapper.UIDatabase.WarlockTalents.Parser, new[]{ "ImprovedCurseOfAgony", "Suppression", "ImprovedCorruption", "ImprovedCurseOfWeakness", "ImprovedDrainSoul", "ImprovedLifeTap", "SoulSiphon", "ImprovedFear", "FelConcentration", "AmplifyCurse", "GrimReach", "Nightfall", "EmpoweredCorruption", "ShadowEmbrace", "SiphonLife", "CurseOfExhaustion", "ImprovedFelhunter", "ShadowMastery", "Eradication", "Contagion", "DarkPact", "ImprovedHowlOfTerror", "Malediction", "DeathsEmbrace", "UnstableAffliction", "Pandemic", "EverlastingAffliction", "Haunt", "ImprovedHealthstone", "ImprovedImp", "DemonicEmbrace", "FelSynergy", "ImprovedHealthFunnel", "DemonicBrutality", "FelVitality", "ImprovedSayaad", "SoulLink", "FelDomination", "DemonicAegis", "UnholyPower", "MasterSummoner", "ManaFeed", "MasterConjuror", "MasterDemonologist", "MoltenCore", "DemonicResilience", "DemonicEmpowerment", "DemonicKnowledge", "DemonicTactics", "Decimation", "ImprovedDemonicTactics", "SummonFelguard", "Nemesis", "DemonicPact", "Metamorphosis", "ImprovedShadowBolt", "Bane", "Aftermath", "MoltenSkin", "Cataclysm", "DemonicPower", "Shadowburn", "Ruin", "Intensity", "DestructiveReach", "ImprovedSearingPain", "Backlash", "ImprovedImmolate", "Devastation", "NetherProtection", "Emberstorm", "Conflagrate", "SoulLeech", "Pyroclasm", "ShadowAndFlame", "ImprovedSoulLeech", "Backdraft", "Shadowfury", "EmpoweredImp", "FireAndBrimstone", "ChaosBolt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.Warlock), global::SirusDbScrapper.UIDatabase.Warlock.Parser, new[]{ "Options" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.Warlock.Types.Rotation), global::SirusDbScrapper.UIDatabase.Warlock.Types.Rotation.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.Warlock.Types.Options), global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Parser, new[]{ "Armor", "Summon", "WeaponImbue", "OldDPBehaviourOption", "DetonateSeed" }, null, new[]{ typeof(global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Summon), typeof(global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Armor), typeof(global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.WeaponImbue) }, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum WarlockMajorGlyph {
    [pbr::OriginalName("WarlockMajorGlyphNone")] None = 0,
    [pbr::OriginalName("GlyphOfChaosBolt")] GlyphOfChaosBolt = 45781,
    [pbr::OriginalName("GlyphOfConflagrate")] GlyphOfConflagrate = 42454,
    [pbr::OriginalName("GlyphOfCorruption")] GlyphOfCorruption = 42455,
    [pbr::OriginalName("GlyphOfCurseOfAgony")] GlyphOfCurseOfAgony = 42456,
    [pbr::OriginalName("GlyphOfDeathCoil")] GlyphOfDeathCoil = 42457,
    [pbr::OriginalName("GlyphOfDemonicCircle")] GlyphOfDemonicCircle = 45782,
    [pbr::OriginalName("GlyphOfFear")] GlyphOfFear = 42458,
    [pbr::OriginalName("GlyphOfFelguard")] GlyphOfFelguard = 42459,
    [pbr::OriginalName("GlyphOfFelhunter")] GlyphOfFelhunter = 42460,
    [pbr::OriginalName("GlyphOfHaunt")] GlyphOfHaunt = 45779,
    [pbr::OriginalName("GlyphOfHealthFunnel")] GlyphOfHealthFunnel = 42461,
    [pbr::OriginalName("GlyphOfHealthstone")] GlyphOfHealthstone = 42462,
    [pbr::OriginalName("GlyphOfHowlOfTerror")] GlyphOfHowlOfTerror = 42463,
    [pbr::OriginalName("GlyphOfImmolate")] GlyphOfImmolate = 42464,
    [pbr::OriginalName("GlyphOfImp")] GlyphOfImp = 42465,
    [pbr::OriginalName("GlyphOfIncinerate")] GlyphOfIncinerate = 42453,
    [pbr::OriginalName("GlyphOfLifeTap")] GlyphOfLifeTap = 45785,
    [pbr::OriginalName("GlyphOfMetamorphosis")] GlyphOfMetamorphosis = 45780,
    [pbr::OriginalName("GlyphOfQuickDecay")] GlyphOfQuickDecay = 50077,
    [pbr::OriginalName("GlyphOfSearingPain")] GlyphOfSearingPain = 42466,
    [pbr::OriginalName("GlyphOfShadowBolt")] GlyphOfShadowBolt = 42467,
    [pbr::OriginalName("GlyphOfShadowburn")] GlyphOfShadowburn = 42468,
    [pbr::OriginalName("GlyphOfShadowflame")] GlyphOfShadowflame = 45783,
    [pbr::OriginalName("GlyphOfSiphonLife")] GlyphOfSiphonLife = 42469,
    [pbr::OriginalName("GlyphOfSoulLink")] GlyphOfSoulLink = 45789,
    [pbr::OriginalName("GlyphOfSoulstone")] GlyphOfSoulstone = 42470,
    [pbr::OriginalName("GlyphOfSuccubus")] GlyphOfSuccubus = 42471,
    [pbr::OriginalName("GlyphOfUnstableAffliction")] GlyphOfUnstableAffliction = 42472,
    [pbr::OriginalName("GlyphOfVoidwalker")] GlyphOfVoidwalker = 42473,
  }

  public enum WarlockMinorGlyph {
    [pbr::OriginalName("WarlockMinorGlyphNone")] None = 0,
    [pbr::OriginalName("GlyphOfCurseOfExhausion")] GlyphOfCurseOfExhausion = 43392,
    [pbr::OriginalName("GlyphOfDrainSoul")] GlyphOfDrainSoul = 43390,
    [pbr::OriginalName("GlyphOfSubjugateDemon")] GlyphOfSubjugateDemon = 43393,
    [pbr::OriginalName("GlyphOfKilrogg")] GlyphOfKilrogg = 43391,
    [pbr::OriginalName("GlyphOfSouls")] GlyphOfSouls = 43394,
    [pbr::OriginalName("GlyphOfUnendingBreath")] GlyphOfUnendingBreath = 43389,
  }

  #endregion

  #region Messages
  /// <summary>
  /// WotLK talents
  /// </summary>
  public sealed partial class WarlockTalents : pb::IMessage<WarlockTalents>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WarlockTalents> _parser = new pb::MessageParser<WarlockTalents>(() => new WarlockTalents());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WarlockTalents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.WarlockReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WarlockTalents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WarlockTalents(WarlockTalents other) : this() {
      improvedCurseOfAgony_ = other.improvedCurseOfAgony_;
      suppression_ = other.suppression_;
      improvedCorruption_ = other.improvedCorruption_;
      improvedCurseOfWeakness_ = other.improvedCurseOfWeakness_;
      improvedDrainSoul_ = other.improvedDrainSoul_;
      improvedLifeTap_ = other.improvedLifeTap_;
      soulSiphon_ = other.soulSiphon_;
      improvedFear_ = other.improvedFear_;
      felConcentration_ = other.felConcentration_;
      amplifyCurse_ = other.amplifyCurse_;
      grimReach_ = other.grimReach_;
      nightfall_ = other.nightfall_;
      empoweredCorruption_ = other.empoweredCorruption_;
      shadowEmbrace_ = other.shadowEmbrace_;
      siphonLife_ = other.siphonLife_;
      curseOfExhaustion_ = other.curseOfExhaustion_;
      improvedFelhunter_ = other.improvedFelhunter_;
      shadowMastery_ = other.shadowMastery_;
      eradication_ = other.eradication_;
      contagion_ = other.contagion_;
      darkPact_ = other.darkPact_;
      improvedHowlOfTerror_ = other.improvedHowlOfTerror_;
      malediction_ = other.malediction_;
      deathsEmbrace_ = other.deathsEmbrace_;
      unstableAffliction_ = other.unstableAffliction_;
      pandemic_ = other.pandemic_;
      everlastingAffliction_ = other.everlastingAffliction_;
      haunt_ = other.haunt_;
      improvedHealthstone_ = other.improvedHealthstone_;
      improvedImp_ = other.improvedImp_;
      demonicEmbrace_ = other.demonicEmbrace_;
      felSynergy_ = other.felSynergy_;
      improvedHealthFunnel_ = other.improvedHealthFunnel_;
      demonicBrutality_ = other.demonicBrutality_;
      felVitality_ = other.felVitality_;
      improvedSayaad_ = other.improvedSayaad_;
      soulLink_ = other.soulLink_;
      felDomination_ = other.felDomination_;
      demonicAegis_ = other.demonicAegis_;
      unholyPower_ = other.unholyPower_;
      masterSummoner_ = other.masterSummoner_;
      manaFeed_ = other.manaFeed_;
      masterConjuror_ = other.masterConjuror_;
      masterDemonologist_ = other.masterDemonologist_;
      moltenCore_ = other.moltenCore_;
      demonicResilience_ = other.demonicResilience_;
      demonicEmpowerment_ = other.demonicEmpowerment_;
      demonicKnowledge_ = other.demonicKnowledge_;
      demonicTactics_ = other.demonicTactics_;
      decimation_ = other.decimation_;
      improvedDemonicTactics_ = other.improvedDemonicTactics_;
      summonFelguard_ = other.summonFelguard_;
      nemesis_ = other.nemesis_;
      demonicPact_ = other.demonicPact_;
      metamorphosis_ = other.metamorphosis_;
      improvedShadowBolt_ = other.improvedShadowBolt_;
      bane_ = other.bane_;
      aftermath_ = other.aftermath_;
      moltenSkin_ = other.moltenSkin_;
      cataclysm_ = other.cataclysm_;
      demonicPower_ = other.demonicPower_;
      shadowburn_ = other.shadowburn_;
      ruin_ = other.ruin_;
      intensity_ = other.intensity_;
      destructiveReach_ = other.destructiveReach_;
      improvedSearingPain_ = other.improvedSearingPain_;
      backlash_ = other.backlash_;
      improvedImmolate_ = other.improvedImmolate_;
      devastation_ = other.devastation_;
      netherProtection_ = other.netherProtection_;
      emberstorm_ = other.emberstorm_;
      conflagrate_ = other.conflagrate_;
      soulLeech_ = other.soulLeech_;
      pyroclasm_ = other.pyroclasm_;
      shadowAndFlame_ = other.shadowAndFlame_;
      improvedSoulLeech_ = other.improvedSoulLeech_;
      backdraft_ = other.backdraft_;
      shadowfury_ = other.shadowfury_;
      empoweredImp_ = other.empoweredImp_;
      fireAndBrimstone_ = other.fireAndBrimstone_;
      chaosBolt_ = other.chaosBolt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WarlockTalents Clone() {
      return new WarlockTalents(this);
    }

    /// <summary>Field number for the "improved_curse_of_agony" field.</summary>
    public const int ImprovedCurseOfAgonyFieldNumber = 1;
    private int improvedCurseOfAgony_;
    /// <summary>
    /// Affliction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedCurseOfAgony {
      get { return improvedCurseOfAgony_; }
      set {
        improvedCurseOfAgony_ = value;
      }
    }

    /// <summary>Field number for the "suppression" field.</summary>
    public const int SuppressionFieldNumber = 2;
    private int suppression_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Suppression {
      get { return suppression_; }
      set {
        suppression_ = value;
      }
    }

    /// <summary>Field number for the "improved_corruption" field.</summary>
    public const int ImprovedCorruptionFieldNumber = 3;
    private int improvedCorruption_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedCorruption {
      get { return improvedCorruption_; }
      set {
        improvedCorruption_ = value;
      }
    }

    /// <summary>Field number for the "improved_curse_of_weakness" field.</summary>
    public const int ImprovedCurseOfWeaknessFieldNumber = 4;
    private int improvedCurseOfWeakness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedCurseOfWeakness {
      get { return improvedCurseOfWeakness_; }
      set {
        improvedCurseOfWeakness_ = value;
      }
    }

    /// <summary>Field number for the "improved_drain_soul" field.</summary>
    public const int ImprovedDrainSoulFieldNumber = 5;
    private int improvedDrainSoul_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedDrainSoul {
      get { return improvedDrainSoul_; }
      set {
        improvedDrainSoul_ = value;
      }
    }

    /// <summary>Field number for the "improved_life_tap" field.</summary>
    public const int ImprovedLifeTapFieldNumber = 6;
    private int improvedLifeTap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedLifeTap {
      get { return improvedLifeTap_; }
      set {
        improvedLifeTap_ = value;
      }
    }

    /// <summary>Field number for the "soul_siphon" field.</summary>
    public const int SoulSiphonFieldNumber = 7;
    private int soulSiphon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SoulSiphon {
      get { return soulSiphon_; }
      set {
        soulSiphon_ = value;
      }
    }

    /// <summary>Field number for the "improved_fear" field.</summary>
    public const int ImprovedFearFieldNumber = 8;
    private int improvedFear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedFear {
      get { return improvedFear_; }
      set {
        improvedFear_ = value;
      }
    }

    /// <summary>Field number for the "fel_concentration" field.</summary>
    public const int FelConcentrationFieldNumber = 9;
    private int felConcentration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FelConcentration {
      get { return felConcentration_; }
      set {
        felConcentration_ = value;
      }
    }

    /// <summary>Field number for the "amplify_curse" field.</summary>
    public const int AmplifyCurseFieldNumber = 10;
    private bool amplifyCurse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AmplifyCurse {
      get { return amplifyCurse_; }
      set {
        amplifyCurse_ = value;
      }
    }

    /// <summary>Field number for the "grim_reach" field.</summary>
    public const int GrimReachFieldNumber = 11;
    private int grimReach_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GrimReach {
      get { return grimReach_; }
      set {
        grimReach_ = value;
      }
    }

    /// <summary>Field number for the "nightfall" field.</summary>
    public const int NightfallFieldNumber = 12;
    private int nightfall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Nightfall {
      get { return nightfall_; }
      set {
        nightfall_ = value;
      }
    }

    /// <summary>Field number for the "empowered_corruption" field.</summary>
    public const int EmpoweredCorruptionFieldNumber = 13;
    private int empoweredCorruption_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EmpoweredCorruption {
      get { return empoweredCorruption_; }
      set {
        empoweredCorruption_ = value;
      }
    }

    /// <summary>Field number for the "shadow_embrace" field.</summary>
    public const int ShadowEmbraceFieldNumber = 14;
    private int shadowEmbrace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShadowEmbrace {
      get { return shadowEmbrace_; }
      set {
        shadowEmbrace_ = value;
      }
    }

    /// <summary>Field number for the "siphon_life" field.</summary>
    public const int SiphonLifeFieldNumber = 15;
    private bool siphonLife_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SiphonLife {
      get { return siphonLife_; }
      set {
        siphonLife_ = value;
      }
    }

    /// <summary>Field number for the "curse_of_exhaustion" field.</summary>
    public const int CurseOfExhaustionFieldNumber = 16;
    private bool curseOfExhaustion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CurseOfExhaustion {
      get { return curseOfExhaustion_; }
      set {
        curseOfExhaustion_ = value;
      }
    }

    /// <summary>Field number for the "improved_felhunter" field.</summary>
    public const int ImprovedFelhunterFieldNumber = 17;
    private int improvedFelhunter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedFelhunter {
      get { return improvedFelhunter_; }
      set {
        improvedFelhunter_ = value;
      }
    }

    /// <summary>Field number for the "shadow_mastery" field.</summary>
    public const int ShadowMasteryFieldNumber = 18;
    private int shadowMastery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShadowMastery {
      get { return shadowMastery_; }
      set {
        shadowMastery_ = value;
      }
    }

    /// <summary>Field number for the "eradication" field.</summary>
    public const int EradicationFieldNumber = 19;
    private int eradication_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Eradication {
      get { return eradication_; }
      set {
        eradication_ = value;
      }
    }

    /// <summary>Field number for the "contagion" field.</summary>
    public const int ContagionFieldNumber = 20;
    private int contagion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Contagion {
      get { return contagion_; }
      set {
        contagion_ = value;
      }
    }

    /// <summary>Field number for the "dark_pact" field.</summary>
    public const int DarkPactFieldNumber = 21;
    private bool darkPact_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DarkPact {
      get { return darkPact_; }
      set {
        darkPact_ = value;
      }
    }

    /// <summary>Field number for the "improved_howl_of_terror" field.</summary>
    public const int ImprovedHowlOfTerrorFieldNumber = 22;
    private int improvedHowlOfTerror_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedHowlOfTerror {
      get { return improvedHowlOfTerror_; }
      set {
        improvedHowlOfTerror_ = value;
      }
    }

    /// <summary>Field number for the "malediction" field.</summary>
    public const int MaledictionFieldNumber = 23;
    private int malediction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Malediction {
      get { return malediction_; }
      set {
        malediction_ = value;
      }
    }

    /// <summary>Field number for the "deaths_embrace" field.</summary>
    public const int DeathsEmbraceFieldNumber = 24;
    private int deathsEmbrace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DeathsEmbrace {
      get { return deathsEmbrace_; }
      set {
        deathsEmbrace_ = value;
      }
    }

    /// <summary>Field number for the "unstable_affliction" field.</summary>
    public const int UnstableAfflictionFieldNumber = 25;
    private bool unstableAffliction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UnstableAffliction {
      get { return unstableAffliction_; }
      set {
        unstableAffliction_ = value;
      }
    }

    /// <summary>Field number for the "pandemic" field.</summary>
    public const int PandemicFieldNumber = 26;
    private bool pandemic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Pandemic {
      get { return pandemic_; }
      set {
        pandemic_ = value;
      }
    }

    /// <summary>Field number for the "everlasting_affliction" field.</summary>
    public const int EverlastingAfflictionFieldNumber = 27;
    private int everlastingAffliction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EverlastingAffliction {
      get { return everlastingAffliction_; }
      set {
        everlastingAffliction_ = value;
      }
    }

    /// <summary>Field number for the "haunt" field.</summary>
    public const int HauntFieldNumber = 28;
    private bool haunt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Haunt {
      get { return haunt_; }
      set {
        haunt_ = value;
      }
    }

    /// <summary>Field number for the "improved_healthstone" field.</summary>
    public const int ImprovedHealthstoneFieldNumber = 29;
    private int improvedHealthstone_;
    /// <summary>
    /// Demonology
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedHealthstone {
      get { return improvedHealthstone_; }
      set {
        improvedHealthstone_ = value;
      }
    }

    /// <summary>Field number for the "improved_imp" field.</summary>
    public const int ImprovedImpFieldNumber = 30;
    private int improvedImp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedImp {
      get { return improvedImp_; }
      set {
        improvedImp_ = value;
      }
    }

    /// <summary>Field number for the "demonic_embrace" field.</summary>
    public const int DemonicEmbraceFieldNumber = 31;
    private int demonicEmbrace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DemonicEmbrace {
      get { return demonicEmbrace_; }
      set {
        demonicEmbrace_ = value;
      }
    }

    /// <summary>Field number for the "fel_synergy" field.</summary>
    public const int FelSynergyFieldNumber = 32;
    private int felSynergy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FelSynergy {
      get { return felSynergy_; }
      set {
        felSynergy_ = value;
      }
    }

    /// <summary>Field number for the "improved_health_funnel" field.</summary>
    public const int ImprovedHealthFunnelFieldNumber = 33;
    private int improvedHealthFunnel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedHealthFunnel {
      get { return improvedHealthFunnel_; }
      set {
        improvedHealthFunnel_ = value;
      }
    }

    /// <summary>Field number for the "demonic_brutality" field.</summary>
    public const int DemonicBrutalityFieldNumber = 34;
    private int demonicBrutality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DemonicBrutality {
      get { return demonicBrutality_; }
      set {
        demonicBrutality_ = value;
      }
    }

    /// <summary>Field number for the "fel_vitality" field.</summary>
    public const int FelVitalityFieldNumber = 35;
    private int felVitality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FelVitality {
      get { return felVitality_; }
      set {
        felVitality_ = value;
      }
    }

    /// <summary>Field number for the "improved_sayaad" field.</summary>
    public const int ImprovedSayaadFieldNumber = 36;
    private int improvedSayaad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedSayaad {
      get { return improvedSayaad_; }
      set {
        improvedSayaad_ = value;
      }
    }

    /// <summary>Field number for the "soul_link" field.</summary>
    public const int SoulLinkFieldNumber = 37;
    private bool soulLink_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SoulLink {
      get { return soulLink_; }
      set {
        soulLink_ = value;
      }
    }

    /// <summary>Field number for the "fel_domination" field.</summary>
    public const int FelDominationFieldNumber = 38;
    private bool felDomination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FelDomination {
      get { return felDomination_; }
      set {
        felDomination_ = value;
      }
    }

    /// <summary>Field number for the "demonic_aegis" field.</summary>
    public const int DemonicAegisFieldNumber = 39;
    private int demonicAegis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DemonicAegis {
      get { return demonicAegis_; }
      set {
        demonicAegis_ = value;
      }
    }

    /// <summary>Field number for the "unholy_power" field.</summary>
    public const int UnholyPowerFieldNumber = 40;
    private int unholyPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnholyPower {
      get { return unholyPower_; }
      set {
        unholyPower_ = value;
      }
    }

    /// <summary>Field number for the "master_summoner" field.</summary>
    public const int MasterSummonerFieldNumber = 41;
    private int masterSummoner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MasterSummoner {
      get { return masterSummoner_; }
      set {
        masterSummoner_ = value;
      }
    }

    /// <summary>Field number for the "mana_feed" field.</summary>
    public const int ManaFeedFieldNumber = 42;
    private bool manaFeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ManaFeed {
      get { return manaFeed_; }
      set {
        manaFeed_ = value;
      }
    }

    /// <summary>Field number for the "master_conjuror" field.</summary>
    public const int MasterConjurorFieldNumber = 43;
    private int masterConjuror_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MasterConjuror {
      get { return masterConjuror_; }
      set {
        masterConjuror_ = value;
      }
    }

    /// <summary>Field number for the "master_demonologist" field.</summary>
    public const int MasterDemonologistFieldNumber = 44;
    private int masterDemonologist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MasterDemonologist {
      get { return masterDemonologist_; }
      set {
        masterDemonologist_ = value;
      }
    }

    /// <summary>Field number for the "molten_core" field.</summary>
    public const int MoltenCoreFieldNumber = 45;
    private int moltenCore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MoltenCore {
      get { return moltenCore_; }
      set {
        moltenCore_ = value;
      }
    }

    /// <summary>Field number for the "demonic_resilience" field.</summary>
    public const int DemonicResilienceFieldNumber = 46;
    private int demonicResilience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DemonicResilience {
      get { return demonicResilience_; }
      set {
        demonicResilience_ = value;
      }
    }

    /// <summary>Field number for the "demonic_empowerment" field.</summary>
    public const int DemonicEmpowermentFieldNumber = 47;
    private bool demonicEmpowerment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DemonicEmpowerment {
      get { return demonicEmpowerment_; }
      set {
        demonicEmpowerment_ = value;
      }
    }

    /// <summary>Field number for the "demonic_knowledge" field.</summary>
    public const int DemonicKnowledgeFieldNumber = 48;
    private int demonicKnowledge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DemonicKnowledge {
      get { return demonicKnowledge_; }
      set {
        demonicKnowledge_ = value;
      }
    }

    /// <summary>Field number for the "demonic_tactics" field.</summary>
    public const int DemonicTacticsFieldNumber = 49;
    private int demonicTactics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DemonicTactics {
      get { return demonicTactics_; }
      set {
        demonicTactics_ = value;
      }
    }

    /// <summary>Field number for the "decimation" field.</summary>
    public const int DecimationFieldNumber = 50;
    private int decimation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Decimation {
      get { return decimation_; }
      set {
        decimation_ = value;
      }
    }

    /// <summary>Field number for the "improved_demonic_tactics" field.</summary>
    public const int ImprovedDemonicTacticsFieldNumber = 51;
    private int improvedDemonicTactics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedDemonicTactics {
      get { return improvedDemonicTactics_; }
      set {
        improvedDemonicTactics_ = value;
      }
    }

    /// <summary>Field number for the "summon_felguard" field.</summary>
    public const int SummonFelguardFieldNumber = 52;
    private bool summonFelguard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SummonFelguard {
      get { return summonFelguard_; }
      set {
        summonFelguard_ = value;
      }
    }

    /// <summary>Field number for the "nemesis" field.</summary>
    public const int NemesisFieldNumber = 53;
    private int nemesis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Nemesis {
      get { return nemesis_; }
      set {
        nemesis_ = value;
      }
    }

    /// <summary>Field number for the "demonic_pact" field.</summary>
    public const int DemonicPactFieldNumber = 54;
    private int demonicPact_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DemonicPact {
      get { return demonicPact_; }
      set {
        demonicPact_ = value;
      }
    }

    /// <summary>Field number for the "metamorphosis" field.</summary>
    public const int MetamorphosisFieldNumber = 55;
    private bool metamorphosis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Metamorphosis {
      get { return metamorphosis_; }
      set {
        metamorphosis_ = value;
      }
    }

    /// <summary>Field number for the "improved_shadow_bolt" field.</summary>
    public const int ImprovedShadowBoltFieldNumber = 56;
    private int improvedShadowBolt_;
    /// <summary>
    /// Destruction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedShadowBolt {
      get { return improvedShadowBolt_; }
      set {
        improvedShadowBolt_ = value;
      }
    }

    /// <summary>Field number for the "bane" field.</summary>
    public const int BaneFieldNumber = 57;
    private int bane_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Bane {
      get { return bane_; }
      set {
        bane_ = value;
      }
    }

    /// <summary>Field number for the "aftermath" field.</summary>
    public const int AftermathFieldNumber = 58;
    private int aftermath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Aftermath {
      get { return aftermath_; }
      set {
        aftermath_ = value;
      }
    }

    /// <summary>Field number for the "molten_skin" field.</summary>
    public const int MoltenSkinFieldNumber = 59;
    private int moltenSkin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MoltenSkin {
      get { return moltenSkin_; }
      set {
        moltenSkin_ = value;
      }
    }

    /// <summary>Field number for the "cataclysm" field.</summary>
    public const int CataclysmFieldNumber = 60;
    private int cataclysm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cataclysm {
      get { return cataclysm_; }
      set {
        cataclysm_ = value;
      }
    }

    /// <summary>Field number for the "demonic_power" field.</summary>
    public const int DemonicPowerFieldNumber = 61;
    private int demonicPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DemonicPower {
      get { return demonicPower_; }
      set {
        demonicPower_ = value;
      }
    }

    /// <summary>Field number for the "shadowburn" field.</summary>
    public const int ShadowburnFieldNumber = 62;
    private bool shadowburn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Shadowburn {
      get { return shadowburn_; }
      set {
        shadowburn_ = value;
      }
    }

    /// <summary>Field number for the "ruin" field.</summary>
    public const int RuinFieldNumber = 63;
    private int ruin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ruin {
      get { return ruin_; }
      set {
        ruin_ = value;
      }
    }

    /// <summary>Field number for the "intensity" field.</summary>
    public const int IntensityFieldNumber = 64;
    private int intensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Intensity {
      get { return intensity_; }
      set {
        intensity_ = value;
      }
    }

    /// <summary>Field number for the "destructive_reach" field.</summary>
    public const int DestructiveReachFieldNumber = 65;
    private int destructiveReach_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DestructiveReach {
      get { return destructiveReach_; }
      set {
        destructiveReach_ = value;
      }
    }

    /// <summary>Field number for the "improved_searing_pain" field.</summary>
    public const int ImprovedSearingPainFieldNumber = 66;
    private int improvedSearingPain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedSearingPain {
      get { return improvedSearingPain_; }
      set {
        improvedSearingPain_ = value;
      }
    }

    /// <summary>Field number for the "backlash" field.</summary>
    public const int BacklashFieldNumber = 67;
    private int backlash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Backlash {
      get { return backlash_; }
      set {
        backlash_ = value;
      }
    }

    /// <summary>Field number for the "improved_immolate" field.</summary>
    public const int ImprovedImmolateFieldNumber = 68;
    private int improvedImmolate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedImmolate {
      get { return improvedImmolate_; }
      set {
        improvedImmolate_ = value;
      }
    }

    /// <summary>Field number for the "devastation" field.</summary>
    public const int DevastationFieldNumber = 69;
    private bool devastation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Devastation {
      get { return devastation_; }
      set {
        devastation_ = value;
      }
    }

    /// <summary>Field number for the "nether_protection" field.</summary>
    public const int NetherProtectionFieldNumber = 70;
    private int netherProtection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NetherProtection {
      get { return netherProtection_; }
      set {
        netherProtection_ = value;
      }
    }

    /// <summary>Field number for the "emberstorm" field.</summary>
    public const int EmberstormFieldNumber = 71;
    private int emberstorm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Emberstorm {
      get { return emberstorm_; }
      set {
        emberstorm_ = value;
      }
    }

    /// <summary>Field number for the "conflagrate" field.</summary>
    public const int ConflagrateFieldNumber = 72;
    private bool conflagrate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Conflagrate {
      get { return conflagrate_; }
      set {
        conflagrate_ = value;
      }
    }

    /// <summary>Field number for the "soul_leech" field.</summary>
    public const int SoulLeechFieldNumber = 73;
    private int soulLeech_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SoulLeech {
      get { return soulLeech_; }
      set {
        soulLeech_ = value;
      }
    }

    /// <summary>Field number for the "pyroclasm" field.</summary>
    public const int PyroclasmFieldNumber = 74;
    private int pyroclasm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Pyroclasm {
      get { return pyroclasm_; }
      set {
        pyroclasm_ = value;
      }
    }

    /// <summary>Field number for the "shadow_and_flame" field.</summary>
    public const int ShadowAndFlameFieldNumber = 75;
    private int shadowAndFlame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShadowAndFlame {
      get { return shadowAndFlame_; }
      set {
        shadowAndFlame_ = value;
      }
    }

    /// <summary>Field number for the "improved_soul_leech" field.</summary>
    public const int ImprovedSoulLeechFieldNumber = 76;
    private int improvedSoulLeech_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedSoulLeech {
      get { return improvedSoulLeech_; }
      set {
        improvedSoulLeech_ = value;
      }
    }

    /// <summary>Field number for the "backdraft" field.</summary>
    public const int BackdraftFieldNumber = 77;
    private int backdraft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Backdraft {
      get { return backdraft_; }
      set {
        backdraft_ = value;
      }
    }

    /// <summary>Field number for the "shadowfury" field.</summary>
    public const int ShadowfuryFieldNumber = 78;
    private bool shadowfury_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Shadowfury {
      get { return shadowfury_; }
      set {
        shadowfury_ = value;
      }
    }

    /// <summary>Field number for the "empowered_imp" field.</summary>
    public const int EmpoweredImpFieldNumber = 79;
    private int empoweredImp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EmpoweredImp {
      get { return empoweredImp_; }
      set {
        empoweredImp_ = value;
      }
    }

    /// <summary>Field number for the "fire_and_brimstone" field.</summary>
    public const int FireAndBrimstoneFieldNumber = 80;
    private int fireAndBrimstone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FireAndBrimstone {
      get { return fireAndBrimstone_; }
      set {
        fireAndBrimstone_ = value;
      }
    }

    /// <summary>Field number for the "chaos_bolt" field.</summary>
    public const int ChaosBoltFieldNumber = 81;
    private bool chaosBolt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ChaosBolt {
      get { return chaosBolt_; }
      set {
        chaosBolt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WarlockTalents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WarlockTalents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImprovedCurseOfAgony != other.ImprovedCurseOfAgony) return false;
      if (Suppression != other.Suppression) return false;
      if (ImprovedCorruption != other.ImprovedCorruption) return false;
      if (ImprovedCurseOfWeakness != other.ImprovedCurseOfWeakness) return false;
      if (ImprovedDrainSoul != other.ImprovedDrainSoul) return false;
      if (ImprovedLifeTap != other.ImprovedLifeTap) return false;
      if (SoulSiphon != other.SoulSiphon) return false;
      if (ImprovedFear != other.ImprovedFear) return false;
      if (FelConcentration != other.FelConcentration) return false;
      if (AmplifyCurse != other.AmplifyCurse) return false;
      if (GrimReach != other.GrimReach) return false;
      if (Nightfall != other.Nightfall) return false;
      if (EmpoweredCorruption != other.EmpoweredCorruption) return false;
      if (ShadowEmbrace != other.ShadowEmbrace) return false;
      if (SiphonLife != other.SiphonLife) return false;
      if (CurseOfExhaustion != other.CurseOfExhaustion) return false;
      if (ImprovedFelhunter != other.ImprovedFelhunter) return false;
      if (ShadowMastery != other.ShadowMastery) return false;
      if (Eradication != other.Eradication) return false;
      if (Contagion != other.Contagion) return false;
      if (DarkPact != other.DarkPact) return false;
      if (ImprovedHowlOfTerror != other.ImprovedHowlOfTerror) return false;
      if (Malediction != other.Malediction) return false;
      if (DeathsEmbrace != other.DeathsEmbrace) return false;
      if (UnstableAffliction != other.UnstableAffliction) return false;
      if (Pandemic != other.Pandemic) return false;
      if (EverlastingAffliction != other.EverlastingAffliction) return false;
      if (Haunt != other.Haunt) return false;
      if (ImprovedHealthstone != other.ImprovedHealthstone) return false;
      if (ImprovedImp != other.ImprovedImp) return false;
      if (DemonicEmbrace != other.DemonicEmbrace) return false;
      if (FelSynergy != other.FelSynergy) return false;
      if (ImprovedHealthFunnel != other.ImprovedHealthFunnel) return false;
      if (DemonicBrutality != other.DemonicBrutality) return false;
      if (FelVitality != other.FelVitality) return false;
      if (ImprovedSayaad != other.ImprovedSayaad) return false;
      if (SoulLink != other.SoulLink) return false;
      if (FelDomination != other.FelDomination) return false;
      if (DemonicAegis != other.DemonicAegis) return false;
      if (UnholyPower != other.UnholyPower) return false;
      if (MasterSummoner != other.MasterSummoner) return false;
      if (ManaFeed != other.ManaFeed) return false;
      if (MasterConjuror != other.MasterConjuror) return false;
      if (MasterDemonologist != other.MasterDemonologist) return false;
      if (MoltenCore != other.MoltenCore) return false;
      if (DemonicResilience != other.DemonicResilience) return false;
      if (DemonicEmpowerment != other.DemonicEmpowerment) return false;
      if (DemonicKnowledge != other.DemonicKnowledge) return false;
      if (DemonicTactics != other.DemonicTactics) return false;
      if (Decimation != other.Decimation) return false;
      if (ImprovedDemonicTactics != other.ImprovedDemonicTactics) return false;
      if (SummonFelguard != other.SummonFelguard) return false;
      if (Nemesis != other.Nemesis) return false;
      if (DemonicPact != other.DemonicPact) return false;
      if (Metamorphosis != other.Metamorphosis) return false;
      if (ImprovedShadowBolt != other.ImprovedShadowBolt) return false;
      if (Bane != other.Bane) return false;
      if (Aftermath != other.Aftermath) return false;
      if (MoltenSkin != other.MoltenSkin) return false;
      if (Cataclysm != other.Cataclysm) return false;
      if (DemonicPower != other.DemonicPower) return false;
      if (Shadowburn != other.Shadowburn) return false;
      if (Ruin != other.Ruin) return false;
      if (Intensity != other.Intensity) return false;
      if (DestructiveReach != other.DestructiveReach) return false;
      if (ImprovedSearingPain != other.ImprovedSearingPain) return false;
      if (Backlash != other.Backlash) return false;
      if (ImprovedImmolate != other.ImprovedImmolate) return false;
      if (Devastation != other.Devastation) return false;
      if (NetherProtection != other.NetherProtection) return false;
      if (Emberstorm != other.Emberstorm) return false;
      if (Conflagrate != other.Conflagrate) return false;
      if (SoulLeech != other.SoulLeech) return false;
      if (Pyroclasm != other.Pyroclasm) return false;
      if (ShadowAndFlame != other.ShadowAndFlame) return false;
      if (ImprovedSoulLeech != other.ImprovedSoulLeech) return false;
      if (Backdraft != other.Backdraft) return false;
      if (Shadowfury != other.Shadowfury) return false;
      if (EmpoweredImp != other.EmpoweredImp) return false;
      if (FireAndBrimstone != other.FireAndBrimstone) return false;
      if (ChaosBolt != other.ChaosBolt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ImprovedCurseOfAgony != 0) hash ^= ImprovedCurseOfAgony.GetHashCode();
      if (Suppression != 0) hash ^= Suppression.GetHashCode();
      if (ImprovedCorruption != 0) hash ^= ImprovedCorruption.GetHashCode();
      if (ImprovedCurseOfWeakness != 0) hash ^= ImprovedCurseOfWeakness.GetHashCode();
      if (ImprovedDrainSoul != 0) hash ^= ImprovedDrainSoul.GetHashCode();
      if (ImprovedLifeTap != 0) hash ^= ImprovedLifeTap.GetHashCode();
      if (SoulSiphon != 0) hash ^= SoulSiphon.GetHashCode();
      if (ImprovedFear != 0) hash ^= ImprovedFear.GetHashCode();
      if (FelConcentration != 0) hash ^= FelConcentration.GetHashCode();
      if (AmplifyCurse != false) hash ^= AmplifyCurse.GetHashCode();
      if (GrimReach != 0) hash ^= GrimReach.GetHashCode();
      if (Nightfall != 0) hash ^= Nightfall.GetHashCode();
      if (EmpoweredCorruption != 0) hash ^= EmpoweredCorruption.GetHashCode();
      if (ShadowEmbrace != 0) hash ^= ShadowEmbrace.GetHashCode();
      if (SiphonLife != false) hash ^= SiphonLife.GetHashCode();
      if (CurseOfExhaustion != false) hash ^= CurseOfExhaustion.GetHashCode();
      if (ImprovedFelhunter != 0) hash ^= ImprovedFelhunter.GetHashCode();
      if (ShadowMastery != 0) hash ^= ShadowMastery.GetHashCode();
      if (Eradication != 0) hash ^= Eradication.GetHashCode();
      if (Contagion != 0) hash ^= Contagion.GetHashCode();
      if (DarkPact != false) hash ^= DarkPact.GetHashCode();
      if (ImprovedHowlOfTerror != 0) hash ^= ImprovedHowlOfTerror.GetHashCode();
      if (Malediction != 0) hash ^= Malediction.GetHashCode();
      if (DeathsEmbrace != 0) hash ^= DeathsEmbrace.GetHashCode();
      if (UnstableAffliction != false) hash ^= UnstableAffliction.GetHashCode();
      if (Pandemic != false) hash ^= Pandemic.GetHashCode();
      if (EverlastingAffliction != 0) hash ^= EverlastingAffliction.GetHashCode();
      if (Haunt != false) hash ^= Haunt.GetHashCode();
      if (ImprovedHealthstone != 0) hash ^= ImprovedHealthstone.GetHashCode();
      if (ImprovedImp != 0) hash ^= ImprovedImp.GetHashCode();
      if (DemonicEmbrace != 0) hash ^= DemonicEmbrace.GetHashCode();
      if (FelSynergy != 0) hash ^= FelSynergy.GetHashCode();
      if (ImprovedHealthFunnel != 0) hash ^= ImprovedHealthFunnel.GetHashCode();
      if (DemonicBrutality != 0) hash ^= DemonicBrutality.GetHashCode();
      if (FelVitality != 0) hash ^= FelVitality.GetHashCode();
      if (ImprovedSayaad != 0) hash ^= ImprovedSayaad.GetHashCode();
      if (SoulLink != false) hash ^= SoulLink.GetHashCode();
      if (FelDomination != false) hash ^= FelDomination.GetHashCode();
      if (DemonicAegis != 0) hash ^= DemonicAegis.GetHashCode();
      if (UnholyPower != 0) hash ^= UnholyPower.GetHashCode();
      if (MasterSummoner != 0) hash ^= MasterSummoner.GetHashCode();
      if (ManaFeed != false) hash ^= ManaFeed.GetHashCode();
      if (MasterConjuror != 0) hash ^= MasterConjuror.GetHashCode();
      if (MasterDemonologist != 0) hash ^= MasterDemonologist.GetHashCode();
      if (MoltenCore != 0) hash ^= MoltenCore.GetHashCode();
      if (DemonicResilience != 0) hash ^= DemonicResilience.GetHashCode();
      if (DemonicEmpowerment != false) hash ^= DemonicEmpowerment.GetHashCode();
      if (DemonicKnowledge != 0) hash ^= DemonicKnowledge.GetHashCode();
      if (DemonicTactics != 0) hash ^= DemonicTactics.GetHashCode();
      if (Decimation != 0) hash ^= Decimation.GetHashCode();
      if (ImprovedDemonicTactics != 0) hash ^= ImprovedDemonicTactics.GetHashCode();
      if (SummonFelguard != false) hash ^= SummonFelguard.GetHashCode();
      if (Nemesis != 0) hash ^= Nemesis.GetHashCode();
      if (DemonicPact != 0) hash ^= DemonicPact.GetHashCode();
      if (Metamorphosis != false) hash ^= Metamorphosis.GetHashCode();
      if (ImprovedShadowBolt != 0) hash ^= ImprovedShadowBolt.GetHashCode();
      if (Bane != 0) hash ^= Bane.GetHashCode();
      if (Aftermath != 0) hash ^= Aftermath.GetHashCode();
      if (MoltenSkin != 0) hash ^= MoltenSkin.GetHashCode();
      if (Cataclysm != 0) hash ^= Cataclysm.GetHashCode();
      if (DemonicPower != 0) hash ^= DemonicPower.GetHashCode();
      if (Shadowburn != false) hash ^= Shadowburn.GetHashCode();
      if (Ruin != 0) hash ^= Ruin.GetHashCode();
      if (Intensity != 0) hash ^= Intensity.GetHashCode();
      if (DestructiveReach != 0) hash ^= DestructiveReach.GetHashCode();
      if (ImprovedSearingPain != 0) hash ^= ImprovedSearingPain.GetHashCode();
      if (Backlash != 0) hash ^= Backlash.GetHashCode();
      if (ImprovedImmolate != 0) hash ^= ImprovedImmolate.GetHashCode();
      if (Devastation != false) hash ^= Devastation.GetHashCode();
      if (NetherProtection != 0) hash ^= NetherProtection.GetHashCode();
      if (Emberstorm != 0) hash ^= Emberstorm.GetHashCode();
      if (Conflagrate != false) hash ^= Conflagrate.GetHashCode();
      if (SoulLeech != 0) hash ^= SoulLeech.GetHashCode();
      if (Pyroclasm != 0) hash ^= Pyroclasm.GetHashCode();
      if (ShadowAndFlame != 0) hash ^= ShadowAndFlame.GetHashCode();
      if (ImprovedSoulLeech != 0) hash ^= ImprovedSoulLeech.GetHashCode();
      if (Backdraft != 0) hash ^= Backdraft.GetHashCode();
      if (Shadowfury != false) hash ^= Shadowfury.GetHashCode();
      if (EmpoweredImp != 0) hash ^= EmpoweredImp.GetHashCode();
      if (FireAndBrimstone != 0) hash ^= FireAndBrimstone.GetHashCode();
      if (ChaosBolt != false) hash ^= ChaosBolt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ImprovedCurseOfAgony != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ImprovedCurseOfAgony);
      }
      if (Suppression != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Suppression);
      }
      if (ImprovedCorruption != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ImprovedCorruption);
      }
      if (ImprovedCurseOfWeakness != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ImprovedCurseOfWeakness);
      }
      if (ImprovedDrainSoul != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ImprovedDrainSoul);
      }
      if (ImprovedLifeTap != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ImprovedLifeTap);
      }
      if (SoulSiphon != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SoulSiphon);
      }
      if (ImprovedFear != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ImprovedFear);
      }
      if (FelConcentration != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FelConcentration);
      }
      if (AmplifyCurse != false) {
        output.WriteRawTag(80);
        output.WriteBool(AmplifyCurse);
      }
      if (GrimReach != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(GrimReach);
      }
      if (Nightfall != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Nightfall);
      }
      if (EmpoweredCorruption != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(EmpoweredCorruption);
      }
      if (ShadowEmbrace != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ShadowEmbrace);
      }
      if (SiphonLife != false) {
        output.WriteRawTag(120);
        output.WriteBool(SiphonLife);
      }
      if (CurseOfExhaustion != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(CurseOfExhaustion);
      }
      if (ImprovedFelhunter != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ImprovedFelhunter);
      }
      if (ShadowMastery != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(ShadowMastery);
      }
      if (Eradication != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Eradication);
      }
      if (Contagion != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Contagion);
      }
      if (DarkPact != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(DarkPact);
      }
      if (ImprovedHowlOfTerror != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ImprovedHowlOfTerror);
      }
      if (Malediction != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Malediction);
      }
      if (DeathsEmbrace != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(DeathsEmbrace);
      }
      if (UnstableAffliction != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(UnstableAffliction);
      }
      if (Pandemic != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(Pandemic);
      }
      if (EverlastingAffliction != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(EverlastingAffliction);
      }
      if (Haunt != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(Haunt);
      }
      if (ImprovedHealthstone != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(ImprovedHealthstone);
      }
      if (ImprovedImp != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(ImprovedImp);
      }
      if (DemonicEmbrace != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(DemonicEmbrace);
      }
      if (FelSynergy != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(FelSynergy);
      }
      if (ImprovedHealthFunnel != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(ImprovedHealthFunnel);
      }
      if (DemonicBrutality != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(DemonicBrutality);
      }
      if (FelVitality != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(FelVitality);
      }
      if (ImprovedSayaad != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(ImprovedSayaad);
      }
      if (SoulLink != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(SoulLink);
      }
      if (FelDomination != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(FelDomination);
      }
      if (DemonicAegis != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(DemonicAegis);
      }
      if (UnholyPower != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(UnholyPower);
      }
      if (MasterSummoner != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(MasterSummoner);
      }
      if (ManaFeed != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(ManaFeed);
      }
      if (MasterConjuror != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(MasterConjuror);
      }
      if (MasterDemonologist != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(MasterDemonologist);
      }
      if (MoltenCore != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(MoltenCore);
      }
      if (DemonicResilience != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(DemonicResilience);
      }
      if (DemonicEmpowerment != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(DemonicEmpowerment);
      }
      if (DemonicKnowledge != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(DemonicKnowledge);
      }
      if (DemonicTactics != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(DemonicTactics);
      }
      if (Decimation != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(Decimation);
      }
      if (ImprovedDemonicTactics != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(ImprovedDemonicTactics);
      }
      if (SummonFelguard != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(SummonFelguard);
      }
      if (Nemesis != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(Nemesis);
      }
      if (DemonicPact != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(DemonicPact);
      }
      if (Metamorphosis != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(Metamorphosis);
      }
      if (ImprovedShadowBolt != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(ImprovedShadowBolt);
      }
      if (Bane != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(Bane);
      }
      if (Aftermath != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(Aftermath);
      }
      if (MoltenSkin != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(MoltenSkin);
      }
      if (Cataclysm != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(Cataclysm);
      }
      if (DemonicPower != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(DemonicPower);
      }
      if (Shadowburn != false) {
        output.WriteRawTag(240, 3);
        output.WriteBool(Shadowburn);
      }
      if (Ruin != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(Ruin);
      }
      if (Intensity != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(Intensity);
      }
      if (DestructiveReach != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(DestructiveReach);
      }
      if (ImprovedSearingPain != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(ImprovedSearingPain);
      }
      if (Backlash != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(Backlash);
      }
      if (ImprovedImmolate != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(ImprovedImmolate);
      }
      if (Devastation != false) {
        output.WriteRawTag(168, 4);
        output.WriteBool(Devastation);
      }
      if (NetherProtection != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(NetherProtection);
      }
      if (Emberstorm != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(Emberstorm);
      }
      if (Conflagrate != false) {
        output.WriteRawTag(192, 4);
        output.WriteBool(Conflagrate);
      }
      if (SoulLeech != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(SoulLeech);
      }
      if (Pyroclasm != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(Pyroclasm);
      }
      if (ShadowAndFlame != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(ShadowAndFlame);
      }
      if (ImprovedSoulLeech != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(ImprovedSoulLeech);
      }
      if (Backdraft != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(Backdraft);
      }
      if (Shadowfury != false) {
        output.WriteRawTag(240, 4);
        output.WriteBool(Shadowfury);
      }
      if (EmpoweredImp != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(EmpoweredImp);
      }
      if (FireAndBrimstone != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(FireAndBrimstone);
      }
      if (ChaosBolt != false) {
        output.WriteRawTag(136, 5);
        output.WriteBool(ChaosBolt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ImprovedCurseOfAgony != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ImprovedCurseOfAgony);
      }
      if (Suppression != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Suppression);
      }
      if (ImprovedCorruption != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ImprovedCorruption);
      }
      if (ImprovedCurseOfWeakness != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ImprovedCurseOfWeakness);
      }
      if (ImprovedDrainSoul != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ImprovedDrainSoul);
      }
      if (ImprovedLifeTap != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ImprovedLifeTap);
      }
      if (SoulSiphon != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SoulSiphon);
      }
      if (ImprovedFear != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ImprovedFear);
      }
      if (FelConcentration != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FelConcentration);
      }
      if (AmplifyCurse != false) {
        output.WriteRawTag(80);
        output.WriteBool(AmplifyCurse);
      }
      if (GrimReach != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(GrimReach);
      }
      if (Nightfall != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Nightfall);
      }
      if (EmpoweredCorruption != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(EmpoweredCorruption);
      }
      if (ShadowEmbrace != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ShadowEmbrace);
      }
      if (SiphonLife != false) {
        output.WriteRawTag(120);
        output.WriteBool(SiphonLife);
      }
      if (CurseOfExhaustion != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(CurseOfExhaustion);
      }
      if (ImprovedFelhunter != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ImprovedFelhunter);
      }
      if (ShadowMastery != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(ShadowMastery);
      }
      if (Eradication != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Eradication);
      }
      if (Contagion != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Contagion);
      }
      if (DarkPact != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(DarkPact);
      }
      if (ImprovedHowlOfTerror != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ImprovedHowlOfTerror);
      }
      if (Malediction != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Malediction);
      }
      if (DeathsEmbrace != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(DeathsEmbrace);
      }
      if (UnstableAffliction != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(UnstableAffliction);
      }
      if (Pandemic != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(Pandemic);
      }
      if (EverlastingAffliction != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(EverlastingAffliction);
      }
      if (Haunt != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(Haunt);
      }
      if (ImprovedHealthstone != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(ImprovedHealthstone);
      }
      if (ImprovedImp != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(ImprovedImp);
      }
      if (DemonicEmbrace != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(DemonicEmbrace);
      }
      if (FelSynergy != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(FelSynergy);
      }
      if (ImprovedHealthFunnel != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(ImprovedHealthFunnel);
      }
      if (DemonicBrutality != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(DemonicBrutality);
      }
      if (FelVitality != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(FelVitality);
      }
      if (ImprovedSayaad != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(ImprovedSayaad);
      }
      if (SoulLink != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(SoulLink);
      }
      if (FelDomination != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(FelDomination);
      }
      if (DemonicAegis != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(DemonicAegis);
      }
      if (UnholyPower != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(UnholyPower);
      }
      if (MasterSummoner != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(MasterSummoner);
      }
      if (ManaFeed != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(ManaFeed);
      }
      if (MasterConjuror != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(MasterConjuror);
      }
      if (MasterDemonologist != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(MasterDemonologist);
      }
      if (MoltenCore != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(MoltenCore);
      }
      if (DemonicResilience != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(DemonicResilience);
      }
      if (DemonicEmpowerment != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(DemonicEmpowerment);
      }
      if (DemonicKnowledge != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(DemonicKnowledge);
      }
      if (DemonicTactics != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(DemonicTactics);
      }
      if (Decimation != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(Decimation);
      }
      if (ImprovedDemonicTactics != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(ImprovedDemonicTactics);
      }
      if (SummonFelguard != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(SummonFelguard);
      }
      if (Nemesis != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(Nemesis);
      }
      if (DemonicPact != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(DemonicPact);
      }
      if (Metamorphosis != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(Metamorphosis);
      }
      if (ImprovedShadowBolt != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(ImprovedShadowBolt);
      }
      if (Bane != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(Bane);
      }
      if (Aftermath != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(Aftermath);
      }
      if (MoltenSkin != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(MoltenSkin);
      }
      if (Cataclysm != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(Cataclysm);
      }
      if (DemonicPower != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(DemonicPower);
      }
      if (Shadowburn != false) {
        output.WriteRawTag(240, 3);
        output.WriteBool(Shadowburn);
      }
      if (Ruin != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(Ruin);
      }
      if (Intensity != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(Intensity);
      }
      if (DestructiveReach != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(DestructiveReach);
      }
      if (ImprovedSearingPain != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(ImprovedSearingPain);
      }
      if (Backlash != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(Backlash);
      }
      if (ImprovedImmolate != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(ImprovedImmolate);
      }
      if (Devastation != false) {
        output.WriteRawTag(168, 4);
        output.WriteBool(Devastation);
      }
      if (NetherProtection != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(NetherProtection);
      }
      if (Emberstorm != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(Emberstorm);
      }
      if (Conflagrate != false) {
        output.WriteRawTag(192, 4);
        output.WriteBool(Conflagrate);
      }
      if (SoulLeech != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(SoulLeech);
      }
      if (Pyroclasm != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(Pyroclasm);
      }
      if (ShadowAndFlame != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(ShadowAndFlame);
      }
      if (ImprovedSoulLeech != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(ImprovedSoulLeech);
      }
      if (Backdraft != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(Backdraft);
      }
      if (Shadowfury != false) {
        output.WriteRawTag(240, 4);
        output.WriteBool(Shadowfury);
      }
      if (EmpoweredImp != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(EmpoweredImp);
      }
      if (FireAndBrimstone != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(FireAndBrimstone);
      }
      if (ChaosBolt != false) {
        output.WriteRawTag(136, 5);
        output.WriteBool(ChaosBolt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ImprovedCurseOfAgony != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedCurseOfAgony);
      }
      if (Suppression != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Suppression);
      }
      if (ImprovedCorruption != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedCorruption);
      }
      if (ImprovedCurseOfWeakness != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedCurseOfWeakness);
      }
      if (ImprovedDrainSoul != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedDrainSoul);
      }
      if (ImprovedLifeTap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedLifeTap);
      }
      if (SoulSiphon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoulSiphon);
      }
      if (ImprovedFear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedFear);
      }
      if (FelConcentration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FelConcentration);
      }
      if (AmplifyCurse != false) {
        size += 1 + 1;
      }
      if (GrimReach != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GrimReach);
      }
      if (Nightfall != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nightfall);
      }
      if (EmpoweredCorruption != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EmpoweredCorruption);
      }
      if (ShadowEmbrace != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShadowEmbrace);
      }
      if (SiphonLife != false) {
        size += 1 + 1;
      }
      if (CurseOfExhaustion != false) {
        size += 2 + 1;
      }
      if (ImprovedFelhunter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedFelhunter);
      }
      if (ShadowMastery != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShadowMastery);
      }
      if (Eradication != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Eradication);
      }
      if (Contagion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Contagion);
      }
      if (DarkPact != false) {
        size += 2 + 1;
      }
      if (ImprovedHowlOfTerror != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedHowlOfTerror);
      }
      if (Malediction != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Malediction);
      }
      if (DeathsEmbrace != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeathsEmbrace);
      }
      if (UnstableAffliction != false) {
        size += 2 + 1;
      }
      if (Pandemic != false) {
        size += 2 + 1;
      }
      if (EverlastingAffliction != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EverlastingAffliction);
      }
      if (Haunt != false) {
        size += 2 + 1;
      }
      if (ImprovedHealthstone != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedHealthstone);
      }
      if (ImprovedImp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedImp);
      }
      if (DemonicEmbrace != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DemonicEmbrace);
      }
      if (FelSynergy != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FelSynergy);
      }
      if (ImprovedHealthFunnel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedHealthFunnel);
      }
      if (DemonicBrutality != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DemonicBrutality);
      }
      if (FelVitality != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FelVitality);
      }
      if (ImprovedSayaad != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedSayaad);
      }
      if (SoulLink != false) {
        size += 2 + 1;
      }
      if (FelDomination != false) {
        size += 2 + 1;
      }
      if (DemonicAegis != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DemonicAegis);
      }
      if (UnholyPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnholyPower);
      }
      if (MasterSummoner != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MasterSummoner);
      }
      if (ManaFeed != false) {
        size += 2 + 1;
      }
      if (MasterConjuror != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MasterConjuror);
      }
      if (MasterDemonologist != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MasterDemonologist);
      }
      if (MoltenCore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MoltenCore);
      }
      if (DemonicResilience != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DemonicResilience);
      }
      if (DemonicEmpowerment != false) {
        size += 2 + 1;
      }
      if (DemonicKnowledge != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DemonicKnowledge);
      }
      if (DemonicTactics != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DemonicTactics);
      }
      if (Decimation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Decimation);
      }
      if (ImprovedDemonicTactics != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedDemonicTactics);
      }
      if (SummonFelguard != false) {
        size += 2 + 1;
      }
      if (Nemesis != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Nemesis);
      }
      if (DemonicPact != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DemonicPact);
      }
      if (Metamorphosis != false) {
        size += 2 + 1;
      }
      if (ImprovedShadowBolt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedShadowBolt);
      }
      if (Bane != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Bane);
      }
      if (Aftermath != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Aftermath);
      }
      if (MoltenSkin != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MoltenSkin);
      }
      if (Cataclysm != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Cataclysm);
      }
      if (DemonicPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DemonicPower);
      }
      if (Shadowburn != false) {
        size += 2 + 1;
      }
      if (Ruin != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ruin);
      }
      if (Intensity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Intensity);
      }
      if (DestructiveReach != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DestructiveReach);
      }
      if (ImprovedSearingPain != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedSearingPain);
      }
      if (Backlash != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Backlash);
      }
      if (ImprovedImmolate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedImmolate);
      }
      if (Devastation != false) {
        size += 2 + 1;
      }
      if (NetherProtection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NetherProtection);
      }
      if (Emberstorm != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Emberstorm);
      }
      if (Conflagrate != false) {
        size += 2 + 1;
      }
      if (SoulLeech != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SoulLeech);
      }
      if (Pyroclasm != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Pyroclasm);
      }
      if (ShadowAndFlame != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShadowAndFlame);
      }
      if (ImprovedSoulLeech != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedSoulLeech);
      }
      if (Backdraft != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Backdraft);
      }
      if (Shadowfury != false) {
        size += 2 + 1;
      }
      if (EmpoweredImp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EmpoweredImp);
      }
      if (FireAndBrimstone != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FireAndBrimstone);
      }
      if (ChaosBolt != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WarlockTalents other) {
      if (other == null) {
        return;
      }
      if (other.ImprovedCurseOfAgony != 0) {
        ImprovedCurseOfAgony = other.ImprovedCurseOfAgony;
      }
      if (other.Suppression != 0) {
        Suppression = other.Suppression;
      }
      if (other.ImprovedCorruption != 0) {
        ImprovedCorruption = other.ImprovedCorruption;
      }
      if (other.ImprovedCurseOfWeakness != 0) {
        ImprovedCurseOfWeakness = other.ImprovedCurseOfWeakness;
      }
      if (other.ImprovedDrainSoul != 0) {
        ImprovedDrainSoul = other.ImprovedDrainSoul;
      }
      if (other.ImprovedLifeTap != 0) {
        ImprovedLifeTap = other.ImprovedLifeTap;
      }
      if (other.SoulSiphon != 0) {
        SoulSiphon = other.SoulSiphon;
      }
      if (other.ImprovedFear != 0) {
        ImprovedFear = other.ImprovedFear;
      }
      if (other.FelConcentration != 0) {
        FelConcentration = other.FelConcentration;
      }
      if (other.AmplifyCurse != false) {
        AmplifyCurse = other.AmplifyCurse;
      }
      if (other.GrimReach != 0) {
        GrimReach = other.GrimReach;
      }
      if (other.Nightfall != 0) {
        Nightfall = other.Nightfall;
      }
      if (other.EmpoweredCorruption != 0) {
        EmpoweredCorruption = other.EmpoweredCorruption;
      }
      if (other.ShadowEmbrace != 0) {
        ShadowEmbrace = other.ShadowEmbrace;
      }
      if (other.SiphonLife != false) {
        SiphonLife = other.SiphonLife;
      }
      if (other.CurseOfExhaustion != false) {
        CurseOfExhaustion = other.CurseOfExhaustion;
      }
      if (other.ImprovedFelhunter != 0) {
        ImprovedFelhunter = other.ImprovedFelhunter;
      }
      if (other.ShadowMastery != 0) {
        ShadowMastery = other.ShadowMastery;
      }
      if (other.Eradication != 0) {
        Eradication = other.Eradication;
      }
      if (other.Contagion != 0) {
        Contagion = other.Contagion;
      }
      if (other.DarkPact != false) {
        DarkPact = other.DarkPact;
      }
      if (other.ImprovedHowlOfTerror != 0) {
        ImprovedHowlOfTerror = other.ImprovedHowlOfTerror;
      }
      if (other.Malediction != 0) {
        Malediction = other.Malediction;
      }
      if (other.DeathsEmbrace != 0) {
        DeathsEmbrace = other.DeathsEmbrace;
      }
      if (other.UnstableAffliction != false) {
        UnstableAffliction = other.UnstableAffliction;
      }
      if (other.Pandemic != false) {
        Pandemic = other.Pandemic;
      }
      if (other.EverlastingAffliction != 0) {
        EverlastingAffliction = other.EverlastingAffliction;
      }
      if (other.Haunt != false) {
        Haunt = other.Haunt;
      }
      if (other.ImprovedHealthstone != 0) {
        ImprovedHealthstone = other.ImprovedHealthstone;
      }
      if (other.ImprovedImp != 0) {
        ImprovedImp = other.ImprovedImp;
      }
      if (other.DemonicEmbrace != 0) {
        DemonicEmbrace = other.DemonicEmbrace;
      }
      if (other.FelSynergy != 0) {
        FelSynergy = other.FelSynergy;
      }
      if (other.ImprovedHealthFunnel != 0) {
        ImprovedHealthFunnel = other.ImprovedHealthFunnel;
      }
      if (other.DemonicBrutality != 0) {
        DemonicBrutality = other.DemonicBrutality;
      }
      if (other.FelVitality != 0) {
        FelVitality = other.FelVitality;
      }
      if (other.ImprovedSayaad != 0) {
        ImprovedSayaad = other.ImprovedSayaad;
      }
      if (other.SoulLink != false) {
        SoulLink = other.SoulLink;
      }
      if (other.FelDomination != false) {
        FelDomination = other.FelDomination;
      }
      if (other.DemonicAegis != 0) {
        DemonicAegis = other.DemonicAegis;
      }
      if (other.UnholyPower != 0) {
        UnholyPower = other.UnholyPower;
      }
      if (other.MasterSummoner != 0) {
        MasterSummoner = other.MasterSummoner;
      }
      if (other.ManaFeed != false) {
        ManaFeed = other.ManaFeed;
      }
      if (other.MasterConjuror != 0) {
        MasterConjuror = other.MasterConjuror;
      }
      if (other.MasterDemonologist != 0) {
        MasterDemonologist = other.MasterDemonologist;
      }
      if (other.MoltenCore != 0) {
        MoltenCore = other.MoltenCore;
      }
      if (other.DemonicResilience != 0) {
        DemonicResilience = other.DemonicResilience;
      }
      if (other.DemonicEmpowerment != false) {
        DemonicEmpowerment = other.DemonicEmpowerment;
      }
      if (other.DemonicKnowledge != 0) {
        DemonicKnowledge = other.DemonicKnowledge;
      }
      if (other.DemonicTactics != 0) {
        DemonicTactics = other.DemonicTactics;
      }
      if (other.Decimation != 0) {
        Decimation = other.Decimation;
      }
      if (other.ImprovedDemonicTactics != 0) {
        ImprovedDemonicTactics = other.ImprovedDemonicTactics;
      }
      if (other.SummonFelguard != false) {
        SummonFelguard = other.SummonFelguard;
      }
      if (other.Nemesis != 0) {
        Nemesis = other.Nemesis;
      }
      if (other.DemonicPact != 0) {
        DemonicPact = other.DemonicPact;
      }
      if (other.Metamorphosis != false) {
        Metamorphosis = other.Metamorphosis;
      }
      if (other.ImprovedShadowBolt != 0) {
        ImprovedShadowBolt = other.ImprovedShadowBolt;
      }
      if (other.Bane != 0) {
        Bane = other.Bane;
      }
      if (other.Aftermath != 0) {
        Aftermath = other.Aftermath;
      }
      if (other.MoltenSkin != 0) {
        MoltenSkin = other.MoltenSkin;
      }
      if (other.Cataclysm != 0) {
        Cataclysm = other.Cataclysm;
      }
      if (other.DemonicPower != 0) {
        DemonicPower = other.DemonicPower;
      }
      if (other.Shadowburn != false) {
        Shadowburn = other.Shadowburn;
      }
      if (other.Ruin != 0) {
        Ruin = other.Ruin;
      }
      if (other.Intensity != 0) {
        Intensity = other.Intensity;
      }
      if (other.DestructiveReach != 0) {
        DestructiveReach = other.DestructiveReach;
      }
      if (other.ImprovedSearingPain != 0) {
        ImprovedSearingPain = other.ImprovedSearingPain;
      }
      if (other.Backlash != 0) {
        Backlash = other.Backlash;
      }
      if (other.ImprovedImmolate != 0) {
        ImprovedImmolate = other.ImprovedImmolate;
      }
      if (other.Devastation != false) {
        Devastation = other.Devastation;
      }
      if (other.NetherProtection != 0) {
        NetherProtection = other.NetherProtection;
      }
      if (other.Emberstorm != 0) {
        Emberstorm = other.Emberstorm;
      }
      if (other.Conflagrate != false) {
        Conflagrate = other.Conflagrate;
      }
      if (other.SoulLeech != 0) {
        SoulLeech = other.SoulLeech;
      }
      if (other.Pyroclasm != 0) {
        Pyroclasm = other.Pyroclasm;
      }
      if (other.ShadowAndFlame != 0) {
        ShadowAndFlame = other.ShadowAndFlame;
      }
      if (other.ImprovedSoulLeech != 0) {
        ImprovedSoulLeech = other.ImprovedSoulLeech;
      }
      if (other.Backdraft != 0) {
        Backdraft = other.Backdraft;
      }
      if (other.Shadowfury != false) {
        Shadowfury = other.Shadowfury;
      }
      if (other.EmpoweredImp != 0) {
        EmpoweredImp = other.EmpoweredImp;
      }
      if (other.FireAndBrimstone != 0) {
        FireAndBrimstone = other.FireAndBrimstone;
      }
      if (other.ChaosBolt != false) {
        ChaosBolt = other.ChaosBolt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ImprovedCurseOfAgony = input.ReadInt32();
            break;
          }
          case 16: {
            Suppression = input.ReadInt32();
            break;
          }
          case 24: {
            ImprovedCorruption = input.ReadInt32();
            break;
          }
          case 32: {
            ImprovedCurseOfWeakness = input.ReadInt32();
            break;
          }
          case 40: {
            ImprovedDrainSoul = input.ReadInt32();
            break;
          }
          case 48: {
            ImprovedLifeTap = input.ReadInt32();
            break;
          }
          case 56: {
            SoulSiphon = input.ReadInt32();
            break;
          }
          case 64: {
            ImprovedFear = input.ReadInt32();
            break;
          }
          case 72: {
            FelConcentration = input.ReadInt32();
            break;
          }
          case 80: {
            AmplifyCurse = input.ReadBool();
            break;
          }
          case 88: {
            GrimReach = input.ReadInt32();
            break;
          }
          case 96: {
            Nightfall = input.ReadInt32();
            break;
          }
          case 104: {
            EmpoweredCorruption = input.ReadInt32();
            break;
          }
          case 112: {
            ShadowEmbrace = input.ReadInt32();
            break;
          }
          case 120: {
            SiphonLife = input.ReadBool();
            break;
          }
          case 128: {
            CurseOfExhaustion = input.ReadBool();
            break;
          }
          case 136: {
            ImprovedFelhunter = input.ReadInt32();
            break;
          }
          case 144: {
            ShadowMastery = input.ReadInt32();
            break;
          }
          case 152: {
            Eradication = input.ReadInt32();
            break;
          }
          case 160: {
            Contagion = input.ReadInt32();
            break;
          }
          case 168: {
            DarkPact = input.ReadBool();
            break;
          }
          case 176: {
            ImprovedHowlOfTerror = input.ReadInt32();
            break;
          }
          case 184: {
            Malediction = input.ReadInt32();
            break;
          }
          case 192: {
            DeathsEmbrace = input.ReadInt32();
            break;
          }
          case 200: {
            UnstableAffliction = input.ReadBool();
            break;
          }
          case 208: {
            Pandemic = input.ReadBool();
            break;
          }
          case 216: {
            EverlastingAffliction = input.ReadInt32();
            break;
          }
          case 224: {
            Haunt = input.ReadBool();
            break;
          }
          case 232: {
            ImprovedHealthstone = input.ReadInt32();
            break;
          }
          case 240: {
            ImprovedImp = input.ReadInt32();
            break;
          }
          case 248: {
            DemonicEmbrace = input.ReadInt32();
            break;
          }
          case 256: {
            FelSynergy = input.ReadInt32();
            break;
          }
          case 264: {
            ImprovedHealthFunnel = input.ReadInt32();
            break;
          }
          case 272: {
            DemonicBrutality = input.ReadInt32();
            break;
          }
          case 280: {
            FelVitality = input.ReadInt32();
            break;
          }
          case 288: {
            ImprovedSayaad = input.ReadInt32();
            break;
          }
          case 296: {
            SoulLink = input.ReadBool();
            break;
          }
          case 304: {
            FelDomination = input.ReadBool();
            break;
          }
          case 312: {
            DemonicAegis = input.ReadInt32();
            break;
          }
          case 320: {
            UnholyPower = input.ReadInt32();
            break;
          }
          case 328: {
            MasterSummoner = input.ReadInt32();
            break;
          }
          case 336: {
            ManaFeed = input.ReadBool();
            break;
          }
          case 344: {
            MasterConjuror = input.ReadInt32();
            break;
          }
          case 352: {
            MasterDemonologist = input.ReadInt32();
            break;
          }
          case 360: {
            MoltenCore = input.ReadInt32();
            break;
          }
          case 368: {
            DemonicResilience = input.ReadInt32();
            break;
          }
          case 376: {
            DemonicEmpowerment = input.ReadBool();
            break;
          }
          case 384: {
            DemonicKnowledge = input.ReadInt32();
            break;
          }
          case 392: {
            DemonicTactics = input.ReadInt32();
            break;
          }
          case 400: {
            Decimation = input.ReadInt32();
            break;
          }
          case 408: {
            ImprovedDemonicTactics = input.ReadInt32();
            break;
          }
          case 416: {
            SummonFelguard = input.ReadBool();
            break;
          }
          case 424: {
            Nemesis = input.ReadInt32();
            break;
          }
          case 432: {
            DemonicPact = input.ReadInt32();
            break;
          }
          case 440: {
            Metamorphosis = input.ReadBool();
            break;
          }
          case 448: {
            ImprovedShadowBolt = input.ReadInt32();
            break;
          }
          case 456: {
            Bane = input.ReadInt32();
            break;
          }
          case 464: {
            Aftermath = input.ReadInt32();
            break;
          }
          case 472: {
            MoltenSkin = input.ReadInt32();
            break;
          }
          case 480: {
            Cataclysm = input.ReadInt32();
            break;
          }
          case 488: {
            DemonicPower = input.ReadInt32();
            break;
          }
          case 496: {
            Shadowburn = input.ReadBool();
            break;
          }
          case 504: {
            Ruin = input.ReadInt32();
            break;
          }
          case 512: {
            Intensity = input.ReadInt32();
            break;
          }
          case 520: {
            DestructiveReach = input.ReadInt32();
            break;
          }
          case 528: {
            ImprovedSearingPain = input.ReadInt32();
            break;
          }
          case 536: {
            Backlash = input.ReadInt32();
            break;
          }
          case 544: {
            ImprovedImmolate = input.ReadInt32();
            break;
          }
          case 552: {
            Devastation = input.ReadBool();
            break;
          }
          case 560: {
            NetherProtection = input.ReadInt32();
            break;
          }
          case 568: {
            Emberstorm = input.ReadInt32();
            break;
          }
          case 576: {
            Conflagrate = input.ReadBool();
            break;
          }
          case 584: {
            SoulLeech = input.ReadInt32();
            break;
          }
          case 592: {
            Pyroclasm = input.ReadInt32();
            break;
          }
          case 600: {
            ShadowAndFlame = input.ReadInt32();
            break;
          }
          case 608: {
            ImprovedSoulLeech = input.ReadInt32();
            break;
          }
          case 616: {
            Backdraft = input.ReadInt32();
            break;
          }
          case 624: {
            Shadowfury = input.ReadBool();
            break;
          }
          case 632: {
            EmpoweredImp = input.ReadInt32();
            break;
          }
          case 640: {
            FireAndBrimstone = input.ReadInt32();
            break;
          }
          case 648: {
            ChaosBolt = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ImprovedCurseOfAgony = input.ReadInt32();
            break;
          }
          case 16: {
            Suppression = input.ReadInt32();
            break;
          }
          case 24: {
            ImprovedCorruption = input.ReadInt32();
            break;
          }
          case 32: {
            ImprovedCurseOfWeakness = input.ReadInt32();
            break;
          }
          case 40: {
            ImprovedDrainSoul = input.ReadInt32();
            break;
          }
          case 48: {
            ImprovedLifeTap = input.ReadInt32();
            break;
          }
          case 56: {
            SoulSiphon = input.ReadInt32();
            break;
          }
          case 64: {
            ImprovedFear = input.ReadInt32();
            break;
          }
          case 72: {
            FelConcentration = input.ReadInt32();
            break;
          }
          case 80: {
            AmplifyCurse = input.ReadBool();
            break;
          }
          case 88: {
            GrimReach = input.ReadInt32();
            break;
          }
          case 96: {
            Nightfall = input.ReadInt32();
            break;
          }
          case 104: {
            EmpoweredCorruption = input.ReadInt32();
            break;
          }
          case 112: {
            ShadowEmbrace = input.ReadInt32();
            break;
          }
          case 120: {
            SiphonLife = input.ReadBool();
            break;
          }
          case 128: {
            CurseOfExhaustion = input.ReadBool();
            break;
          }
          case 136: {
            ImprovedFelhunter = input.ReadInt32();
            break;
          }
          case 144: {
            ShadowMastery = input.ReadInt32();
            break;
          }
          case 152: {
            Eradication = input.ReadInt32();
            break;
          }
          case 160: {
            Contagion = input.ReadInt32();
            break;
          }
          case 168: {
            DarkPact = input.ReadBool();
            break;
          }
          case 176: {
            ImprovedHowlOfTerror = input.ReadInt32();
            break;
          }
          case 184: {
            Malediction = input.ReadInt32();
            break;
          }
          case 192: {
            DeathsEmbrace = input.ReadInt32();
            break;
          }
          case 200: {
            UnstableAffliction = input.ReadBool();
            break;
          }
          case 208: {
            Pandemic = input.ReadBool();
            break;
          }
          case 216: {
            EverlastingAffliction = input.ReadInt32();
            break;
          }
          case 224: {
            Haunt = input.ReadBool();
            break;
          }
          case 232: {
            ImprovedHealthstone = input.ReadInt32();
            break;
          }
          case 240: {
            ImprovedImp = input.ReadInt32();
            break;
          }
          case 248: {
            DemonicEmbrace = input.ReadInt32();
            break;
          }
          case 256: {
            FelSynergy = input.ReadInt32();
            break;
          }
          case 264: {
            ImprovedHealthFunnel = input.ReadInt32();
            break;
          }
          case 272: {
            DemonicBrutality = input.ReadInt32();
            break;
          }
          case 280: {
            FelVitality = input.ReadInt32();
            break;
          }
          case 288: {
            ImprovedSayaad = input.ReadInt32();
            break;
          }
          case 296: {
            SoulLink = input.ReadBool();
            break;
          }
          case 304: {
            FelDomination = input.ReadBool();
            break;
          }
          case 312: {
            DemonicAegis = input.ReadInt32();
            break;
          }
          case 320: {
            UnholyPower = input.ReadInt32();
            break;
          }
          case 328: {
            MasterSummoner = input.ReadInt32();
            break;
          }
          case 336: {
            ManaFeed = input.ReadBool();
            break;
          }
          case 344: {
            MasterConjuror = input.ReadInt32();
            break;
          }
          case 352: {
            MasterDemonologist = input.ReadInt32();
            break;
          }
          case 360: {
            MoltenCore = input.ReadInt32();
            break;
          }
          case 368: {
            DemonicResilience = input.ReadInt32();
            break;
          }
          case 376: {
            DemonicEmpowerment = input.ReadBool();
            break;
          }
          case 384: {
            DemonicKnowledge = input.ReadInt32();
            break;
          }
          case 392: {
            DemonicTactics = input.ReadInt32();
            break;
          }
          case 400: {
            Decimation = input.ReadInt32();
            break;
          }
          case 408: {
            ImprovedDemonicTactics = input.ReadInt32();
            break;
          }
          case 416: {
            SummonFelguard = input.ReadBool();
            break;
          }
          case 424: {
            Nemesis = input.ReadInt32();
            break;
          }
          case 432: {
            DemonicPact = input.ReadInt32();
            break;
          }
          case 440: {
            Metamorphosis = input.ReadBool();
            break;
          }
          case 448: {
            ImprovedShadowBolt = input.ReadInt32();
            break;
          }
          case 456: {
            Bane = input.ReadInt32();
            break;
          }
          case 464: {
            Aftermath = input.ReadInt32();
            break;
          }
          case 472: {
            MoltenSkin = input.ReadInt32();
            break;
          }
          case 480: {
            Cataclysm = input.ReadInt32();
            break;
          }
          case 488: {
            DemonicPower = input.ReadInt32();
            break;
          }
          case 496: {
            Shadowburn = input.ReadBool();
            break;
          }
          case 504: {
            Ruin = input.ReadInt32();
            break;
          }
          case 512: {
            Intensity = input.ReadInt32();
            break;
          }
          case 520: {
            DestructiveReach = input.ReadInt32();
            break;
          }
          case 528: {
            ImprovedSearingPain = input.ReadInt32();
            break;
          }
          case 536: {
            Backlash = input.ReadInt32();
            break;
          }
          case 544: {
            ImprovedImmolate = input.ReadInt32();
            break;
          }
          case 552: {
            Devastation = input.ReadBool();
            break;
          }
          case 560: {
            NetherProtection = input.ReadInt32();
            break;
          }
          case 568: {
            Emberstorm = input.ReadInt32();
            break;
          }
          case 576: {
            Conflagrate = input.ReadBool();
            break;
          }
          case 584: {
            SoulLeech = input.ReadInt32();
            break;
          }
          case 592: {
            Pyroclasm = input.ReadInt32();
            break;
          }
          case 600: {
            ShadowAndFlame = input.ReadInt32();
            break;
          }
          case 608: {
            ImprovedSoulLeech = input.ReadInt32();
            break;
          }
          case 616: {
            Backdraft = input.ReadInt32();
            break;
          }
          case 624: {
            Shadowfury = input.ReadBool();
            break;
          }
          case 632: {
            EmpoweredImp = input.ReadInt32();
            break;
          }
          case 640: {
            FireAndBrimstone = input.ReadInt32();
            break;
          }
          case 648: {
            ChaosBolt = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Warlock : pb::IMessage<Warlock>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Warlock> _parser = new pb::MessageParser<Warlock>(() => new Warlock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Warlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.WarlockReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Warlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Warlock(Warlock other) : this() {
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Warlock Clone() {
      return new Warlock(this);
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::SirusDbScrapper.UIDatabase.Warlock.Types.Options options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SirusDbScrapper.UIDatabase.Warlock.Types.Options Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Warlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Warlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Warlock other) {
      if (other == null) {
        return;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::SirusDbScrapper.UIDatabase.Warlock.Types.Options();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.Warlock.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.Warlock.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Warlock message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Rotation : pb::IMessage<Rotation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Rotation> _parser = new pb::MessageParser<Rotation>(() => new Rotation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Rotation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.Warlock.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation(Rotation other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation Clone() {
          return new Rotation(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Rotation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Rotation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Rotation other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

      public sealed partial class Options : pb::IMessage<Options>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Options> _parser = new pb::MessageParser<Options>(() => new Options());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Options> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.Warlock.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options(Options other) : this() {
          armor_ = other.armor_;
          summon_ = other.summon_;
          weaponImbue_ = other.weaponImbue_;
          OldDPBehaviourOption_ = other.OldDPBehaviourOption_;
          detonateSeed_ = other.detonateSeed_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options Clone() {
          return new Options(this);
        }

        /// <summary>Field number for the "armor" field.</summary>
        public const int ArmorFieldNumber = 1;
        private global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Armor armor_ = global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Armor.NoArmor;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Armor Armor {
          get { return armor_; }
          set {
            armor_ = value;
          }
        }

        /// <summary>Field number for the "summon" field.</summary>
        public const int SummonFieldNumber = 2;
        private global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Summon summon_ = global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Summon.NoSummon;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Summon Summon {
          get { return summon_; }
          set {
            summon_ = value;
          }
        }

        /// <summary>Field number for the "weaponImbue" field.</summary>
        public const int WeaponImbueFieldNumber = 3;
        private global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.WeaponImbue weaponImbue_ = global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.WeaponImbue.NoWeaponImbue;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.WeaponImbue WeaponImbue {
          get { return weaponImbue_; }
          set {
            weaponImbue_ = value;
          }
        }

        /// <summary>Field number for the "_oldDPBehaviourOption" field.</summary>
        public const int OldDPBehaviourOptionFieldNumber = 4;
        private bool OldDPBehaviourOption_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool OldDPBehaviourOption {
          get { return OldDPBehaviourOption_; }
          set {
            OldDPBehaviourOption_ = value;
          }
        }

        /// <summary>Field number for the "detonate_seed" field.</summary>
        public const int DetonateSeedFieldNumber = 5;
        private bool detonateSeed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool DetonateSeed {
          get { return detonateSeed_; }
          set {
            detonateSeed_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Options);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Options other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Armor != other.Armor) return false;
          if (Summon != other.Summon) return false;
          if (WeaponImbue != other.WeaponImbue) return false;
          if (OldDPBehaviourOption != other.OldDPBehaviourOption) return false;
          if (DetonateSeed != other.DetonateSeed) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Armor != global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Armor.NoArmor) hash ^= Armor.GetHashCode();
          if (Summon != global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Summon.NoSummon) hash ^= Summon.GetHashCode();
          if (WeaponImbue != global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.WeaponImbue.NoWeaponImbue) hash ^= WeaponImbue.GetHashCode();
          if (OldDPBehaviourOption != false) hash ^= OldDPBehaviourOption.GetHashCode();
          if (DetonateSeed != false) hash ^= DetonateSeed.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Armor != global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Armor.NoArmor) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Armor);
          }
          if (Summon != global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Summon.NoSummon) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Summon);
          }
          if (WeaponImbue != global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.WeaponImbue.NoWeaponImbue) {
            output.WriteRawTag(24);
            output.WriteEnum((int) WeaponImbue);
          }
          if (OldDPBehaviourOption != false) {
            output.WriteRawTag(32);
            output.WriteBool(OldDPBehaviourOption);
          }
          if (DetonateSeed != false) {
            output.WriteRawTag(40);
            output.WriteBool(DetonateSeed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Armor != global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Armor.NoArmor) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Armor);
          }
          if (Summon != global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Summon.NoSummon) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Summon);
          }
          if (WeaponImbue != global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.WeaponImbue.NoWeaponImbue) {
            output.WriteRawTag(24);
            output.WriteEnum((int) WeaponImbue);
          }
          if (OldDPBehaviourOption != false) {
            output.WriteRawTag(32);
            output.WriteBool(OldDPBehaviourOption);
          }
          if (DetonateSeed != false) {
            output.WriteRawTag(40);
            output.WriteBool(DetonateSeed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Armor != global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Armor.NoArmor) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Armor);
          }
          if (Summon != global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Summon.NoSummon) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Summon);
          }
          if (WeaponImbue != global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.WeaponImbue.NoWeaponImbue) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WeaponImbue);
          }
          if (OldDPBehaviourOption != false) {
            size += 1 + 1;
          }
          if (DetonateSeed != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Options other) {
          if (other == null) {
            return;
          }
          if (other.Armor != global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Armor.NoArmor) {
            Armor = other.Armor;
          }
          if (other.Summon != global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Summon.NoSummon) {
            Summon = other.Summon;
          }
          if (other.WeaponImbue != global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.WeaponImbue.NoWeaponImbue) {
            WeaponImbue = other.WeaponImbue;
          }
          if (other.OldDPBehaviourOption != false) {
            OldDPBehaviourOption = other.OldDPBehaviourOption;
          }
          if (other.DetonateSeed != false) {
            DetonateSeed = other.DetonateSeed;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Armor = (global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Armor) input.ReadEnum();
                break;
              }
              case 16: {
                Summon = (global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Summon) input.ReadEnum();
                break;
              }
              case 24: {
                WeaponImbue = (global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.WeaponImbue) input.ReadEnum();
                break;
              }
              case 32: {
                OldDPBehaviourOption = input.ReadBool();
                break;
              }
              case 40: {
                DetonateSeed = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Armor = (global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Armor) input.ReadEnum();
                break;
              }
              case 16: {
                Summon = (global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.Summon) input.ReadEnum();
                break;
              }
              case 24: {
                WeaponImbue = (global::SirusDbScrapper.UIDatabase.Warlock.Types.Options.Types.WeaponImbue) input.ReadEnum();
                break;
              }
              case 32: {
                OldDPBehaviourOption = input.ReadBool();
                break;
              }
              case 40: {
                DetonateSeed = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Options message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public enum Summon {
            [pbr::OriginalName("NoSummon")] NoSummon = 0,
            [pbr::OriginalName("Imp")] Imp = 1,
            [pbr::OriginalName("Voidwalker")] Voidwalker = 2,
            [pbr::OriginalName("Succubus")] Succubus = 3,
            [pbr::OriginalName("Felhunter")] Felhunter = 4,
            [pbr::OriginalName("Felguard")] Felguard = 5,
          }

          public enum Armor {
            [pbr::OriginalName("NoArmor")] NoArmor = 0,
            [pbr::OriginalName("FelArmor")] FelArmor = 1,
            [pbr::OriginalName("DemonArmor")] DemonArmor = 2,
          }

          public enum WeaponImbue {
            [pbr::OriginalName("NoWeaponImbue")] NoWeaponImbue = 0,
            [pbr::OriginalName("GrandSpellstone")] GrandSpellstone = 1,
            [pbr::OriginalName("GrandFirestone")] GrandFirestone = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
