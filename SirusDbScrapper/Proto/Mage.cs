// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SirusDbScrapper.UIDatabase {

  /// <summary>Holder for reflection information generated from mage.proto</summary>
  public static partial class MageReflection {

    #region Descriptor
    /// <summary>File descriptor for mage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgptYWdlLnByb3RvEgVwcm90bxoMY29tbW9uLnByb3RvIvsPCgtNYWdlVGFs",
            "ZW50cxIXCg9hcmNhbmVfc3VidGxldHkYASABKAUSFAoMYXJjYW5lX2ZvY3Vz",
            "GAIgASgFEhgKEGFyY2FuZV9zdGFiaWxpdHkYAyABKAUSGAoQYXJjYW5lX2Zv",
            "cnRpdHVkZRgEIAEoBRIYChBtYWdpY19hYnNvcnB0aW9uGAUgASgFEhwKFGFy",
            "Y2FuZV9jb25jZW50cmF0aW9uGAYgASgFEhgKEG1hZ2ljX2F0dHVuZW1lbnQY",
            "ByABKAUSFAoMc3BlbGxfaW1wYWN0GAggASgFEhsKE3N0dWRlbnRfb2ZfdGhl",
            "X21pbmQYCSABKAUSEwoLZm9jdXNfbWFnaWMYCiABKAgSGAoQYXJjYW5lX3No",
            "aWVsZGluZxgLIAEoBRIdChVpbXByb3ZlZF9jb3VudGVyc3BlbGwYDCABKAUS",
            "GQoRYXJjYW5lX21lZGl0YXRpb24YDSABKAUSGAoQdG9ybWVudF90aGVfd2Vh",
            "axgOIAEoBRIWCg5pbXByb3ZlZF9ibGluaxgPIAEoBRIYChBwcmVzZW5jZV9v",
            "Zl9taW5kGBAgASgIEhMKC2FyY2FuZV9taW5kGBEgASgFEhcKD3ByaXNtYXRp",
            "Y19jbG9haxgSIAEoBRIaChJhcmNhbmVfaW5zdGFiaWxpdHkYEyABKAUSFgoO",
            "YXJjYW5lX3BvdGVuY3kYFCABKAUSGgoSYXJjYW5lX2VtcG93ZXJtZW50GBUg",
            "ASgFEhQKDGFyY2FuZV9wb3dlchgWIAEoCBIcChRpbmNhbnRlcnNfYWJzb3Jw",
            "dGlvbhgXIAEoBRIUCgxhcmNhbmVfZmxvd3MYGCABKAUSFAoMbWluZF9tYXN0",
            "ZXJ5GBkgASgFEgwKBHNsb3cYGiABKAgSFwoPbWlzc2lsZV9iYXJyYWdlGBsg",
            "ASgFEhsKE25ldGhlcndpbmRfcHJlc2VuY2UYHCABKAUSEwoLc3BlbGxfcG93",
            "ZXIYHSABKAUSFgoOYXJjYW5lX2JhcnJhZ2UYHiABKAgSGwoTaW1wcm92ZWRf",
            "ZmlyZV9ibGFzdBgfIAEoBRIUCgxpbmNpbmVyYXRpb24YICABKAUSGQoRaW1w",
            "cm92ZWRfZmlyZWJhbGwYISABKAUSDgoGaWduaXRlGCIgASgFEh0KFWJ1cm5p",
            "bmdfZGV0ZXJtaW5hdGlvbhgjIAEoBRIXCg93b3JsZF9pbl9mbGFtZXMYJCAB",
            "KAUSFgoOZmxhbWVfdGhyb3dpbmcYJSABKAUSDgoGaW1wYWN0GCYgASgFEhEK",
            "CXB5cm9ibGFzdBgnIAEoCBIUCgxidXJuaW5nX3NvdWwYKCABKAUSFwoPaW1w",
            "cm92ZWRfc2NvcmNoGCkgASgFEhYKDm1vbHRlbl9zaGllbGRzGCogASgFEhoK",
            "Em1hc3Rlcl9vZl9lbGVtZW50cxgrIAEoBRIZChFwbGF5aW5nX3dpdGhfZmly",
            "ZRgsIAEoBRIVCg1jcml0aWNhbF9tYXNzGC0gASgFEhIKCmJsYXN0X3dhdmUY",
            "LiABKAgSFQoNYmxhemluZ19zcGVlZBgvIAEoBRISCgpmaXJlX3Bvd2VyGDAg",
            "ASgFEhIKCnB5cm9tYW5pYWMYMSABKAUSEgoKY29tYnVzdGlvbhgyIAEoCBIT",
            "Cgttb2x0ZW5fZnVyeRgzIAEoBRIVCg1maWVyeV9wYXliYWNrGDQgASgFEhYK",
            "DmVtcG93ZXJlZF9maXJlGDUgASgFEhMKC2ZpcmVzdGFydGVyGDYgASgFEhYK",
            "DmRyYWdvbnNfYnJlYXRoGDcgASgIEhIKCmhvdF9zdHJlYWsYOCABKAUSDwoH",
            "YnVybm91dBg5IAEoBRITCgtsaXZpbmdfYm9tYhg6IAEoCBIRCglmcm9zdGJp",
            "dGUYOyABKAUSGgoSaW1wcm92ZWRfZnJvc3Rib2x0GDwgASgFEhEKCWljZV9m",
            "bG9lcxg9IAEoBRISCgppY2Vfc2hhcmRzGD4gASgFEhUKDWZyb3N0X3dhcmRp",
            "bmcYPyABKAUSEQoJcHJlY2lzaW9uGEAgASgFEhIKCnBlcm1hZnJvc3QYQSAB",
            "KAUSFAoMcGllcmNpbmdfaWNlGEIgASgFEhEKCWljeV92ZWlucxhDIAEoCBIZ",
            "ChFpbXByb3ZlZF9ibGl6emFyZBhEIAEoBRIUCgxhcmN0aWNfcmVhY2gYRSAB",
            "KAUSGAoQZnJvc3RfY2hhbm5lbGluZxhGIAEoBRIPCgdzaGF0dGVyGEcgASgF",
            "EhEKCWNvbGRfc25hcBhIIAEoCBIdChVpbXByb3ZlZF9jb25lX29mX2NvbGQY",
            "SSABKAUSEwoLZnJvemVuX2NvcmUYSiABKAUSEwoLY29sZF9hc19pY2UYSyAB",
            "KAUSFQoNd2ludGVyc19jaGlsbBhMIAEoBRIZChFzaGF0dGVyZWRfYmFycmll",
            "chhNIAEoBRITCgtpY2VfYmFycmllchhOIAEoCBIUCgxhcmN0aWNfd2luZHMY",
            "TyABKAUSGwoTZW1wb3dlcmVkX2Zyb3N0Ym9sdBhQIAEoBRIYChBmaW5nZXJz",
            "X29mX2Zyb3N0GFEgASgFEhQKDGJyYWluX2ZyZWV6ZRhSIAEoBRIeChZzdW1t",
            "b25fd2F0ZXJfZWxlbWVudGFsGFMgASgIEhcKD2VuZHVyaW5nX3dpbnRlchhU",
            "IAEoBRIbChNjaGlsbGVkX3RvX3RoZV9ib25lGFUgASgFEhMKC2RlZXBfZnJl",
            "ZXplGFYgASgIIqEFCgRNYWdlEiQKB29wdGlvbnMYAyABKAsyEy5wcm90by5N",
            "YWdlLk9wdGlvbnMagAMKCFJvdGF0aW9uEioKIm1pc3NpbGVfYmFycmFnZV9i",
            "ZWxvd19tYW5hX3BlcmNlbnQYDyABKAESOAowYmxhc3Rfd2l0aG91dF9taXNz",
            "aWxlX2JhcnJhZ2VfYWJvdmVfbWFuYV9wZXJjZW50GBAgASgBEjUKLW9ubHlf",
            "M19hcmNhbmVfYmxhc3Rfc3RhY2tzX2JlbG93X21hbmFfcGVyY2VudBgRIAEo",
            "ARIaChJ1c2VfYXJjYW5lX2JhcnJhZ2UYFCABKAgSQQoScHJpbWFyeV9maXJl",
            "X3NwZWxsGAMgASgOMiUucHJvdG8uTWFnZS5Sb3RhdGlvbi5QcmltYXJ5Rmly",
            "ZVNwZWxsEiAKGG1haW50YWluX2ltcHJvdmVkX3Njb3JjaBgEIAEoCBIVCg11",
            "c2VfaWNlX2xhbmNlGBIgASgIIj8KEFByaW1hcnlGaXJlU3BlbGwSDAoIRmly",
            "ZWJhbGwQABIRCg1Gcm9zdGZpcmVCb2x0EAESCgoGU2NvcmNoEAIa7wEKB09w",
            "dGlvbnMSLAoFYXJtb3IYASABKA4yHS5wcm90by5NYWdlLk9wdGlvbnMuQXJt",
            "b3JUeXBlEiIKGmZvY3VzX21hZ2ljX3BlcmNlbnRfdXB0aW1lGAMgASgFEjAK",
            "EmZvY3VzX21hZ2ljX3RhcmdldBgEIAEoCzIULnByb3RvLlVuaXRSZWZlcmVu",
            "Y2USJgoed2F0ZXJfZWxlbWVudGFsX2Rpc29iZXlfY2hhbmNlGAcgASgBIjgK",
            "CUFybW9yVHlwZRILCgdOb0FybW9yEAASDQoJTWFnZUFybW9yEAESDwoLTW9s",
            "dGVuQXJtb3IQAir5BQoOTWFnZU1ham9yR2x5cGgSFgoSTWFnZU1ham9yR2x5",
            "cGhOb25lEAASGgoUR2x5cGhPZkFyY2FuZUJhcnJhZ2UQquUCEhgKEkdseXBo",
            "T2ZBcmNhbmVCbGFzdBCb3wISHAoWR2x5cGhPZkFyY2FuZUV4cGxvc2lvbhDu",
            "zQISGwoVR2x5cGhPZkFyY2FuZU1pc3NpbGVzEO/NAhIYChJHbHlwaE9mQXJj",
            "YW5lUG93ZXIQ8M0CEhIKDEdseXBoT2ZCbGluaxDxzQISFwoRR2x5cGhPZkRl",
            "ZXBGcmVlemUQqOUCEhkKE0dseXBoT2ZFdGVybmFsV2F0ZXIQ/YYDEhYKEEds",
            "eXBoT2ZFdm9jYXRpb24Q8s0CEhYKEEdseXBoT2ZGaXJlQmxhc3QQ9M0CEhUK",
            "D0dseXBoT2ZGaXJlYmFsbBDzzQISFgoQR2x5cGhPZkZyb3N0Tm92YRD1zQIS",
            "FgoQR2x5cGhPZkZyb3N0Ym9sdBD2zQISFgoQR2x5cGhPZkZyb3N0ZmlyZRCM",
            "3QISFQoPR2x5cGhPZkljZUFybW9yEPfNAhIXChFHbHlwaE9mSWNlQmFycmll",
            "chCs5QISFQoPR2x5cGhPZkljZUJsb2NrEPjNAhIVCg9HbHlwaE9mSWNlTGFu",
            "Y2UQ+c0CEhUKD0dseXBoT2ZJY3lWZWlucxD6zQISGQoTR2x5cGhPZkludmlz",
            "aWJpbGl0eRD8zQISFwoRR2x5cGhPZkxpdmluZ0JvbWIQqeUCEhYKEEdseXBo",
            "T2ZNYWdlQXJtb3IQ/c0CEhQKDkdseXBoT2ZNYW5hR2VtEP7NAhIYChJHbHlw",
            "aE9mTWlycm9ySW1hZ2UQq+UCEhgKEkdseXBoT2ZNb2x0ZW5Bcm1vchD/zQIS",
            "FgoQR2x5cGhPZlBvbHltb3JwaBCAzgISGAoSR2x5cGhPZlJlbW92ZUN1cnNl",
            "EIHOAhITCg1HbHlwaE9mU2NvcmNoEPvNAhIbChVHbHlwaE9mV2F0ZXJFbGVt",
            "ZW50YWwQgs4CKtYBCg5NYWdlTWlub3JHbHlwaBIWChJNYWdlTWlub3JHbHlw",
            "aE5vbmUQABIcChZHbHlwaE9mQXJjYW5lSW50ZWxsZWN0EMvSAhIWChBHbHlw",
            "aE9mQmxhc3RXYXZlEPjeAhIVCg9HbHlwaE9mRmlyZVdhcmQQ3dICEhcKEUds",
            "eXBoT2ZGcm9zdEFybW9yEN/SAhIWChBHbHlwaE9mRnJvc3RXYXJkEODSAhIV",
            "Cg9HbHlwaE9mU2xvd0ZhbGwQ5NICEhcKEUdseXBoT2ZUaGVQZW5ndWluEOHS",
            "AkIdqgIaU2lydXNEYlNjcmFwcGVyLlVJRGF0YWJhc2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SirusDbScrapper.UIDatabase.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SirusDbScrapper.UIDatabase.MageMajorGlyph), typeof(global::SirusDbScrapper.UIDatabase.MageMinorGlyph), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.MageTalents), global::SirusDbScrapper.UIDatabase.MageTalents.Parser, new[]{ "ArcaneSubtlety", "ArcaneFocus", "ArcaneStability", "ArcaneFortitude", "MagicAbsorption", "ArcaneConcentration", "MagicAttunement", "SpellImpact", "StudentOfTheMind", "FocusMagic", "ArcaneShielding", "ImprovedCounterspell", "ArcaneMeditation", "TormentTheWeak", "ImprovedBlink", "PresenceOfMind", "ArcaneMind", "PrismaticCloak", "ArcaneInstability", "ArcanePotency", "ArcaneEmpowerment", "ArcanePower", "IncantersAbsorption", "ArcaneFlows", "MindMastery", "Slow", "MissileBarrage", "NetherwindPresence", "SpellPower", "ArcaneBarrage", "ImprovedFireBlast", "Incineration", "ImprovedFireball", "Ignite", "BurningDetermination", "WorldInFlames", "FlameThrowing", "Impact", "Pyroblast", "BurningSoul", "ImprovedScorch", "MoltenShields", "MasterOfElements", "PlayingWithFire", "CriticalMass", "BlastWave", "BlazingSpeed", "FirePower", "Pyromaniac", "Combustion", "MoltenFury", "FieryPayback", "EmpoweredFire", "Firestarter", "DragonsBreath", "HotStreak", "Burnout", "LivingBomb", "Frostbite", "ImprovedFrostbolt", "IceFloes", "IceShards", "FrostWarding", "Precision", "Permafrost", "PiercingIce", "IcyVeins", "ImprovedBlizzard", "ArcticReach", "FrostChanneling", "Shatter", "ColdSnap", "ImprovedConeOfCold", "FrozenCore", "ColdAsIce", "WintersChill", "ShatteredBarrier", "IceBarrier", "ArcticWinds", "EmpoweredFrostbolt", "FingersOfFrost", "BrainFreeze", "SummonWaterElemental", "EnduringWinter", "ChilledToTheBone", "DeepFreeze" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.Mage), global::SirusDbScrapper.UIDatabase.Mage.Parser, new[]{ "Options" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.Mage.Types.Rotation), global::SirusDbScrapper.UIDatabase.Mage.Types.Rotation.Parser, new[]{ "MissileBarrageBelowManaPercent", "BlastWithoutMissileBarrageAboveManaPercent", "Only3ArcaneBlastStacksBelowManaPercent", "UseArcaneBarrage", "PrimaryFireSpell", "MaintainImprovedScorch", "UseIceLance" }, null, new[]{ typeof(global::SirusDbScrapper.UIDatabase.Mage.Types.Rotation.Types.PrimaryFireSpell) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.Mage.Types.Options), global::SirusDbScrapper.UIDatabase.Mage.Types.Options.Parser, new[]{ "Armor", "FocusMagicPercentUptime", "FocusMagicTarget", "WaterElementalDisobeyChance" }, null, new[]{ typeof(global::SirusDbScrapper.UIDatabase.Mage.Types.Options.Types.ArmorType) }, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum MageMajorGlyph {
    [pbr::OriginalName("MageMajorGlyphNone")] None = 0,
    [pbr::OriginalName("GlyphOfArcaneBarrage")] GlyphOfArcaneBarrage = 45738,
    [pbr::OriginalName("GlyphOfArcaneBlast")] GlyphOfArcaneBlast = 44955,
    [pbr::OriginalName("GlyphOfArcaneExplosion")] GlyphOfArcaneExplosion = 42734,
    [pbr::OriginalName("GlyphOfArcaneMissiles")] GlyphOfArcaneMissiles = 42735,
    [pbr::OriginalName("GlyphOfArcanePower")] GlyphOfArcanePower = 42736,
    [pbr::OriginalName("GlyphOfBlink")] GlyphOfBlink = 42737,
    [pbr::OriginalName("GlyphOfDeepFreeze")] GlyphOfDeepFreeze = 45736,
    [pbr::OriginalName("GlyphOfEternalWater")] GlyphOfEternalWater = 50045,
    [pbr::OriginalName("GlyphOfEvocation")] GlyphOfEvocation = 42738,
    [pbr::OriginalName("GlyphOfFireBlast")] GlyphOfFireBlast = 42740,
    [pbr::OriginalName("GlyphOfFireball")] GlyphOfFireball = 42739,
    [pbr::OriginalName("GlyphOfFrostNova")] GlyphOfFrostNova = 42741,
    [pbr::OriginalName("GlyphOfFrostbolt")] GlyphOfFrostbolt = 42742,
    [pbr::OriginalName("GlyphOfFrostfire")] GlyphOfFrostfire = 44684,
    [pbr::OriginalName("GlyphOfIceArmor")] GlyphOfIceArmor = 42743,
    [pbr::OriginalName("GlyphOfIceBarrier")] GlyphOfIceBarrier = 45740,
    [pbr::OriginalName("GlyphOfIceBlock")] GlyphOfIceBlock = 42744,
    [pbr::OriginalName("GlyphOfIceLance")] GlyphOfIceLance = 42745,
    [pbr::OriginalName("GlyphOfIcyVeins")] GlyphOfIcyVeins = 42746,
    [pbr::OriginalName("GlyphOfInvisibility")] GlyphOfInvisibility = 42748,
    [pbr::OriginalName("GlyphOfLivingBomb")] GlyphOfLivingBomb = 45737,
    [pbr::OriginalName("GlyphOfMageArmor")] GlyphOfMageArmor = 42749,
    [pbr::OriginalName("GlyphOfManaGem")] GlyphOfManaGem = 42750,
    [pbr::OriginalName("GlyphOfMirrorImage")] GlyphOfMirrorImage = 45739,
    [pbr::OriginalName("GlyphOfMoltenArmor")] GlyphOfMoltenArmor = 42751,
    [pbr::OriginalName("GlyphOfPolymorph")] GlyphOfPolymorph = 42752,
    [pbr::OriginalName("GlyphOfRemoveCurse")] GlyphOfRemoveCurse = 42753,
    [pbr::OriginalName("GlyphOfScorch")] GlyphOfScorch = 42747,
    [pbr::OriginalName("GlyphOfWaterElemental")] GlyphOfWaterElemental = 42754,
  }

  public enum MageMinorGlyph {
    [pbr::OriginalName("MageMinorGlyphNone")] None = 0,
    [pbr::OriginalName("GlyphOfArcaneIntellect")] GlyphOfArcaneIntellect = 43339,
    [pbr::OriginalName("GlyphOfBlastWave")] GlyphOfBlastWave = 44920,
    [pbr::OriginalName("GlyphOfFireWard")] GlyphOfFireWard = 43357,
    [pbr::OriginalName("GlyphOfFrostArmor")] GlyphOfFrostArmor = 43359,
    [pbr::OriginalName("GlyphOfFrostWard")] GlyphOfFrostWard = 43360,
    [pbr::OriginalName("GlyphOfSlowFall")] GlyphOfSlowFall = 43364,
    [pbr::OriginalName("GlyphOfThePenguin")] GlyphOfThePenguin = 43361,
  }

  #endregion

  #region Messages
  public sealed partial class MageTalents : pb::IMessage<MageTalents>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MageTalents> _parser = new pb::MessageParser<MageTalents>(() => new MageTalents());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MageTalents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.MageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MageTalents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MageTalents(MageTalents other) : this() {
      arcaneSubtlety_ = other.arcaneSubtlety_;
      arcaneFocus_ = other.arcaneFocus_;
      arcaneStability_ = other.arcaneStability_;
      arcaneFortitude_ = other.arcaneFortitude_;
      magicAbsorption_ = other.magicAbsorption_;
      arcaneConcentration_ = other.arcaneConcentration_;
      magicAttunement_ = other.magicAttunement_;
      spellImpact_ = other.spellImpact_;
      studentOfTheMind_ = other.studentOfTheMind_;
      focusMagic_ = other.focusMagic_;
      arcaneShielding_ = other.arcaneShielding_;
      improvedCounterspell_ = other.improvedCounterspell_;
      arcaneMeditation_ = other.arcaneMeditation_;
      tormentTheWeak_ = other.tormentTheWeak_;
      improvedBlink_ = other.improvedBlink_;
      presenceOfMind_ = other.presenceOfMind_;
      arcaneMind_ = other.arcaneMind_;
      prismaticCloak_ = other.prismaticCloak_;
      arcaneInstability_ = other.arcaneInstability_;
      arcanePotency_ = other.arcanePotency_;
      arcaneEmpowerment_ = other.arcaneEmpowerment_;
      arcanePower_ = other.arcanePower_;
      incantersAbsorption_ = other.incantersAbsorption_;
      arcaneFlows_ = other.arcaneFlows_;
      mindMastery_ = other.mindMastery_;
      slow_ = other.slow_;
      missileBarrage_ = other.missileBarrage_;
      netherwindPresence_ = other.netherwindPresence_;
      spellPower_ = other.spellPower_;
      arcaneBarrage_ = other.arcaneBarrage_;
      improvedFireBlast_ = other.improvedFireBlast_;
      incineration_ = other.incineration_;
      improvedFireball_ = other.improvedFireball_;
      ignite_ = other.ignite_;
      burningDetermination_ = other.burningDetermination_;
      worldInFlames_ = other.worldInFlames_;
      flameThrowing_ = other.flameThrowing_;
      impact_ = other.impact_;
      pyroblast_ = other.pyroblast_;
      burningSoul_ = other.burningSoul_;
      improvedScorch_ = other.improvedScorch_;
      moltenShields_ = other.moltenShields_;
      masterOfElements_ = other.masterOfElements_;
      playingWithFire_ = other.playingWithFire_;
      criticalMass_ = other.criticalMass_;
      blastWave_ = other.blastWave_;
      blazingSpeed_ = other.blazingSpeed_;
      firePower_ = other.firePower_;
      pyromaniac_ = other.pyromaniac_;
      combustion_ = other.combustion_;
      moltenFury_ = other.moltenFury_;
      fieryPayback_ = other.fieryPayback_;
      empoweredFire_ = other.empoweredFire_;
      firestarter_ = other.firestarter_;
      dragonsBreath_ = other.dragonsBreath_;
      hotStreak_ = other.hotStreak_;
      burnout_ = other.burnout_;
      livingBomb_ = other.livingBomb_;
      frostbite_ = other.frostbite_;
      improvedFrostbolt_ = other.improvedFrostbolt_;
      iceFloes_ = other.iceFloes_;
      iceShards_ = other.iceShards_;
      frostWarding_ = other.frostWarding_;
      precision_ = other.precision_;
      permafrost_ = other.permafrost_;
      piercingIce_ = other.piercingIce_;
      icyVeins_ = other.icyVeins_;
      improvedBlizzard_ = other.improvedBlizzard_;
      arcticReach_ = other.arcticReach_;
      frostChanneling_ = other.frostChanneling_;
      shatter_ = other.shatter_;
      coldSnap_ = other.coldSnap_;
      improvedConeOfCold_ = other.improvedConeOfCold_;
      frozenCore_ = other.frozenCore_;
      coldAsIce_ = other.coldAsIce_;
      wintersChill_ = other.wintersChill_;
      shatteredBarrier_ = other.shatteredBarrier_;
      iceBarrier_ = other.iceBarrier_;
      arcticWinds_ = other.arcticWinds_;
      empoweredFrostbolt_ = other.empoweredFrostbolt_;
      fingersOfFrost_ = other.fingersOfFrost_;
      brainFreeze_ = other.brainFreeze_;
      summonWaterElemental_ = other.summonWaterElemental_;
      enduringWinter_ = other.enduringWinter_;
      chilledToTheBone_ = other.chilledToTheBone_;
      deepFreeze_ = other.deepFreeze_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MageTalents Clone() {
      return new MageTalents(this);
    }

    /// <summary>Field number for the "arcane_subtlety" field.</summary>
    public const int ArcaneSubtletyFieldNumber = 1;
    private int arcaneSubtlety_;
    /// <summary>
    /// Arcane
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArcaneSubtlety {
      get { return arcaneSubtlety_; }
      set {
        arcaneSubtlety_ = value;
      }
    }

    /// <summary>Field number for the "arcane_focus" field.</summary>
    public const int ArcaneFocusFieldNumber = 2;
    private int arcaneFocus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArcaneFocus {
      get { return arcaneFocus_; }
      set {
        arcaneFocus_ = value;
      }
    }

    /// <summary>Field number for the "arcane_stability" field.</summary>
    public const int ArcaneStabilityFieldNumber = 3;
    private int arcaneStability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArcaneStability {
      get { return arcaneStability_; }
      set {
        arcaneStability_ = value;
      }
    }

    /// <summary>Field number for the "arcane_fortitude" field.</summary>
    public const int ArcaneFortitudeFieldNumber = 4;
    private int arcaneFortitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArcaneFortitude {
      get { return arcaneFortitude_; }
      set {
        arcaneFortitude_ = value;
      }
    }

    /// <summary>Field number for the "magic_absorption" field.</summary>
    public const int MagicAbsorptionFieldNumber = 5;
    private int magicAbsorption_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MagicAbsorption {
      get { return magicAbsorption_; }
      set {
        magicAbsorption_ = value;
      }
    }

    /// <summary>Field number for the "arcane_concentration" field.</summary>
    public const int ArcaneConcentrationFieldNumber = 6;
    private int arcaneConcentration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArcaneConcentration {
      get { return arcaneConcentration_; }
      set {
        arcaneConcentration_ = value;
      }
    }

    /// <summary>Field number for the "magic_attunement" field.</summary>
    public const int MagicAttunementFieldNumber = 7;
    private int magicAttunement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MagicAttunement {
      get { return magicAttunement_; }
      set {
        magicAttunement_ = value;
      }
    }

    /// <summary>Field number for the "spell_impact" field.</summary>
    public const int SpellImpactFieldNumber = 8;
    private int spellImpact_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellImpact {
      get { return spellImpact_; }
      set {
        spellImpact_ = value;
      }
    }

    /// <summary>Field number for the "student_of_the_mind" field.</summary>
    public const int StudentOfTheMindFieldNumber = 9;
    private int studentOfTheMind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StudentOfTheMind {
      get { return studentOfTheMind_; }
      set {
        studentOfTheMind_ = value;
      }
    }

    /// <summary>Field number for the "focus_magic" field.</summary>
    public const int FocusMagicFieldNumber = 10;
    private bool focusMagic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FocusMagic {
      get { return focusMagic_; }
      set {
        focusMagic_ = value;
      }
    }

    /// <summary>Field number for the "arcane_shielding" field.</summary>
    public const int ArcaneShieldingFieldNumber = 11;
    private int arcaneShielding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArcaneShielding {
      get { return arcaneShielding_; }
      set {
        arcaneShielding_ = value;
      }
    }

    /// <summary>Field number for the "improved_counterspell" field.</summary>
    public const int ImprovedCounterspellFieldNumber = 12;
    private int improvedCounterspell_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedCounterspell {
      get { return improvedCounterspell_; }
      set {
        improvedCounterspell_ = value;
      }
    }

    /// <summary>Field number for the "arcane_meditation" field.</summary>
    public const int ArcaneMeditationFieldNumber = 13;
    private int arcaneMeditation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArcaneMeditation {
      get { return arcaneMeditation_; }
      set {
        arcaneMeditation_ = value;
      }
    }

    /// <summary>Field number for the "torment_the_weak" field.</summary>
    public const int TormentTheWeakFieldNumber = 14;
    private int tormentTheWeak_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TormentTheWeak {
      get { return tormentTheWeak_; }
      set {
        tormentTheWeak_ = value;
      }
    }

    /// <summary>Field number for the "improved_blink" field.</summary>
    public const int ImprovedBlinkFieldNumber = 15;
    private int improvedBlink_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedBlink {
      get { return improvedBlink_; }
      set {
        improvedBlink_ = value;
      }
    }

    /// <summary>Field number for the "presence_of_mind" field.</summary>
    public const int PresenceOfMindFieldNumber = 16;
    private bool presenceOfMind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PresenceOfMind {
      get { return presenceOfMind_; }
      set {
        presenceOfMind_ = value;
      }
    }

    /// <summary>Field number for the "arcane_mind" field.</summary>
    public const int ArcaneMindFieldNumber = 17;
    private int arcaneMind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArcaneMind {
      get { return arcaneMind_; }
      set {
        arcaneMind_ = value;
      }
    }

    /// <summary>Field number for the "prismatic_cloak" field.</summary>
    public const int PrismaticCloakFieldNumber = 18;
    private int prismaticCloak_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrismaticCloak {
      get { return prismaticCloak_; }
      set {
        prismaticCloak_ = value;
      }
    }

    /// <summary>Field number for the "arcane_instability" field.</summary>
    public const int ArcaneInstabilityFieldNumber = 19;
    private int arcaneInstability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArcaneInstability {
      get { return arcaneInstability_; }
      set {
        arcaneInstability_ = value;
      }
    }

    /// <summary>Field number for the "arcane_potency" field.</summary>
    public const int ArcanePotencyFieldNumber = 20;
    private int arcanePotency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArcanePotency {
      get { return arcanePotency_; }
      set {
        arcanePotency_ = value;
      }
    }

    /// <summary>Field number for the "arcane_empowerment" field.</summary>
    public const int ArcaneEmpowermentFieldNumber = 21;
    private int arcaneEmpowerment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArcaneEmpowerment {
      get { return arcaneEmpowerment_; }
      set {
        arcaneEmpowerment_ = value;
      }
    }

    /// <summary>Field number for the "arcane_power" field.</summary>
    public const int ArcanePowerFieldNumber = 22;
    private bool arcanePower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ArcanePower {
      get { return arcanePower_; }
      set {
        arcanePower_ = value;
      }
    }

    /// <summary>Field number for the "incanters_absorption" field.</summary>
    public const int IncantersAbsorptionFieldNumber = 23;
    private int incantersAbsorption_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IncantersAbsorption {
      get { return incantersAbsorption_; }
      set {
        incantersAbsorption_ = value;
      }
    }

    /// <summary>Field number for the "arcane_flows" field.</summary>
    public const int ArcaneFlowsFieldNumber = 24;
    private int arcaneFlows_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArcaneFlows {
      get { return arcaneFlows_; }
      set {
        arcaneFlows_ = value;
      }
    }

    /// <summary>Field number for the "mind_mastery" field.</summary>
    public const int MindMasteryFieldNumber = 25;
    private int mindMastery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MindMastery {
      get { return mindMastery_; }
      set {
        mindMastery_ = value;
      }
    }

    /// <summary>Field number for the "slow" field.</summary>
    public const int SlowFieldNumber = 26;
    private bool slow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Slow {
      get { return slow_; }
      set {
        slow_ = value;
      }
    }

    /// <summary>Field number for the "missile_barrage" field.</summary>
    public const int MissileBarrageFieldNumber = 27;
    private int missileBarrage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MissileBarrage {
      get { return missileBarrage_; }
      set {
        missileBarrage_ = value;
      }
    }

    /// <summary>Field number for the "netherwind_presence" field.</summary>
    public const int NetherwindPresenceFieldNumber = 28;
    private int netherwindPresence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NetherwindPresence {
      get { return netherwindPresence_; }
      set {
        netherwindPresence_ = value;
      }
    }

    /// <summary>Field number for the "spell_power" field.</summary>
    public const int SpellPowerFieldNumber = 29;
    private int spellPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellPower {
      get { return spellPower_; }
      set {
        spellPower_ = value;
      }
    }

    /// <summary>Field number for the "arcane_barrage" field.</summary>
    public const int ArcaneBarrageFieldNumber = 30;
    private bool arcaneBarrage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ArcaneBarrage {
      get { return arcaneBarrage_; }
      set {
        arcaneBarrage_ = value;
      }
    }

    /// <summary>Field number for the "improved_fire_blast" field.</summary>
    public const int ImprovedFireBlastFieldNumber = 31;
    private int improvedFireBlast_;
    /// <summary>
    /// Fire
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedFireBlast {
      get { return improvedFireBlast_; }
      set {
        improvedFireBlast_ = value;
      }
    }

    /// <summary>Field number for the "incineration" field.</summary>
    public const int IncinerationFieldNumber = 32;
    private int incineration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Incineration {
      get { return incineration_; }
      set {
        incineration_ = value;
      }
    }

    /// <summary>Field number for the "improved_fireball" field.</summary>
    public const int ImprovedFireballFieldNumber = 33;
    private int improvedFireball_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedFireball {
      get { return improvedFireball_; }
      set {
        improvedFireball_ = value;
      }
    }

    /// <summary>Field number for the "ignite" field.</summary>
    public const int IgniteFieldNumber = 34;
    private int ignite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ignite {
      get { return ignite_; }
      set {
        ignite_ = value;
      }
    }

    /// <summary>Field number for the "burning_determination" field.</summary>
    public const int BurningDeterminationFieldNumber = 35;
    private int burningDetermination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BurningDetermination {
      get { return burningDetermination_; }
      set {
        burningDetermination_ = value;
      }
    }

    /// <summary>Field number for the "world_in_flames" field.</summary>
    public const int WorldInFlamesFieldNumber = 36;
    private int worldInFlames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WorldInFlames {
      get { return worldInFlames_; }
      set {
        worldInFlames_ = value;
      }
    }

    /// <summary>Field number for the "flame_throwing" field.</summary>
    public const int FlameThrowingFieldNumber = 37;
    private int flameThrowing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FlameThrowing {
      get { return flameThrowing_; }
      set {
        flameThrowing_ = value;
      }
    }

    /// <summary>Field number for the "impact" field.</summary>
    public const int ImpactFieldNumber = 38;
    private int impact_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Impact {
      get { return impact_; }
      set {
        impact_ = value;
      }
    }

    /// <summary>Field number for the "pyroblast" field.</summary>
    public const int PyroblastFieldNumber = 39;
    private bool pyroblast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Pyroblast {
      get { return pyroblast_; }
      set {
        pyroblast_ = value;
      }
    }

    /// <summary>Field number for the "burning_soul" field.</summary>
    public const int BurningSoulFieldNumber = 40;
    private int burningSoul_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BurningSoul {
      get { return burningSoul_; }
      set {
        burningSoul_ = value;
      }
    }

    /// <summary>Field number for the "improved_scorch" field.</summary>
    public const int ImprovedScorchFieldNumber = 41;
    private int improvedScorch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedScorch {
      get { return improvedScorch_; }
      set {
        improvedScorch_ = value;
      }
    }

    /// <summary>Field number for the "molten_shields" field.</summary>
    public const int MoltenShieldsFieldNumber = 42;
    private int moltenShields_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MoltenShields {
      get { return moltenShields_; }
      set {
        moltenShields_ = value;
      }
    }

    /// <summary>Field number for the "master_of_elements" field.</summary>
    public const int MasterOfElementsFieldNumber = 43;
    private int masterOfElements_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MasterOfElements {
      get { return masterOfElements_; }
      set {
        masterOfElements_ = value;
      }
    }

    /// <summary>Field number for the "playing_with_fire" field.</summary>
    public const int PlayingWithFireFieldNumber = 44;
    private int playingWithFire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PlayingWithFire {
      get { return playingWithFire_; }
      set {
        playingWithFire_ = value;
      }
    }

    /// <summary>Field number for the "critical_mass" field.</summary>
    public const int CriticalMassFieldNumber = 45;
    private int criticalMass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CriticalMass {
      get { return criticalMass_; }
      set {
        criticalMass_ = value;
      }
    }

    /// <summary>Field number for the "blast_wave" field.</summary>
    public const int BlastWaveFieldNumber = 46;
    private bool blastWave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlastWave {
      get { return blastWave_; }
      set {
        blastWave_ = value;
      }
    }

    /// <summary>Field number for the "blazing_speed" field.</summary>
    public const int BlazingSpeedFieldNumber = 47;
    private int blazingSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BlazingSpeed {
      get { return blazingSpeed_; }
      set {
        blazingSpeed_ = value;
      }
    }

    /// <summary>Field number for the "fire_power" field.</summary>
    public const int FirePowerFieldNumber = 48;
    private int firePower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FirePower {
      get { return firePower_; }
      set {
        firePower_ = value;
      }
    }

    /// <summary>Field number for the "pyromaniac" field.</summary>
    public const int PyromaniacFieldNumber = 49;
    private int pyromaniac_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Pyromaniac {
      get { return pyromaniac_; }
      set {
        pyromaniac_ = value;
      }
    }

    /// <summary>Field number for the "combustion" field.</summary>
    public const int CombustionFieldNumber = 50;
    private bool combustion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Combustion {
      get { return combustion_; }
      set {
        combustion_ = value;
      }
    }

    /// <summary>Field number for the "molten_fury" field.</summary>
    public const int MoltenFuryFieldNumber = 51;
    private int moltenFury_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MoltenFury {
      get { return moltenFury_; }
      set {
        moltenFury_ = value;
      }
    }

    /// <summary>Field number for the "fiery_payback" field.</summary>
    public const int FieryPaybackFieldNumber = 52;
    private int fieryPayback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FieryPayback {
      get { return fieryPayback_; }
      set {
        fieryPayback_ = value;
      }
    }

    /// <summary>Field number for the "empowered_fire" field.</summary>
    public const int EmpoweredFireFieldNumber = 53;
    private int empoweredFire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EmpoweredFire {
      get { return empoweredFire_; }
      set {
        empoweredFire_ = value;
      }
    }

    /// <summary>Field number for the "firestarter" field.</summary>
    public const int FirestarterFieldNumber = 54;
    private int firestarter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Firestarter {
      get { return firestarter_; }
      set {
        firestarter_ = value;
      }
    }

    /// <summary>Field number for the "dragons_breath" field.</summary>
    public const int DragonsBreathFieldNumber = 55;
    private bool dragonsBreath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DragonsBreath {
      get { return dragonsBreath_; }
      set {
        dragonsBreath_ = value;
      }
    }

    /// <summary>Field number for the "hot_streak" field.</summary>
    public const int HotStreakFieldNumber = 56;
    private int hotStreak_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HotStreak {
      get { return hotStreak_; }
      set {
        hotStreak_ = value;
      }
    }

    /// <summary>Field number for the "burnout" field.</summary>
    public const int BurnoutFieldNumber = 57;
    private int burnout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Burnout {
      get { return burnout_; }
      set {
        burnout_ = value;
      }
    }

    /// <summary>Field number for the "living_bomb" field.</summary>
    public const int LivingBombFieldNumber = 58;
    private bool livingBomb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LivingBomb {
      get { return livingBomb_; }
      set {
        livingBomb_ = value;
      }
    }

    /// <summary>Field number for the "frostbite" field.</summary>
    public const int FrostbiteFieldNumber = 59;
    private int frostbite_;
    /// <summary>
    /// Frost
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Frostbite {
      get { return frostbite_; }
      set {
        frostbite_ = value;
      }
    }

    /// <summary>Field number for the "improved_frostbolt" field.</summary>
    public const int ImprovedFrostboltFieldNumber = 60;
    private int improvedFrostbolt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedFrostbolt {
      get { return improvedFrostbolt_; }
      set {
        improvedFrostbolt_ = value;
      }
    }

    /// <summary>Field number for the "ice_floes" field.</summary>
    public const int IceFloesFieldNumber = 61;
    private int iceFloes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IceFloes {
      get { return iceFloes_; }
      set {
        iceFloes_ = value;
      }
    }

    /// <summary>Field number for the "ice_shards" field.</summary>
    public const int IceShardsFieldNumber = 62;
    private int iceShards_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IceShards {
      get { return iceShards_; }
      set {
        iceShards_ = value;
      }
    }

    /// <summary>Field number for the "frost_warding" field.</summary>
    public const int FrostWardingFieldNumber = 63;
    private int frostWarding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FrostWarding {
      get { return frostWarding_; }
      set {
        frostWarding_ = value;
      }
    }

    /// <summary>Field number for the "precision" field.</summary>
    public const int PrecisionFieldNumber = 64;
    private int precision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Precision {
      get { return precision_; }
      set {
        precision_ = value;
      }
    }

    /// <summary>Field number for the "permafrost" field.</summary>
    public const int PermafrostFieldNumber = 65;
    private int permafrost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Permafrost {
      get { return permafrost_; }
      set {
        permafrost_ = value;
      }
    }

    /// <summary>Field number for the "piercing_ice" field.</summary>
    public const int PiercingIceFieldNumber = 66;
    private int piercingIce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PiercingIce {
      get { return piercingIce_; }
      set {
        piercingIce_ = value;
      }
    }

    /// <summary>Field number for the "icy_veins" field.</summary>
    public const int IcyVeinsFieldNumber = 67;
    private bool icyVeins_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IcyVeins {
      get { return icyVeins_; }
      set {
        icyVeins_ = value;
      }
    }

    /// <summary>Field number for the "improved_blizzard" field.</summary>
    public const int ImprovedBlizzardFieldNumber = 68;
    private int improvedBlizzard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedBlizzard {
      get { return improvedBlizzard_; }
      set {
        improvedBlizzard_ = value;
      }
    }

    /// <summary>Field number for the "arctic_reach" field.</summary>
    public const int ArcticReachFieldNumber = 69;
    private int arcticReach_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArcticReach {
      get { return arcticReach_; }
      set {
        arcticReach_ = value;
      }
    }

    /// <summary>Field number for the "frost_channeling" field.</summary>
    public const int FrostChannelingFieldNumber = 70;
    private int frostChanneling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FrostChanneling {
      get { return frostChanneling_; }
      set {
        frostChanneling_ = value;
      }
    }

    /// <summary>Field number for the "shatter" field.</summary>
    public const int ShatterFieldNumber = 71;
    private int shatter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Shatter {
      get { return shatter_; }
      set {
        shatter_ = value;
      }
    }

    /// <summary>Field number for the "cold_snap" field.</summary>
    public const int ColdSnapFieldNumber = 72;
    private bool coldSnap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ColdSnap {
      get { return coldSnap_; }
      set {
        coldSnap_ = value;
      }
    }

    /// <summary>Field number for the "improved_cone_of_cold" field.</summary>
    public const int ImprovedConeOfColdFieldNumber = 73;
    private int improvedConeOfCold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedConeOfCold {
      get { return improvedConeOfCold_; }
      set {
        improvedConeOfCold_ = value;
      }
    }

    /// <summary>Field number for the "frozen_core" field.</summary>
    public const int FrozenCoreFieldNumber = 74;
    private int frozenCore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FrozenCore {
      get { return frozenCore_; }
      set {
        frozenCore_ = value;
      }
    }

    /// <summary>Field number for the "cold_as_ice" field.</summary>
    public const int ColdAsIceFieldNumber = 75;
    private int coldAsIce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ColdAsIce {
      get { return coldAsIce_; }
      set {
        coldAsIce_ = value;
      }
    }

    /// <summary>Field number for the "winters_chill" field.</summary>
    public const int WintersChillFieldNumber = 76;
    private int wintersChill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WintersChill {
      get { return wintersChill_; }
      set {
        wintersChill_ = value;
      }
    }

    /// <summary>Field number for the "shattered_barrier" field.</summary>
    public const int ShatteredBarrierFieldNumber = 77;
    private int shatteredBarrier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShatteredBarrier {
      get { return shatteredBarrier_; }
      set {
        shatteredBarrier_ = value;
      }
    }

    /// <summary>Field number for the "ice_barrier" field.</summary>
    public const int IceBarrierFieldNumber = 78;
    private bool iceBarrier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IceBarrier {
      get { return iceBarrier_; }
      set {
        iceBarrier_ = value;
      }
    }

    /// <summary>Field number for the "arctic_winds" field.</summary>
    public const int ArcticWindsFieldNumber = 79;
    private int arcticWinds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArcticWinds {
      get { return arcticWinds_; }
      set {
        arcticWinds_ = value;
      }
    }

    /// <summary>Field number for the "empowered_frostbolt" field.</summary>
    public const int EmpoweredFrostboltFieldNumber = 80;
    private int empoweredFrostbolt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EmpoweredFrostbolt {
      get { return empoweredFrostbolt_; }
      set {
        empoweredFrostbolt_ = value;
      }
    }

    /// <summary>Field number for the "fingers_of_frost" field.</summary>
    public const int FingersOfFrostFieldNumber = 81;
    private int fingersOfFrost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FingersOfFrost {
      get { return fingersOfFrost_; }
      set {
        fingersOfFrost_ = value;
      }
    }

    /// <summary>Field number for the "brain_freeze" field.</summary>
    public const int BrainFreezeFieldNumber = 82;
    private int brainFreeze_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BrainFreeze {
      get { return brainFreeze_; }
      set {
        brainFreeze_ = value;
      }
    }

    /// <summary>Field number for the "summon_water_elemental" field.</summary>
    public const int SummonWaterElementalFieldNumber = 83;
    private bool summonWaterElemental_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SummonWaterElemental {
      get { return summonWaterElemental_; }
      set {
        summonWaterElemental_ = value;
      }
    }

    /// <summary>Field number for the "enduring_winter" field.</summary>
    public const int EnduringWinterFieldNumber = 84;
    private int enduringWinter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EnduringWinter {
      get { return enduringWinter_; }
      set {
        enduringWinter_ = value;
      }
    }

    /// <summary>Field number for the "chilled_to_the_bone" field.</summary>
    public const int ChilledToTheBoneFieldNumber = 85;
    private int chilledToTheBone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChilledToTheBone {
      get { return chilledToTheBone_; }
      set {
        chilledToTheBone_ = value;
      }
    }

    /// <summary>Field number for the "deep_freeze" field.</summary>
    public const int DeepFreezeFieldNumber = 86;
    private bool deepFreeze_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DeepFreeze {
      get { return deepFreeze_; }
      set {
        deepFreeze_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MageTalents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MageTalents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ArcaneSubtlety != other.ArcaneSubtlety) return false;
      if (ArcaneFocus != other.ArcaneFocus) return false;
      if (ArcaneStability != other.ArcaneStability) return false;
      if (ArcaneFortitude != other.ArcaneFortitude) return false;
      if (MagicAbsorption != other.MagicAbsorption) return false;
      if (ArcaneConcentration != other.ArcaneConcentration) return false;
      if (MagicAttunement != other.MagicAttunement) return false;
      if (SpellImpact != other.SpellImpact) return false;
      if (StudentOfTheMind != other.StudentOfTheMind) return false;
      if (FocusMagic != other.FocusMagic) return false;
      if (ArcaneShielding != other.ArcaneShielding) return false;
      if (ImprovedCounterspell != other.ImprovedCounterspell) return false;
      if (ArcaneMeditation != other.ArcaneMeditation) return false;
      if (TormentTheWeak != other.TormentTheWeak) return false;
      if (ImprovedBlink != other.ImprovedBlink) return false;
      if (PresenceOfMind != other.PresenceOfMind) return false;
      if (ArcaneMind != other.ArcaneMind) return false;
      if (PrismaticCloak != other.PrismaticCloak) return false;
      if (ArcaneInstability != other.ArcaneInstability) return false;
      if (ArcanePotency != other.ArcanePotency) return false;
      if (ArcaneEmpowerment != other.ArcaneEmpowerment) return false;
      if (ArcanePower != other.ArcanePower) return false;
      if (IncantersAbsorption != other.IncantersAbsorption) return false;
      if (ArcaneFlows != other.ArcaneFlows) return false;
      if (MindMastery != other.MindMastery) return false;
      if (Slow != other.Slow) return false;
      if (MissileBarrage != other.MissileBarrage) return false;
      if (NetherwindPresence != other.NetherwindPresence) return false;
      if (SpellPower != other.SpellPower) return false;
      if (ArcaneBarrage != other.ArcaneBarrage) return false;
      if (ImprovedFireBlast != other.ImprovedFireBlast) return false;
      if (Incineration != other.Incineration) return false;
      if (ImprovedFireball != other.ImprovedFireball) return false;
      if (Ignite != other.Ignite) return false;
      if (BurningDetermination != other.BurningDetermination) return false;
      if (WorldInFlames != other.WorldInFlames) return false;
      if (FlameThrowing != other.FlameThrowing) return false;
      if (Impact != other.Impact) return false;
      if (Pyroblast != other.Pyroblast) return false;
      if (BurningSoul != other.BurningSoul) return false;
      if (ImprovedScorch != other.ImprovedScorch) return false;
      if (MoltenShields != other.MoltenShields) return false;
      if (MasterOfElements != other.MasterOfElements) return false;
      if (PlayingWithFire != other.PlayingWithFire) return false;
      if (CriticalMass != other.CriticalMass) return false;
      if (BlastWave != other.BlastWave) return false;
      if (BlazingSpeed != other.BlazingSpeed) return false;
      if (FirePower != other.FirePower) return false;
      if (Pyromaniac != other.Pyromaniac) return false;
      if (Combustion != other.Combustion) return false;
      if (MoltenFury != other.MoltenFury) return false;
      if (FieryPayback != other.FieryPayback) return false;
      if (EmpoweredFire != other.EmpoweredFire) return false;
      if (Firestarter != other.Firestarter) return false;
      if (DragonsBreath != other.DragonsBreath) return false;
      if (HotStreak != other.HotStreak) return false;
      if (Burnout != other.Burnout) return false;
      if (LivingBomb != other.LivingBomb) return false;
      if (Frostbite != other.Frostbite) return false;
      if (ImprovedFrostbolt != other.ImprovedFrostbolt) return false;
      if (IceFloes != other.IceFloes) return false;
      if (IceShards != other.IceShards) return false;
      if (FrostWarding != other.FrostWarding) return false;
      if (Precision != other.Precision) return false;
      if (Permafrost != other.Permafrost) return false;
      if (PiercingIce != other.PiercingIce) return false;
      if (IcyVeins != other.IcyVeins) return false;
      if (ImprovedBlizzard != other.ImprovedBlizzard) return false;
      if (ArcticReach != other.ArcticReach) return false;
      if (FrostChanneling != other.FrostChanneling) return false;
      if (Shatter != other.Shatter) return false;
      if (ColdSnap != other.ColdSnap) return false;
      if (ImprovedConeOfCold != other.ImprovedConeOfCold) return false;
      if (FrozenCore != other.FrozenCore) return false;
      if (ColdAsIce != other.ColdAsIce) return false;
      if (WintersChill != other.WintersChill) return false;
      if (ShatteredBarrier != other.ShatteredBarrier) return false;
      if (IceBarrier != other.IceBarrier) return false;
      if (ArcticWinds != other.ArcticWinds) return false;
      if (EmpoweredFrostbolt != other.EmpoweredFrostbolt) return false;
      if (FingersOfFrost != other.FingersOfFrost) return false;
      if (BrainFreeze != other.BrainFreeze) return false;
      if (SummonWaterElemental != other.SummonWaterElemental) return false;
      if (EnduringWinter != other.EnduringWinter) return false;
      if (ChilledToTheBone != other.ChilledToTheBone) return false;
      if (DeepFreeze != other.DeepFreeze) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ArcaneSubtlety != 0) hash ^= ArcaneSubtlety.GetHashCode();
      if (ArcaneFocus != 0) hash ^= ArcaneFocus.GetHashCode();
      if (ArcaneStability != 0) hash ^= ArcaneStability.GetHashCode();
      if (ArcaneFortitude != 0) hash ^= ArcaneFortitude.GetHashCode();
      if (MagicAbsorption != 0) hash ^= MagicAbsorption.GetHashCode();
      if (ArcaneConcentration != 0) hash ^= ArcaneConcentration.GetHashCode();
      if (MagicAttunement != 0) hash ^= MagicAttunement.GetHashCode();
      if (SpellImpact != 0) hash ^= SpellImpact.GetHashCode();
      if (StudentOfTheMind != 0) hash ^= StudentOfTheMind.GetHashCode();
      if (FocusMagic != false) hash ^= FocusMagic.GetHashCode();
      if (ArcaneShielding != 0) hash ^= ArcaneShielding.GetHashCode();
      if (ImprovedCounterspell != 0) hash ^= ImprovedCounterspell.GetHashCode();
      if (ArcaneMeditation != 0) hash ^= ArcaneMeditation.GetHashCode();
      if (TormentTheWeak != 0) hash ^= TormentTheWeak.GetHashCode();
      if (ImprovedBlink != 0) hash ^= ImprovedBlink.GetHashCode();
      if (PresenceOfMind != false) hash ^= PresenceOfMind.GetHashCode();
      if (ArcaneMind != 0) hash ^= ArcaneMind.GetHashCode();
      if (PrismaticCloak != 0) hash ^= PrismaticCloak.GetHashCode();
      if (ArcaneInstability != 0) hash ^= ArcaneInstability.GetHashCode();
      if (ArcanePotency != 0) hash ^= ArcanePotency.GetHashCode();
      if (ArcaneEmpowerment != 0) hash ^= ArcaneEmpowerment.GetHashCode();
      if (ArcanePower != false) hash ^= ArcanePower.GetHashCode();
      if (IncantersAbsorption != 0) hash ^= IncantersAbsorption.GetHashCode();
      if (ArcaneFlows != 0) hash ^= ArcaneFlows.GetHashCode();
      if (MindMastery != 0) hash ^= MindMastery.GetHashCode();
      if (Slow != false) hash ^= Slow.GetHashCode();
      if (MissileBarrage != 0) hash ^= MissileBarrage.GetHashCode();
      if (NetherwindPresence != 0) hash ^= NetherwindPresence.GetHashCode();
      if (SpellPower != 0) hash ^= SpellPower.GetHashCode();
      if (ArcaneBarrage != false) hash ^= ArcaneBarrage.GetHashCode();
      if (ImprovedFireBlast != 0) hash ^= ImprovedFireBlast.GetHashCode();
      if (Incineration != 0) hash ^= Incineration.GetHashCode();
      if (ImprovedFireball != 0) hash ^= ImprovedFireball.GetHashCode();
      if (Ignite != 0) hash ^= Ignite.GetHashCode();
      if (BurningDetermination != 0) hash ^= BurningDetermination.GetHashCode();
      if (WorldInFlames != 0) hash ^= WorldInFlames.GetHashCode();
      if (FlameThrowing != 0) hash ^= FlameThrowing.GetHashCode();
      if (Impact != 0) hash ^= Impact.GetHashCode();
      if (Pyroblast != false) hash ^= Pyroblast.GetHashCode();
      if (BurningSoul != 0) hash ^= BurningSoul.GetHashCode();
      if (ImprovedScorch != 0) hash ^= ImprovedScorch.GetHashCode();
      if (MoltenShields != 0) hash ^= MoltenShields.GetHashCode();
      if (MasterOfElements != 0) hash ^= MasterOfElements.GetHashCode();
      if (PlayingWithFire != 0) hash ^= PlayingWithFire.GetHashCode();
      if (CriticalMass != 0) hash ^= CriticalMass.GetHashCode();
      if (BlastWave != false) hash ^= BlastWave.GetHashCode();
      if (BlazingSpeed != 0) hash ^= BlazingSpeed.GetHashCode();
      if (FirePower != 0) hash ^= FirePower.GetHashCode();
      if (Pyromaniac != 0) hash ^= Pyromaniac.GetHashCode();
      if (Combustion != false) hash ^= Combustion.GetHashCode();
      if (MoltenFury != 0) hash ^= MoltenFury.GetHashCode();
      if (FieryPayback != 0) hash ^= FieryPayback.GetHashCode();
      if (EmpoweredFire != 0) hash ^= EmpoweredFire.GetHashCode();
      if (Firestarter != 0) hash ^= Firestarter.GetHashCode();
      if (DragonsBreath != false) hash ^= DragonsBreath.GetHashCode();
      if (HotStreak != 0) hash ^= HotStreak.GetHashCode();
      if (Burnout != 0) hash ^= Burnout.GetHashCode();
      if (LivingBomb != false) hash ^= LivingBomb.GetHashCode();
      if (Frostbite != 0) hash ^= Frostbite.GetHashCode();
      if (ImprovedFrostbolt != 0) hash ^= ImprovedFrostbolt.GetHashCode();
      if (IceFloes != 0) hash ^= IceFloes.GetHashCode();
      if (IceShards != 0) hash ^= IceShards.GetHashCode();
      if (FrostWarding != 0) hash ^= FrostWarding.GetHashCode();
      if (Precision != 0) hash ^= Precision.GetHashCode();
      if (Permafrost != 0) hash ^= Permafrost.GetHashCode();
      if (PiercingIce != 0) hash ^= PiercingIce.GetHashCode();
      if (IcyVeins != false) hash ^= IcyVeins.GetHashCode();
      if (ImprovedBlizzard != 0) hash ^= ImprovedBlizzard.GetHashCode();
      if (ArcticReach != 0) hash ^= ArcticReach.GetHashCode();
      if (FrostChanneling != 0) hash ^= FrostChanneling.GetHashCode();
      if (Shatter != 0) hash ^= Shatter.GetHashCode();
      if (ColdSnap != false) hash ^= ColdSnap.GetHashCode();
      if (ImprovedConeOfCold != 0) hash ^= ImprovedConeOfCold.GetHashCode();
      if (FrozenCore != 0) hash ^= FrozenCore.GetHashCode();
      if (ColdAsIce != 0) hash ^= ColdAsIce.GetHashCode();
      if (WintersChill != 0) hash ^= WintersChill.GetHashCode();
      if (ShatteredBarrier != 0) hash ^= ShatteredBarrier.GetHashCode();
      if (IceBarrier != false) hash ^= IceBarrier.GetHashCode();
      if (ArcticWinds != 0) hash ^= ArcticWinds.GetHashCode();
      if (EmpoweredFrostbolt != 0) hash ^= EmpoweredFrostbolt.GetHashCode();
      if (FingersOfFrost != 0) hash ^= FingersOfFrost.GetHashCode();
      if (BrainFreeze != 0) hash ^= BrainFreeze.GetHashCode();
      if (SummonWaterElemental != false) hash ^= SummonWaterElemental.GetHashCode();
      if (EnduringWinter != 0) hash ^= EnduringWinter.GetHashCode();
      if (ChilledToTheBone != 0) hash ^= ChilledToTheBone.GetHashCode();
      if (DeepFreeze != false) hash ^= DeepFreeze.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ArcaneSubtlety != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ArcaneSubtlety);
      }
      if (ArcaneFocus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ArcaneFocus);
      }
      if (ArcaneStability != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ArcaneStability);
      }
      if (ArcaneFortitude != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ArcaneFortitude);
      }
      if (MagicAbsorption != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MagicAbsorption);
      }
      if (ArcaneConcentration != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ArcaneConcentration);
      }
      if (MagicAttunement != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MagicAttunement);
      }
      if (SpellImpact != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SpellImpact);
      }
      if (StudentOfTheMind != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(StudentOfTheMind);
      }
      if (FocusMagic != false) {
        output.WriteRawTag(80);
        output.WriteBool(FocusMagic);
      }
      if (ArcaneShielding != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ArcaneShielding);
      }
      if (ImprovedCounterspell != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ImprovedCounterspell);
      }
      if (ArcaneMeditation != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ArcaneMeditation);
      }
      if (TormentTheWeak != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(TormentTheWeak);
      }
      if (ImprovedBlink != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ImprovedBlink);
      }
      if (PresenceOfMind != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(PresenceOfMind);
      }
      if (ArcaneMind != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ArcaneMind);
      }
      if (PrismaticCloak != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(PrismaticCloak);
      }
      if (ArcaneInstability != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(ArcaneInstability);
      }
      if (ArcanePotency != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ArcanePotency);
      }
      if (ArcaneEmpowerment != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(ArcaneEmpowerment);
      }
      if (ArcanePower != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(ArcanePower);
      }
      if (IncantersAbsorption != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(IncantersAbsorption);
      }
      if (ArcaneFlows != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(ArcaneFlows);
      }
      if (MindMastery != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(MindMastery);
      }
      if (Slow != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(Slow);
      }
      if (MissileBarrage != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(MissileBarrage);
      }
      if (NetherwindPresence != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(NetherwindPresence);
      }
      if (SpellPower != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(SpellPower);
      }
      if (ArcaneBarrage != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ArcaneBarrage);
      }
      if (ImprovedFireBlast != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(ImprovedFireBlast);
      }
      if (Incineration != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(Incineration);
      }
      if (ImprovedFireball != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(ImprovedFireball);
      }
      if (Ignite != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Ignite);
      }
      if (BurningDetermination != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(BurningDetermination);
      }
      if (WorldInFlames != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(WorldInFlames);
      }
      if (FlameThrowing != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(FlameThrowing);
      }
      if (Impact != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(Impact);
      }
      if (Pyroblast != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(Pyroblast);
      }
      if (BurningSoul != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(BurningSoul);
      }
      if (ImprovedScorch != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(ImprovedScorch);
      }
      if (MoltenShields != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(MoltenShields);
      }
      if (MasterOfElements != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(MasterOfElements);
      }
      if (PlayingWithFire != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(PlayingWithFire);
      }
      if (CriticalMass != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(CriticalMass);
      }
      if (BlastWave != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(BlastWave);
      }
      if (BlazingSpeed != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(BlazingSpeed);
      }
      if (FirePower != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(FirePower);
      }
      if (Pyromaniac != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(Pyromaniac);
      }
      if (Combustion != false) {
        output.WriteRawTag(144, 3);
        output.WriteBool(Combustion);
      }
      if (MoltenFury != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(MoltenFury);
      }
      if (FieryPayback != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(FieryPayback);
      }
      if (EmpoweredFire != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(EmpoweredFire);
      }
      if (Firestarter != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(Firestarter);
      }
      if (DragonsBreath != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(DragonsBreath);
      }
      if (HotStreak != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(HotStreak);
      }
      if (Burnout != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(Burnout);
      }
      if (LivingBomb != false) {
        output.WriteRawTag(208, 3);
        output.WriteBool(LivingBomb);
      }
      if (Frostbite != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(Frostbite);
      }
      if (ImprovedFrostbolt != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(ImprovedFrostbolt);
      }
      if (IceFloes != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(IceFloes);
      }
      if (IceShards != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(IceShards);
      }
      if (FrostWarding != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(FrostWarding);
      }
      if (Precision != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(Precision);
      }
      if (Permafrost != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(Permafrost);
      }
      if (PiercingIce != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(PiercingIce);
      }
      if (IcyVeins != false) {
        output.WriteRawTag(152, 4);
        output.WriteBool(IcyVeins);
      }
      if (ImprovedBlizzard != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(ImprovedBlizzard);
      }
      if (ArcticReach != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(ArcticReach);
      }
      if (FrostChanneling != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(FrostChanneling);
      }
      if (Shatter != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(Shatter);
      }
      if (ColdSnap != false) {
        output.WriteRawTag(192, 4);
        output.WriteBool(ColdSnap);
      }
      if (ImprovedConeOfCold != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(ImprovedConeOfCold);
      }
      if (FrozenCore != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(FrozenCore);
      }
      if (ColdAsIce != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(ColdAsIce);
      }
      if (WintersChill != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(WintersChill);
      }
      if (ShatteredBarrier != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(ShatteredBarrier);
      }
      if (IceBarrier != false) {
        output.WriteRawTag(240, 4);
        output.WriteBool(IceBarrier);
      }
      if (ArcticWinds != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(ArcticWinds);
      }
      if (EmpoweredFrostbolt != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(EmpoweredFrostbolt);
      }
      if (FingersOfFrost != 0) {
        output.WriteRawTag(136, 5);
        output.WriteInt32(FingersOfFrost);
      }
      if (BrainFreeze != 0) {
        output.WriteRawTag(144, 5);
        output.WriteInt32(BrainFreeze);
      }
      if (SummonWaterElemental != false) {
        output.WriteRawTag(152, 5);
        output.WriteBool(SummonWaterElemental);
      }
      if (EnduringWinter != 0) {
        output.WriteRawTag(160, 5);
        output.WriteInt32(EnduringWinter);
      }
      if (ChilledToTheBone != 0) {
        output.WriteRawTag(168, 5);
        output.WriteInt32(ChilledToTheBone);
      }
      if (DeepFreeze != false) {
        output.WriteRawTag(176, 5);
        output.WriteBool(DeepFreeze);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ArcaneSubtlety != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ArcaneSubtlety);
      }
      if (ArcaneFocus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ArcaneFocus);
      }
      if (ArcaneStability != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ArcaneStability);
      }
      if (ArcaneFortitude != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ArcaneFortitude);
      }
      if (MagicAbsorption != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MagicAbsorption);
      }
      if (ArcaneConcentration != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ArcaneConcentration);
      }
      if (MagicAttunement != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MagicAttunement);
      }
      if (SpellImpact != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SpellImpact);
      }
      if (StudentOfTheMind != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(StudentOfTheMind);
      }
      if (FocusMagic != false) {
        output.WriteRawTag(80);
        output.WriteBool(FocusMagic);
      }
      if (ArcaneShielding != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ArcaneShielding);
      }
      if (ImprovedCounterspell != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ImprovedCounterspell);
      }
      if (ArcaneMeditation != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ArcaneMeditation);
      }
      if (TormentTheWeak != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(TormentTheWeak);
      }
      if (ImprovedBlink != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ImprovedBlink);
      }
      if (PresenceOfMind != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(PresenceOfMind);
      }
      if (ArcaneMind != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ArcaneMind);
      }
      if (PrismaticCloak != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(PrismaticCloak);
      }
      if (ArcaneInstability != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(ArcaneInstability);
      }
      if (ArcanePotency != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ArcanePotency);
      }
      if (ArcaneEmpowerment != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(ArcaneEmpowerment);
      }
      if (ArcanePower != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(ArcanePower);
      }
      if (IncantersAbsorption != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(IncantersAbsorption);
      }
      if (ArcaneFlows != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(ArcaneFlows);
      }
      if (MindMastery != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(MindMastery);
      }
      if (Slow != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(Slow);
      }
      if (MissileBarrage != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(MissileBarrage);
      }
      if (NetherwindPresence != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(NetherwindPresence);
      }
      if (SpellPower != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(SpellPower);
      }
      if (ArcaneBarrage != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ArcaneBarrage);
      }
      if (ImprovedFireBlast != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(ImprovedFireBlast);
      }
      if (Incineration != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(Incineration);
      }
      if (ImprovedFireball != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(ImprovedFireball);
      }
      if (Ignite != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Ignite);
      }
      if (BurningDetermination != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(BurningDetermination);
      }
      if (WorldInFlames != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(WorldInFlames);
      }
      if (FlameThrowing != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(FlameThrowing);
      }
      if (Impact != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(Impact);
      }
      if (Pyroblast != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(Pyroblast);
      }
      if (BurningSoul != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(BurningSoul);
      }
      if (ImprovedScorch != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(ImprovedScorch);
      }
      if (MoltenShields != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(MoltenShields);
      }
      if (MasterOfElements != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(MasterOfElements);
      }
      if (PlayingWithFire != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(PlayingWithFire);
      }
      if (CriticalMass != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(CriticalMass);
      }
      if (BlastWave != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(BlastWave);
      }
      if (BlazingSpeed != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(BlazingSpeed);
      }
      if (FirePower != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(FirePower);
      }
      if (Pyromaniac != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(Pyromaniac);
      }
      if (Combustion != false) {
        output.WriteRawTag(144, 3);
        output.WriteBool(Combustion);
      }
      if (MoltenFury != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(MoltenFury);
      }
      if (FieryPayback != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(FieryPayback);
      }
      if (EmpoweredFire != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(EmpoweredFire);
      }
      if (Firestarter != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(Firestarter);
      }
      if (DragonsBreath != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(DragonsBreath);
      }
      if (HotStreak != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(HotStreak);
      }
      if (Burnout != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(Burnout);
      }
      if (LivingBomb != false) {
        output.WriteRawTag(208, 3);
        output.WriteBool(LivingBomb);
      }
      if (Frostbite != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(Frostbite);
      }
      if (ImprovedFrostbolt != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(ImprovedFrostbolt);
      }
      if (IceFloes != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(IceFloes);
      }
      if (IceShards != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(IceShards);
      }
      if (FrostWarding != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(FrostWarding);
      }
      if (Precision != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(Precision);
      }
      if (Permafrost != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(Permafrost);
      }
      if (PiercingIce != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(PiercingIce);
      }
      if (IcyVeins != false) {
        output.WriteRawTag(152, 4);
        output.WriteBool(IcyVeins);
      }
      if (ImprovedBlizzard != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(ImprovedBlizzard);
      }
      if (ArcticReach != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(ArcticReach);
      }
      if (FrostChanneling != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(FrostChanneling);
      }
      if (Shatter != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(Shatter);
      }
      if (ColdSnap != false) {
        output.WriteRawTag(192, 4);
        output.WriteBool(ColdSnap);
      }
      if (ImprovedConeOfCold != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(ImprovedConeOfCold);
      }
      if (FrozenCore != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(FrozenCore);
      }
      if (ColdAsIce != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(ColdAsIce);
      }
      if (WintersChill != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(WintersChill);
      }
      if (ShatteredBarrier != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(ShatteredBarrier);
      }
      if (IceBarrier != false) {
        output.WriteRawTag(240, 4);
        output.WriteBool(IceBarrier);
      }
      if (ArcticWinds != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(ArcticWinds);
      }
      if (EmpoweredFrostbolt != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(EmpoweredFrostbolt);
      }
      if (FingersOfFrost != 0) {
        output.WriteRawTag(136, 5);
        output.WriteInt32(FingersOfFrost);
      }
      if (BrainFreeze != 0) {
        output.WriteRawTag(144, 5);
        output.WriteInt32(BrainFreeze);
      }
      if (SummonWaterElemental != false) {
        output.WriteRawTag(152, 5);
        output.WriteBool(SummonWaterElemental);
      }
      if (EnduringWinter != 0) {
        output.WriteRawTag(160, 5);
        output.WriteInt32(EnduringWinter);
      }
      if (ChilledToTheBone != 0) {
        output.WriteRawTag(168, 5);
        output.WriteInt32(ChilledToTheBone);
      }
      if (DeepFreeze != false) {
        output.WriteRawTag(176, 5);
        output.WriteBool(DeepFreeze);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ArcaneSubtlety != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArcaneSubtlety);
      }
      if (ArcaneFocus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArcaneFocus);
      }
      if (ArcaneStability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArcaneStability);
      }
      if (ArcaneFortitude != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArcaneFortitude);
      }
      if (MagicAbsorption != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicAbsorption);
      }
      if (ArcaneConcentration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArcaneConcentration);
      }
      if (MagicAttunement != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicAttunement);
      }
      if (SpellImpact != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpellImpact);
      }
      if (StudentOfTheMind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StudentOfTheMind);
      }
      if (FocusMagic != false) {
        size += 1 + 1;
      }
      if (ArcaneShielding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArcaneShielding);
      }
      if (ImprovedCounterspell != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedCounterspell);
      }
      if (ArcaneMeditation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArcaneMeditation);
      }
      if (TormentTheWeak != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TormentTheWeak);
      }
      if (ImprovedBlink != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedBlink);
      }
      if (PresenceOfMind != false) {
        size += 2 + 1;
      }
      if (ArcaneMind != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ArcaneMind);
      }
      if (PrismaticCloak != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PrismaticCloak);
      }
      if (ArcaneInstability != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ArcaneInstability);
      }
      if (ArcanePotency != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ArcanePotency);
      }
      if (ArcaneEmpowerment != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ArcaneEmpowerment);
      }
      if (ArcanePower != false) {
        size += 2 + 1;
      }
      if (IncantersAbsorption != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IncantersAbsorption);
      }
      if (ArcaneFlows != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ArcaneFlows);
      }
      if (MindMastery != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MindMastery);
      }
      if (Slow != false) {
        size += 2 + 1;
      }
      if (MissileBarrage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MissileBarrage);
      }
      if (NetherwindPresence != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NetherwindPresence);
      }
      if (SpellPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellPower);
      }
      if (ArcaneBarrage != false) {
        size += 2 + 1;
      }
      if (ImprovedFireBlast != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedFireBlast);
      }
      if (Incineration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Incineration);
      }
      if (ImprovedFireball != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedFireball);
      }
      if (Ignite != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ignite);
      }
      if (BurningDetermination != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BurningDetermination);
      }
      if (WorldInFlames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WorldInFlames);
      }
      if (FlameThrowing != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FlameThrowing);
      }
      if (Impact != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Impact);
      }
      if (Pyroblast != false) {
        size += 2 + 1;
      }
      if (BurningSoul != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BurningSoul);
      }
      if (ImprovedScorch != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedScorch);
      }
      if (MoltenShields != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MoltenShields);
      }
      if (MasterOfElements != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MasterOfElements);
      }
      if (PlayingWithFire != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayingWithFire);
      }
      if (CriticalMass != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CriticalMass);
      }
      if (BlastWave != false) {
        size += 2 + 1;
      }
      if (BlazingSpeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BlazingSpeed);
      }
      if (FirePower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FirePower);
      }
      if (Pyromaniac != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Pyromaniac);
      }
      if (Combustion != false) {
        size += 2 + 1;
      }
      if (MoltenFury != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MoltenFury);
      }
      if (FieryPayback != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FieryPayback);
      }
      if (EmpoweredFire != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EmpoweredFire);
      }
      if (Firestarter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Firestarter);
      }
      if (DragonsBreath != false) {
        size += 2 + 1;
      }
      if (HotStreak != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HotStreak);
      }
      if (Burnout != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Burnout);
      }
      if (LivingBomb != false) {
        size += 2 + 1;
      }
      if (Frostbite != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Frostbite);
      }
      if (ImprovedFrostbolt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedFrostbolt);
      }
      if (IceFloes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IceFloes);
      }
      if (IceShards != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IceShards);
      }
      if (FrostWarding != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FrostWarding);
      }
      if (Precision != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Precision);
      }
      if (Permafrost != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Permafrost);
      }
      if (PiercingIce != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PiercingIce);
      }
      if (IcyVeins != false) {
        size += 2 + 1;
      }
      if (ImprovedBlizzard != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedBlizzard);
      }
      if (ArcticReach != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ArcticReach);
      }
      if (FrostChanneling != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FrostChanneling);
      }
      if (Shatter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Shatter);
      }
      if (ColdSnap != false) {
        size += 2 + 1;
      }
      if (ImprovedConeOfCold != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedConeOfCold);
      }
      if (FrozenCore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FrozenCore);
      }
      if (ColdAsIce != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ColdAsIce);
      }
      if (WintersChill != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WintersChill);
      }
      if (ShatteredBarrier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShatteredBarrier);
      }
      if (IceBarrier != false) {
        size += 2 + 1;
      }
      if (ArcticWinds != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ArcticWinds);
      }
      if (EmpoweredFrostbolt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EmpoweredFrostbolt);
      }
      if (FingersOfFrost != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FingersOfFrost);
      }
      if (BrainFreeze != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BrainFreeze);
      }
      if (SummonWaterElemental != false) {
        size += 2 + 1;
      }
      if (EnduringWinter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EnduringWinter);
      }
      if (ChilledToTheBone != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChilledToTheBone);
      }
      if (DeepFreeze != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MageTalents other) {
      if (other == null) {
        return;
      }
      if (other.ArcaneSubtlety != 0) {
        ArcaneSubtlety = other.ArcaneSubtlety;
      }
      if (other.ArcaneFocus != 0) {
        ArcaneFocus = other.ArcaneFocus;
      }
      if (other.ArcaneStability != 0) {
        ArcaneStability = other.ArcaneStability;
      }
      if (other.ArcaneFortitude != 0) {
        ArcaneFortitude = other.ArcaneFortitude;
      }
      if (other.MagicAbsorption != 0) {
        MagicAbsorption = other.MagicAbsorption;
      }
      if (other.ArcaneConcentration != 0) {
        ArcaneConcentration = other.ArcaneConcentration;
      }
      if (other.MagicAttunement != 0) {
        MagicAttunement = other.MagicAttunement;
      }
      if (other.SpellImpact != 0) {
        SpellImpact = other.SpellImpact;
      }
      if (other.StudentOfTheMind != 0) {
        StudentOfTheMind = other.StudentOfTheMind;
      }
      if (other.FocusMagic != false) {
        FocusMagic = other.FocusMagic;
      }
      if (other.ArcaneShielding != 0) {
        ArcaneShielding = other.ArcaneShielding;
      }
      if (other.ImprovedCounterspell != 0) {
        ImprovedCounterspell = other.ImprovedCounterspell;
      }
      if (other.ArcaneMeditation != 0) {
        ArcaneMeditation = other.ArcaneMeditation;
      }
      if (other.TormentTheWeak != 0) {
        TormentTheWeak = other.TormentTheWeak;
      }
      if (other.ImprovedBlink != 0) {
        ImprovedBlink = other.ImprovedBlink;
      }
      if (other.PresenceOfMind != false) {
        PresenceOfMind = other.PresenceOfMind;
      }
      if (other.ArcaneMind != 0) {
        ArcaneMind = other.ArcaneMind;
      }
      if (other.PrismaticCloak != 0) {
        PrismaticCloak = other.PrismaticCloak;
      }
      if (other.ArcaneInstability != 0) {
        ArcaneInstability = other.ArcaneInstability;
      }
      if (other.ArcanePotency != 0) {
        ArcanePotency = other.ArcanePotency;
      }
      if (other.ArcaneEmpowerment != 0) {
        ArcaneEmpowerment = other.ArcaneEmpowerment;
      }
      if (other.ArcanePower != false) {
        ArcanePower = other.ArcanePower;
      }
      if (other.IncantersAbsorption != 0) {
        IncantersAbsorption = other.IncantersAbsorption;
      }
      if (other.ArcaneFlows != 0) {
        ArcaneFlows = other.ArcaneFlows;
      }
      if (other.MindMastery != 0) {
        MindMastery = other.MindMastery;
      }
      if (other.Slow != false) {
        Slow = other.Slow;
      }
      if (other.MissileBarrage != 0) {
        MissileBarrage = other.MissileBarrage;
      }
      if (other.NetherwindPresence != 0) {
        NetherwindPresence = other.NetherwindPresence;
      }
      if (other.SpellPower != 0) {
        SpellPower = other.SpellPower;
      }
      if (other.ArcaneBarrage != false) {
        ArcaneBarrage = other.ArcaneBarrage;
      }
      if (other.ImprovedFireBlast != 0) {
        ImprovedFireBlast = other.ImprovedFireBlast;
      }
      if (other.Incineration != 0) {
        Incineration = other.Incineration;
      }
      if (other.ImprovedFireball != 0) {
        ImprovedFireball = other.ImprovedFireball;
      }
      if (other.Ignite != 0) {
        Ignite = other.Ignite;
      }
      if (other.BurningDetermination != 0) {
        BurningDetermination = other.BurningDetermination;
      }
      if (other.WorldInFlames != 0) {
        WorldInFlames = other.WorldInFlames;
      }
      if (other.FlameThrowing != 0) {
        FlameThrowing = other.FlameThrowing;
      }
      if (other.Impact != 0) {
        Impact = other.Impact;
      }
      if (other.Pyroblast != false) {
        Pyroblast = other.Pyroblast;
      }
      if (other.BurningSoul != 0) {
        BurningSoul = other.BurningSoul;
      }
      if (other.ImprovedScorch != 0) {
        ImprovedScorch = other.ImprovedScorch;
      }
      if (other.MoltenShields != 0) {
        MoltenShields = other.MoltenShields;
      }
      if (other.MasterOfElements != 0) {
        MasterOfElements = other.MasterOfElements;
      }
      if (other.PlayingWithFire != 0) {
        PlayingWithFire = other.PlayingWithFire;
      }
      if (other.CriticalMass != 0) {
        CriticalMass = other.CriticalMass;
      }
      if (other.BlastWave != false) {
        BlastWave = other.BlastWave;
      }
      if (other.BlazingSpeed != 0) {
        BlazingSpeed = other.BlazingSpeed;
      }
      if (other.FirePower != 0) {
        FirePower = other.FirePower;
      }
      if (other.Pyromaniac != 0) {
        Pyromaniac = other.Pyromaniac;
      }
      if (other.Combustion != false) {
        Combustion = other.Combustion;
      }
      if (other.MoltenFury != 0) {
        MoltenFury = other.MoltenFury;
      }
      if (other.FieryPayback != 0) {
        FieryPayback = other.FieryPayback;
      }
      if (other.EmpoweredFire != 0) {
        EmpoweredFire = other.EmpoweredFire;
      }
      if (other.Firestarter != 0) {
        Firestarter = other.Firestarter;
      }
      if (other.DragonsBreath != false) {
        DragonsBreath = other.DragonsBreath;
      }
      if (other.HotStreak != 0) {
        HotStreak = other.HotStreak;
      }
      if (other.Burnout != 0) {
        Burnout = other.Burnout;
      }
      if (other.LivingBomb != false) {
        LivingBomb = other.LivingBomb;
      }
      if (other.Frostbite != 0) {
        Frostbite = other.Frostbite;
      }
      if (other.ImprovedFrostbolt != 0) {
        ImprovedFrostbolt = other.ImprovedFrostbolt;
      }
      if (other.IceFloes != 0) {
        IceFloes = other.IceFloes;
      }
      if (other.IceShards != 0) {
        IceShards = other.IceShards;
      }
      if (other.FrostWarding != 0) {
        FrostWarding = other.FrostWarding;
      }
      if (other.Precision != 0) {
        Precision = other.Precision;
      }
      if (other.Permafrost != 0) {
        Permafrost = other.Permafrost;
      }
      if (other.PiercingIce != 0) {
        PiercingIce = other.PiercingIce;
      }
      if (other.IcyVeins != false) {
        IcyVeins = other.IcyVeins;
      }
      if (other.ImprovedBlizzard != 0) {
        ImprovedBlizzard = other.ImprovedBlizzard;
      }
      if (other.ArcticReach != 0) {
        ArcticReach = other.ArcticReach;
      }
      if (other.FrostChanneling != 0) {
        FrostChanneling = other.FrostChanneling;
      }
      if (other.Shatter != 0) {
        Shatter = other.Shatter;
      }
      if (other.ColdSnap != false) {
        ColdSnap = other.ColdSnap;
      }
      if (other.ImprovedConeOfCold != 0) {
        ImprovedConeOfCold = other.ImprovedConeOfCold;
      }
      if (other.FrozenCore != 0) {
        FrozenCore = other.FrozenCore;
      }
      if (other.ColdAsIce != 0) {
        ColdAsIce = other.ColdAsIce;
      }
      if (other.WintersChill != 0) {
        WintersChill = other.WintersChill;
      }
      if (other.ShatteredBarrier != 0) {
        ShatteredBarrier = other.ShatteredBarrier;
      }
      if (other.IceBarrier != false) {
        IceBarrier = other.IceBarrier;
      }
      if (other.ArcticWinds != 0) {
        ArcticWinds = other.ArcticWinds;
      }
      if (other.EmpoweredFrostbolt != 0) {
        EmpoweredFrostbolt = other.EmpoweredFrostbolt;
      }
      if (other.FingersOfFrost != 0) {
        FingersOfFrost = other.FingersOfFrost;
      }
      if (other.BrainFreeze != 0) {
        BrainFreeze = other.BrainFreeze;
      }
      if (other.SummonWaterElemental != false) {
        SummonWaterElemental = other.SummonWaterElemental;
      }
      if (other.EnduringWinter != 0) {
        EnduringWinter = other.EnduringWinter;
      }
      if (other.ChilledToTheBone != 0) {
        ChilledToTheBone = other.ChilledToTheBone;
      }
      if (other.DeepFreeze != false) {
        DeepFreeze = other.DeepFreeze;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ArcaneSubtlety = input.ReadInt32();
            break;
          }
          case 16: {
            ArcaneFocus = input.ReadInt32();
            break;
          }
          case 24: {
            ArcaneStability = input.ReadInt32();
            break;
          }
          case 32: {
            ArcaneFortitude = input.ReadInt32();
            break;
          }
          case 40: {
            MagicAbsorption = input.ReadInt32();
            break;
          }
          case 48: {
            ArcaneConcentration = input.ReadInt32();
            break;
          }
          case 56: {
            MagicAttunement = input.ReadInt32();
            break;
          }
          case 64: {
            SpellImpact = input.ReadInt32();
            break;
          }
          case 72: {
            StudentOfTheMind = input.ReadInt32();
            break;
          }
          case 80: {
            FocusMagic = input.ReadBool();
            break;
          }
          case 88: {
            ArcaneShielding = input.ReadInt32();
            break;
          }
          case 96: {
            ImprovedCounterspell = input.ReadInt32();
            break;
          }
          case 104: {
            ArcaneMeditation = input.ReadInt32();
            break;
          }
          case 112: {
            TormentTheWeak = input.ReadInt32();
            break;
          }
          case 120: {
            ImprovedBlink = input.ReadInt32();
            break;
          }
          case 128: {
            PresenceOfMind = input.ReadBool();
            break;
          }
          case 136: {
            ArcaneMind = input.ReadInt32();
            break;
          }
          case 144: {
            PrismaticCloak = input.ReadInt32();
            break;
          }
          case 152: {
            ArcaneInstability = input.ReadInt32();
            break;
          }
          case 160: {
            ArcanePotency = input.ReadInt32();
            break;
          }
          case 168: {
            ArcaneEmpowerment = input.ReadInt32();
            break;
          }
          case 176: {
            ArcanePower = input.ReadBool();
            break;
          }
          case 184: {
            IncantersAbsorption = input.ReadInt32();
            break;
          }
          case 192: {
            ArcaneFlows = input.ReadInt32();
            break;
          }
          case 200: {
            MindMastery = input.ReadInt32();
            break;
          }
          case 208: {
            Slow = input.ReadBool();
            break;
          }
          case 216: {
            MissileBarrage = input.ReadInt32();
            break;
          }
          case 224: {
            NetherwindPresence = input.ReadInt32();
            break;
          }
          case 232: {
            SpellPower = input.ReadInt32();
            break;
          }
          case 240: {
            ArcaneBarrage = input.ReadBool();
            break;
          }
          case 248: {
            ImprovedFireBlast = input.ReadInt32();
            break;
          }
          case 256: {
            Incineration = input.ReadInt32();
            break;
          }
          case 264: {
            ImprovedFireball = input.ReadInt32();
            break;
          }
          case 272: {
            Ignite = input.ReadInt32();
            break;
          }
          case 280: {
            BurningDetermination = input.ReadInt32();
            break;
          }
          case 288: {
            WorldInFlames = input.ReadInt32();
            break;
          }
          case 296: {
            FlameThrowing = input.ReadInt32();
            break;
          }
          case 304: {
            Impact = input.ReadInt32();
            break;
          }
          case 312: {
            Pyroblast = input.ReadBool();
            break;
          }
          case 320: {
            BurningSoul = input.ReadInt32();
            break;
          }
          case 328: {
            ImprovedScorch = input.ReadInt32();
            break;
          }
          case 336: {
            MoltenShields = input.ReadInt32();
            break;
          }
          case 344: {
            MasterOfElements = input.ReadInt32();
            break;
          }
          case 352: {
            PlayingWithFire = input.ReadInt32();
            break;
          }
          case 360: {
            CriticalMass = input.ReadInt32();
            break;
          }
          case 368: {
            BlastWave = input.ReadBool();
            break;
          }
          case 376: {
            BlazingSpeed = input.ReadInt32();
            break;
          }
          case 384: {
            FirePower = input.ReadInt32();
            break;
          }
          case 392: {
            Pyromaniac = input.ReadInt32();
            break;
          }
          case 400: {
            Combustion = input.ReadBool();
            break;
          }
          case 408: {
            MoltenFury = input.ReadInt32();
            break;
          }
          case 416: {
            FieryPayback = input.ReadInt32();
            break;
          }
          case 424: {
            EmpoweredFire = input.ReadInt32();
            break;
          }
          case 432: {
            Firestarter = input.ReadInt32();
            break;
          }
          case 440: {
            DragonsBreath = input.ReadBool();
            break;
          }
          case 448: {
            HotStreak = input.ReadInt32();
            break;
          }
          case 456: {
            Burnout = input.ReadInt32();
            break;
          }
          case 464: {
            LivingBomb = input.ReadBool();
            break;
          }
          case 472: {
            Frostbite = input.ReadInt32();
            break;
          }
          case 480: {
            ImprovedFrostbolt = input.ReadInt32();
            break;
          }
          case 488: {
            IceFloes = input.ReadInt32();
            break;
          }
          case 496: {
            IceShards = input.ReadInt32();
            break;
          }
          case 504: {
            FrostWarding = input.ReadInt32();
            break;
          }
          case 512: {
            Precision = input.ReadInt32();
            break;
          }
          case 520: {
            Permafrost = input.ReadInt32();
            break;
          }
          case 528: {
            PiercingIce = input.ReadInt32();
            break;
          }
          case 536: {
            IcyVeins = input.ReadBool();
            break;
          }
          case 544: {
            ImprovedBlizzard = input.ReadInt32();
            break;
          }
          case 552: {
            ArcticReach = input.ReadInt32();
            break;
          }
          case 560: {
            FrostChanneling = input.ReadInt32();
            break;
          }
          case 568: {
            Shatter = input.ReadInt32();
            break;
          }
          case 576: {
            ColdSnap = input.ReadBool();
            break;
          }
          case 584: {
            ImprovedConeOfCold = input.ReadInt32();
            break;
          }
          case 592: {
            FrozenCore = input.ReadInt32();
            break;
          }
          case 600: {
            ColdAsIce = input.ReadInt32();
            break;
          }
          case 608: {
            WintersChill = input.ReadInt32();
            break;
          }
          case 616: {
            ShatteredBarrier = input.ReadInt32();
            break;
          }
          case 624: {
            IceBarrier = input.ReadBool();
            break;
          }
          case 632: {
            ArcticWinds = input.ReadInt32();
            break;
          }
          case 640: {
            EmpoweredFrostbolt = input.ReadInt32();
            break;
          }
          case 648: {
            FingersOfFrost = input.ReadInt32();
            break;
          }
          case 656: {
            BrainFreeze = input.ReadInt32();
            break;
          }
          case 664: {
            SummonWaterElemental = input.ReadBool();
            break;
          }
          case 672: {
            EnduringWinter = input.ReadInt32();
            break;
          }
          case 680: {
            ChilledToTheBone = input.ReadInt32();
            break;
          }
          case 688: {
            DeepFreeze = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ArcaneSubtlety = input.ReadInt32();
            break;
          }
          case 16: {
            ArcaneFocus = input.ReadInt32();
            break;
          }
          case 24: {
            ArcaneStability = input.ReadInt32();
            break;
          }
          case 32: {
            ArcaneFortitude = input.ReadInt32();
            break;
          }
          case 40: {
            MagicAbsorption = input.ReadInt32();
            break;
          }
          case 48: {
            ArcaneConcentration = input.ReadInt32();
            break;
          }
          case 56: {
            MagicAttunement = input.ReadInt32();
            break;
          }
          case 64: {
            SpellImpact = input.ReadInt32();
            break;
          }
          case 72: {
            StudentOfTheMind = input.ReadInt32();
            break;
          }
          case 80: {
            FocusMagic = input.ReadBool();
            break;
          }
          case 88: {
            ArcaneShielding = input.ReadInt32();
            break;
          }
          case 96: {
            ImprovedCounterspell = input.ReadInt32();
            break;
          }
          case 104: {
            ArcaneMeditation = input.ReadInt32();
            break;
          }
          case 112: {
            TormentTheWeak = input.ReadInt32();
            break;
          }
          case 120: {
            ImprovedBlink = input.ReadInt32();
            break;
          }
          case 128: {
            PresenceOfMind = input.ReadBool();
            break;
          }
          case 136: {
            ArcaneMind = input.ReadInt32();
            break;
          }
          case 144: {
            PrismaticCloak = input.ReadInt32();
            break;
          }
          case 152: {
            ArcaneInstability = input.ReadInt32();
            break;
          }
          case 160: {
            ArcanePotency = input.ReadInt32();
            break;
          }
          case 168: {
            ArcaneEmpowerment = input.ReadInt32();
            break;
          }
          case 176: {
            ArcanePower = input.ReadBool();
            break;
          }
          case 184: {
            IncantersAbsorption = input.ReadInt32();
            break;
          }
          case 192: {
            ArcaneFlows = input.ReadInt32();
            break;
          }
          case 200: {
            MindMastery = input.ReadInt32();
            break;
          }
          case 208: {
            Slow = input.ReadBool();
            break;
          }
          case 216: {
            MissileBarrage = input.ReadInt32();
            break;
          }
          case 224: {
            NetherwindPresence = input.ReadInt32();
            break;
          }
          case 232: {
            SpellPower = input.ReadInt32();
            break;
          }
          case 240: {
            ArcaneBarrage = input.ReadBool();
            break;
          }
          case 248: {
            ImprovedFireBlast = input.ReadInt32();
            break;
          }
          case 256: {
            Incineration = input.ReadInt32();
            break;
          }
          case 264: {
            ImprovedFireball = input.ReadInt32();
            break;
          }
          case 272: {
            Ignite = input.ReadInt32();
            break;
          }
          case 280: {
            BurningDetermination = input.ReadInt32();
            break;
          }
          case 288: {
            WorldInFlames = input.ReadInt32();
            break;
          }
          case 296: {
            FlameThrowing = input.ReadInt32();
            break;
          }
          case 304: {
            Impact = input.ReadInt32();
            break;
          }
          case 312: {
            Pyroblast = input.ReadBool();
            break;
          }
          case 320: {
            BurningSoul = input.ReadInt32();
            break;
          }
          case 328: {
            ImprovedScorch = input.ReadInt32();
            break;
          }
          case 336: {
            MoltenShields = input.ReadInt32();
            break;
          }
          case 344: {
            MasterOfElements = input.ReadInt32();
            break;
          }
          case 352: {
            PlayingWithFire = input.ReadInt32();
            break;
          }
          case 360: {
            CriticalMass = input.ReadInt32();
            break;
          }
          case 368: {
            BlastWave = input.ReadBool();
            break;
          }
          case 376: {
            BlazingSpeed = input.ReadInt32();
            break;
          }
          case 384: {
            FirePower = input.ReadInt32();
            break;
          }
          case 392: {
            Pyromaniac = input.ReadInt32();
            break;
          }
          case 400: {
            Combustion = input.ReadBool();
            break;
          }
          case 408: {
            MoltenFury = input.ReadInt32();
            break;
          }
          case 416: {
            FieryPayback = input.ReadInt32();
            break;
          }
          case 424: {
            EmpoweredFire = input.ReadInt32();
            break;
          }
          case 432: {
            Firestarter = input.ReadInt32();
            break;
          }
          case 440: {
            DragonsBreath = input.ReadBool();
            break;
          }
          case 448: {
            HotStreak = input.ReadInt32();
            break;
          }
          case 456: {
            Burnout = input.ReadInt32();
            break;
          }
          case 464: {
            LivingBomb = input.ReadBool();
            break;
          }
          case 472: {
            Frostbite = input.ReadInt32();
            break;
          }
          case 480: {
            ImprovedFrostbolt = input.ReadInt32();
            break;
          }
          case 488: {
            IceFloes = input.ReadInt32();
            break;
          }
          case 496: {
            IceShards = input.ReadInt32();
            break;
          }
          case 504: {
            FrostWarding = input.ReadInt32();
            break;
          }
          case 512: {
            Precision = input.ReadInt32();
            break;
          }
          case 520: {
            Permafrost = input.ReadInt32();
            break;
          }
          case 528: {
            PiercingIce = input.ReadInt32();
            break;
          }
          case 536: {
            IcyVeins = input.ReadBool();
            break;
          }
          case 544: {
            ImprovedBlizzard = input.ReadInt32();
            break;
          }
          case 552: {
            ArcticReach = input.ReadInt32();
            break;
          }
          case 560: {
            FrostChanneling = input.ReadInt32();
            break;
          }
          case 568: {
            Shatter = input.ReadInt32();
            break;
          }
          case 576: {
            ColdSnap = input.ReadBool();
            break;
          }
          case 584: {
            ImprovedConeOfCold = input.ReadInt32();
            break;
          }
          case 592: {
            FrozenCore = input.ReadInt32();
            break;
          }
          case 600: {
            ColdAsIce = input.ReadInt32();
            break;
          }
          case 608: {
            WintersChill = input.ReadInt32();
            break;
          }
          case 616: {
            ShatteredBarrier = input.ReadInt32();
            break;
          }
          case 624: {
            IceBarrier = input.ReadBool();
            break;
          }
          case 632: {
            ArcticWinds = input.ReadInt32();
            break;
          }
          case 640: {
            EmpoweredFrostbolt = input.ReadInt32();
            break;
          }
          case 648: {
            FingersOfFrost = input.ReadInt32();
            break;
          }
          case 656: {
            BrainFreeze = input.ReadInt32();
            break;
          }
          case 664: {
            SummonWaterElemental = input.ReadBool();
            break;
          }
          case 672: {
            EnduringWinter = input.ReadInt32();
            break;
          }
          case 680: {
            ChilledToTheBone = input.ReadInt32();
            break;
          }
          case 688: {
            DeepFreeze = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Mage : pb::IMessage<Mage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Mage> _parser = new pb::MessageParser<Mage>(() => new Mage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Mage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.MageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Mage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Mage(Mage other) : this() {
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Mage Clone() {
      return new Mage(this);
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::SirusDbScrapper.UIDatabase.Mage.Types.Options options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SirusDbScrapper.UIDatabase.Mage.Types.Options Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Mage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Mage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Mage other) {
      if (other == null) {
        return;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::SirusDbScrapper.UIDatabase.Mage.Types.Options();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.Mage.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.Mage.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Mage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Rotation : pb::IMessage<Rotation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Rotation> _parser = new pb::MessageParser<Rotation>(() => new Rotation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Rotation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.Mage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation(Rotation other) : this() {
          missileBarrageBelowManaPercent_ = other.missileBarrageBelowManaPercent_;
          blastWithoutMissileBarrageAboveManaPercent_ = other.blastWithoutMissileBarrageAboveManaPercent_;
          only3ArcaneBlastStacksBelowManaPercent_ = other.only3ArcaneBlastStacksBelowManaPercent_;
          useArcaneBarrage_ = other.useArcaneBarrage_;
          primaryFireSpell_ = other.primaryFireSpell_;
          maintainImprovedScorch_ = other.maintainImprovedScorch_;
          useIceLance_ = other.useIceLance_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation Clone() {
          return new Rotation(this);
        }

        /// <summary>Field number for the "missile_barrage_below_mana_percent" field.</summary>
        public const int MissileBarrageBelowManaPercentFieldNumber = 15;
        private double missileBarrageBelowManaPercent_;
        /// <summary>
        /// Arcane Options.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double MissileBarrageBelowManaPercent {
          get { return missileBarrageBelowManaPercent_; }
          set {
            missileBarrageBelowManaPercent_ = value;
          }
        }

        /// <summary>Field number for the "blast_without_missile_barrage_above_mana_percent" field.</summary>
        public const int BlastWithoutMissileBarrageAboveManaPercentFieldNumber = 16;
        private double blastWithoutMissileBarrageAboveManaPercent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double BlastWithoutMissileBarrageAboveManaPercent {
          get { return blastWithoutMissileBarrageAboveManaPercent_; }
          set {
            blastWithoutMissileBarrageAboveManaPercent_ = value;
          }
        }

        /// <summary>Field number for the "only_3_arcane_blast_stacks_below_mana_percent" field.</summary>
        public const int Only3ArcaneBlastStacksBelowManaPercentFieldNumber = 17;
        private double only3ArcaneBlastStacksBelowManaPercent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Only3ArcaneBlastStacksBelowManaPercent {
          get { return only3ArcaneBlastStacksBelowManaPercent_; }
          set {
            only3ArcaneBlastStacksBelowManaPercent_ = value;
          }
        }

        /// <summary>Field number for the "use_arcane_barrage" field.</summary>
        public const int UseArcaneBarrageFieldNumber = 20;
        private bool useArcaneBarrage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool UseArcaneBarrage {
          get { return useArcaneBarrage_; }
          set {
            useArcaneBarrage_ = value;
          }
        }

        /// <summary>Field number for the "primary_fire_spell" field.</summary>
        public const int PrimaryFireSpellFieldNumber = 3;
        private global::SirusDbScrapper.UIDatabase.Mage.Types.Rotation.Types.PrimaryFireSpell primaryFireSpell_ = global::SirusDbScrapper.UIDatabase.Mage.Types.Rotation.Types.PrimaryFireSpell.Fireball;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.Mage.Types.Rotation.Types.PrimaryFireSpell PrimaryFireSpell {
          get { return primaryFireSpell_; }
          set {
            primaryFireSpell_ = value;
          }
        }

        /// <summary>Field number for the "maintain_improved_scorch" field.</summary>
        public const int MaintainImprovedScorchFieldNumber = 4;
        private bool maintainImprovedScorch_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool MaintainImprovedScorch {
          get { return maintainImprovedScorch_; }
          set {
            maintainImprovedScorch_ = value;
          }
        }

        /// <summary>Field number for the "use_ice_lance" field.</summary>
        public const int UseIceLanceFieldNumber = 18;
        private bool useIceLance_;
        /// <summary>
        /// Frost Options.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool UseIceLance {
          get { return useIceLance_; }
          set {
            useIceLance_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Rotation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Rotation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MissileBarrageBelowManaPercent, other.MissileBarrageBelowManaPercent)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BlastWithoutMissileBarrageAboveManaPercent, other.BlastWithoutMissileBarrageAboveManaPercent)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Only3ArcaneBlastStacksBelowManaPercent, other.Only3ArcaneBlastStacksBelowManaPercent)) return false;
          if (UseArcaneBarrage != other.UseArcaneBarrage) return false;
          if (PrimaryFireSpell != other.PrimaryFireSpell) return false;
          if (MaintainImprovedScorch != other.MaintainImprovedScorch) return false;
          if (UseIceLance != other.UseIceLance) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (MissileBarrageBelowManaPercent != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MissileBarrageBelowManaPercent);
          if (BlastWithoutMissileBarrageAboveManaPercent != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BlastWithoutMissileBarrageAboveManaPercent);
          if (Only3ArcaneBlastStacksBelowManaPercent != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Only3ArcaneBlastStacksBelowManaPercent);
          if (UseArcaneBarrage != false) hash ^= UseArcaneBarrage.GetHashCode();
          if (PrimaryFireSpell != global::SirusDbScrapper.UIDatabase.Mage.Types.Rotation.Types.PrimaryFireSpell.Fireball) hash ^= PrimaryFireSpell.GetHashCode();
          if (MaintainImprovedScorch != false) hash ^= MaintainImprovedScorch.GetHashCode();
          if (UseIceLance != false) hash ^= UseIceLance.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (PrimaryFireSpell != global::SirusDbScrapper.UIDatabase.Mage.Types.Rotation.Types.PrimaryFireSpell.Fireball) {
            output.WriteRawTag(24);
            output.WriteEnum((int) PrimaryFireSpell);
          }
          if (MaintainImprovedScorch != false) {
            output.WriteRawTag(32);
            output.WriteBool(MaintainImprovedScorch);
          }
          if (MissileBarrageBelowManaPercent != 0D) {
            output.WriteRawTag(121);
            output.WriteDouble(MissileBarrageBelowManaPercent);
          }
          if (BlastWithoutMissileBarrageAboveManaPercent != 0D) {
            output.WriteRawTag(129, 1);
            output.WriteDouble(BlastWithoutMissileBarrageAboveManaPercent);
          }
          if (Only3ArcaneBlastStacksBelowManaPercent != 0D) {
            output.WriteRawTag(137, 1);
            output.WriteDouble(Only3ArcaneBlastStacksBelowManaPercent);
          }
          if (UseIceLance != false) {
            output.WriteRawTag(144, 1);
            output.WriteBool(UseIceLance);
          }
          if (UseArcaneBarrage != false) {
            output.WriteRawTag(160, 1);
            output.WriteBool(UseArcaneBarrage);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (PrimaryFireSpell != global::SirusDbScrapper.UIDatabase.Mage.Types.Rotation.Types.PrimaryFireSpell.Fireball) {
            output.WriteRawTag(24);
            output.WriteEnum((int) PrimaryFireSpell);
          }
          if (MaintainImprovedScorch != false) {
            output.WriteRawTag(32);
            output.WriteBool(MaintainImprovedScorch);
          }
          if (MissileBarrageBelowManaPercent != 0D) {
            output.WriteRawTag(121);
            output.WriteDouble(MissileBarrageBelowManaPercent);
          }
          if (BlastWithoutMissileBarrageAboveManaPercent != 0D) {
            output.WriteRawTag(129, 1);
            output.WriteDouble(BlastWithoutMissileBarrageAboveManaPercent);
          }
          if (Only3ArcaneBlastStacksBelowManaPercent != 0D) {
            output.WriteRawTag(137, 1);
            output.WriteDouble(Only3ArcaneBlastStacksBelowManaPercent);
          }
          if (UseIceLance != false) {
            output.WriteRawTag(144, 1);
            output.WriteBool(UseIceLance);
          }
          if (UseArcaneBarrage != false) {
            output.WriteRawTag(160, 1);
            output.WriteBool(UseArcaneBarrage);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (MissileBarrageBelowManaPercent != 0D) {
            size += 1 + 8;
          }
          if (BlastWithoutMissileBarrageAboveManaPercent != 0D) {
            size += 2 + 8;
          }
          if (Only3ArcaneBlastStacksBelowManaPercent != 0D) {
            size += 2 + 8;
          }
          if (UseArcaneBarrage != false) {
            size += 2 + 1;
          }
          if (PrimaryFireSpell != global::SirusDbScrapper.UIDatabase.Mage.Types.Rotation.Types.PrimaryFireSpell.Fireball) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrimaryFireSpell);
          }
          if (MaintainImprovedScorch != false) {
            size += 1 + 1;
          }
          if (UseIceLance != false) {
            size += 2 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Rotation other) {
          if (other == null) {
            return;
          }
          if (other.MissileBarrageBelowManaPercent != 0D) {
            MissileBarrageBelowManaPercent = other.MissileBarrageBelowManaPercent;
          }
          if (other.BlastWithoutMissileBarrageAboveManaPercent != 0D) {
            BlastWithoutMissileBarrageAboveManaPercent = other.BlastWithoutMissileBarrageAboveManaPercent;
          }
          if (other.Only3ArcaneBlastStacksBelowManaPercent != 0D) {
            Only3ArcaneBlastStacksBelowManaPercent = other.Only3ArcaneBlastStacksBelowManaPercent;
          }
          if (other.UseArcaneBarrage != false) {
            UseArcaneBarrage = other.UseArcaneBarrage;
          }
          if (other.PrimaryFireSpell != global::SirusDbScrapper.UIDatabase.Mage.Types.Rotation.Types.PrimaryFireSpell.Fireball) {
            PrimaryFireSpell = other.PrimaryFireSpell;
          }
          if (other.MaintainImprovedScorch != false) {
            MaintainImprovedScorch = other.MaintainImprovedScorch;
          }
          if (other.UseIceLance != false) {
            UseIceLance = other.UseIceLance;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 24: {
                PrimaryFireSpell = (global::SirusDbScrapper.UIDatabase.Mage.Types.Rotation.Types.PrimaryFireSpell) input.ReadEnum();
                break;
              }
              case 32: {
                MaintainImprovedScorch = input.ReadBool();
                break;
              }
              case 121: {
                MissileBarrageBelowManaPercent = input.ReadDouble();
                break;
              }
              case 129: {
                BlastWithoutMissileBarrageAboveManaPercent = input.ReadDouble();
                break;
              }
              case 137: {
                Only3ArcaneBlastStacksBelowManaPercent = input.ReadDouble();
                break;
              }
              case 144: {
                UseIceLance = input.ReadBool();
                break;
              }
              case 160: {
                UseArcaneBarrage = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 24: {
                PrimaryFireSpell = (global::SirusDbScrapper.UIDatabase.Mage.Types.Rotation.Types.PrimaryFireSpell) input.ReadEnum();
                break;
              }
              case 32: {
                MaintainImprovedScorch = input.ReadBool();
                break;
              }
              case 121: {
                MissileBarrageBelowManaPercent = input.ReadDouble();
                break;
              }
              case 129: {
                BlastWithoutMissileBarrageAboveManaPercent = input.ReadDouble();
                break;
              }
              case 137: {
                Only3ArcaneBlastStacksBelowManaPercent = input.ReadDouble();
                break;
              }
              case 144: {
                UseIceLance = input.ReadBool();
                break;
              }
              case 160: {
                UseArcaneBarrage = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Rotation message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          /// <summary>
          /// Fire Options.
          /// </summary>
          public enum PrimaryFireSpell {
            [pbr::OriginalName("Fireball")] Fireball = 0,
            [pbr::OriginalName("FrostfireBolt")] FrostfireBolt = 1,
            [pbr::OriginalName("Scorch")] Scorch = 2,
          }

        }
        #endregion

      }

      public sealed partial class Options : pb::IMessage<Options>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Options> _parser = new pb::MessageParser<Options>(() => new Options());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Options> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.Mage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options(Options other) : this() {
          armor_ = other.armor_;
          focusMagicPercentUptime_ = other.focusMagicPercentUptime_;
          focusMagicTarget_ = other.focusMagicTarget_ != null ? other.focusMagicTarget_.Clone() : null;
          waterElementalDisobeyChance_ = other.waterElementalDisobeyChance_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options Clone() {
          return new Options(this);
        }

        /// <summary>Field number for the "armor" field.</summary>
        public const int ArmorFieldNumber = 1;
        private global::SirusDbScrapper.UIDatabase.Mage.Types.Options.Types.ArmorType armor_ = global::SirusDbScrapper.UIDatabase.Mage.Types.Options.Types.ArmorType.NoArmor;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.Mage.Types.Options.Types.ArmorType Armor {
          get { return armor_; }
          set {
            armor_ = value;
          }
        }

        /// <summary>Field number for the "focus_magic_percent_uptime" field.</summary>
        public const int FocusMagicPercentUptimeFieldNumber = 3;
        private int focusMagicPercentUptime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int FocusMagicPercentUptime {
          get { return focusMagicPercentUptime_; }
          set {
            focusMagicPercentUptime_ = value;
          }
        }

        /// <summary>Field number for the "focus_magic_target" field.</summary>
        public const int FocusMagicTargetFieldNumber = 4;
        private global::SirusDbScrapper.UIDatabase.UnitReference focusMagicTarget_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.UnitReference FocusMagicTarget {
          get { return focusMagicTarget_; }
          set {
            focusMagicTarget_ = value;
          }
        }

        /// <summary>Field number for the "water_elemental_disobey_chance" field.</summary>
        public const int WaterElementalDisobeyChanceFieldNumber = 7;
        private double waterElementalDisobeyChance_;
        /// <summary>
        /// Chance for water elemental to disobey, doing nothing rather than cast.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double WaterElementalDisobeyChance {
          get { return waterElementalDisobeyChance_; }
          set {
            waterElementalDisobeyChance_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Options);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Options other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Armor != other.Armor) return false;
          if (FocusMagicPercentUptime != other.FocusMagicPercentUptime) return false;
          if (!object.Equals(FocusMagicTarget, other.FocusMagicTarget)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WaterElementalDisobeyChance, other.WaterElementalDisobeyChance)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Armor != global::SirusDbScrapper.UIDatabase.Mage.Types.Options.Types.ArmorType.NoArmor) hash ^= Armor.GetHashCode();
          if (FocusMagicPercentUptime != 0) hash ^= FocusMagicPercentUptime.GetHashCode();
          if (focusMagicTarget_ != null) hash ^= FocusMagicTarget.GetHashCode();
          if (WaterElementalDisobeyChance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WaterElementalDisobeyChance);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Armor != global::SirusDbScrapper.UIDatabase.Mage.Types.Options.Types.ArmorType.NoArmor) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Armor);
          }
          if (FocusMagicPercentUptime != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(FocusMagicPercentUptime);
          }
          if (focusMagicTarget_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(FocusMagicTarget);
          }
          if (WaterElementalDisobeyChance != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(WaterElementalDisobeyChance);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Armor != global::SirusDbScrapper.UIDatabase.Mage.Types.Options.Types.ArmorType.NoArmor) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Armor);
          }
          if (FocusMagicPercentUptime != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(FocusMagicPercentUptime);
          }
          if (focusMagicTarget_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(FocusMagicTarget);
          }
          if (WaterElementalDisobeyChance != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(WaterElementalDisobeyChance);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Armor != global::SirusDbScrapper.UIDatabase.Mage.Types.Options.Types.ArmorType.NoArmor) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Armor);
          }
          if (FocusMagicPercentUptime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FocusMagicPercentUptime);
          }
          if (focusMagicTarget_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FocusMagicTarget);
          }
          if (WaterElementalDisobeyChance != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Options other) {
          if (other == null) {
            return;
          }
          if (other.Armor != global::SirusDbScrapper.UIDatabase.Mage.Types.Options.Types.ArmorType.NoArmor) {
            Armor = other.Armor;
          }
          if (other.FocusMagicPercentUptime != 0) {
            FocusMagicPercentUptime = other.FocusMagicPercentUptime;
          }
          if (other.focusMagicTarget_ != null) {
            if (focusMagicTarget_ == null) {
              FocusMagicTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
            }
            FocusMagicTarget.MergeFrom(other.FocusMagicTarget);
          }
          if (other.WaterElementalDisobeyChance != 0D) {
            WaterElementalDisobeyChance = other.WaterElementalDisobeyChance;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Armor = (global::SirusDbScrapper.UIDatabase.Mage.Types.Options.Types.ArmorType) input.ReadEnum();
                break;
              }
              case 24: {
                FocusMagicPercentUptime = input.ReadInt32();
                break;
              }
              case 34: {
                if (focusMagicTarget_ == null) {
                  FocusMagicTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
                }
                input.ReadMessage(FocusMagicTarget);
                break;
              }
              case 57: {
                WaterElementalDisobeyChance = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Armor = (global::SirusDbScrapper.UIDatabase.Mage.Types.Options.Types.ArmorType) input.ReadEnum();
                break;
              }
              case 24: {
                FocusMagicPercentUptime = input.ReadInt32();
                break;
              }
              case 34: {
                if (focusMagicTarget_ == null) {
                  FocusMagicTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
                }
                input.ReadMessage(FocusMagicTarget);
                break;
              }
              case 57: {
                WaterElementalDisobeyChance = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Options message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public enum ArmorType {
            [pbr::OriginalName("NoArmor")] NoArmor = 0,
            [pbr::OriginalName("MageArmor")] MageArmor = 1,
            [pbr::OriginalName("MoltenArmor")] MoltenArmor = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
