// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: priest.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SirusDbScrapper.UIDatabase {

  /// <summary>Holder for reflection information generated from priest.proto</summary>
  public static partial class PriestReflection {

    #region Descriptor
    /// <summary>File descriptor for priest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PriestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxwcmllc3QucHJvdG8SBXByb3RvGgxjb21tb24ucHJvdG8i3Q8KDVByaWVz",
            "dFRhbGVudHMSGAoQdW5icmVha2FibGVfd2lsbBgBIAEoBRIYChB0d2luX2Rp",
            "c2NpcGxpbmVzGAIgASgFEhYKDnNpbGVudF9yZXNvbHZlGAMgASgFEhsKE2lt",
            "cHJvdmVkX2lubmVyX2ZpcmUYBCABKAUSJQodaW1wcm92ZWRfcG93ZXJfd29y",
            "ZF9mb3J0aXR1ZGUYBSABKAUSEQoJbWFydHlyZG9tGAYgASgFEhIKCm1lZGl0",
            "YXRpb24YByABKAUSEwoLaW5uZXJfZm9jdXMYCCABKAgSIgoaaW1wcm92ZWRf",
            "cG93ZXJfd29yZF9zaGllbGQYCSABKAUSEgoKYWJzb2x1dGlvbhgKIAEoBRIW",
            "Cg5tZW50YWxfYWdpbGl0eRgLIAEoBRIaChJpbXByb3ZlZF9tYW5hX2J1cm4Y",
            "DCABKAUSGQoRcmVmbGVjdGl2ZV9zaGllbGQYDSABKAUSFwoPbWVudGFsX3N0",
            "cmVuZ3RoGA4gASgFEhQKDHNvdWxfd2FyZGluZxgPIAEoCBIVCg1mb2N1c2Vk",
            "X3Bvd2VyGBAgASgFEhUKDWVubGlnaHRlbm1lbnQYESABKAUSFAoMZm9jdXNl",
            "ZF93aWxsGBIgASgFEhYKDnBvd2VyX2luZnVzaW9uGBMgASgIEhsKE2ltcHJv",
            "dmVkX2ZsYXNoX2hlYWwYFCABKAUSFAoMcmVuZXdlZF9ob3BlGBUgASgFEg8K",
            "B3JhcHR1cmUYFiABKAUSEgoKYXNwaXJhdGlvbhgXIAEoBRIUCgxkaXZpbmVf",
            "YWVnaXMYGCABKAUSGAoQcGFpbl9zdXBwcmVzc2lvbhgZIAEoCBINCgVncmFj",
            "ZRgaIAEoBRIVCg1ib3Jyb3dlZF90aW1lGBsgASgFEg8KB3BlbmFuY2UYHCAB",
            "KAgSFQoNaGVhbGluZ19mb2N1cxgdIAEoBRIWCg5pbXByb3ZlZF9yZW5ldxge",
            "IAEoBRIbChNob2x5X3NwZWNpYWxpemF0aW9uGB8gASgFEhUKDXNwZWxsX3dh",
            "cmRpbmcYICABKAUSEwoLZGl2aW5lX2Z1cnkYISABKAUSGAoQZGVzcGVyYXRl",
            "X3ByYXllchgiIAEoCBIYChBibGVzc2VkX3JlY292ZXJ5GCMgASgFEhMKC2lu",
            "c3BpcmF0aW9uGCQgASgFEhIKCmhvbHlfcmVhY2gYJSABKAUSGAoQaW1wcm92",
            "ZWRfaGVhbGluZxgmIAEoBRIVCg1zZWFyaW5nX2xpZ2h0GCcgASgFEhcKD2hl",
            "YWxpbmdfcHJheWVycxgoIAEoBRIcChRzcGlyaXRfb2ZfcmVkZW1wdGlvbhgp",
            "IAEoCBIaChJzcGlyaXR1YWxfZ3VpZGFuY2UYKiABKAUSFgoOc3VyZ2Vfb2Zf",
            "bGlnaHQYKyABKAUSGQoRc3Bpcml0dWFsX2hlYWxpbmcYLCABKAUSGgoSaG9s",
            "eV9jb25jZW50cmF0aW9uGC0gASgFEhEKCWxpZ2h0d2VsbBguIAEoCBIaChJi",
            "bGVzc2VkX3Jlc2lsaWVuY2UYLyABKAUSFQoNYm9keV9hbmRfc291bBgwIAEo",
            "BRIZChFlbXBvd2VyZWRfaGVhbGluZxgxIAEoBRITCgtzZXJlbmRpcGl0eRgy",
            "IAEoBRIXCg9lbXBvd2VyZWRfcmVuZXcYMyABKAUSGQoRY2lyY2xlX29mX2hl",
            "YWxpbmcYNCABKAgSFQoNdGVzdF9vZl9mYWl0aBg1IAEoBRIZChFkaXZpbmVf",
            "cHJvdmlkZW5jZRg2IAEoBRIXCg9ndWFyZGlhbl9zcGlyaXQYNyABKAgSEgoK",
            "c3Bpcml0X3RhcBg4IAEoBRIbChNpbXByb3ZlZF9zcGlyaXRfdGFwGDkgASgF",
            "EhAKCGRhcmtuZXNzGDogASgFEhcKD3NoYWRvd19hZmZpbml0eRg7IAEoBRIh",
            "ChlpbXByb3ZlZF9zaGFkb3dfd29yZF9wYWluGDwgASgFEhQKDHNoYWRvd19m",
            "b2N1cxg9IAEoBRIfChdpbXByb3ZlZF9wc3ljaGljX3NjcmVhbRg+IAEoBRIb",
            "ChNpbXByb3ZlZF9taW5kX2JsYXN0GD8gASgFEhEKCW1pbmRfZmxheRhAIAEo",
            "CBIWCg52ZWlsZWRfc2hhZG93cxhBIAEoBRIUCgxzaGFkb3dfcmVhY2gYQiAB",
            "KAUSFgoOc2hhZG93X3dlYXZpbmcYQyABKAUSDwoHc2lsZW5jZRhEIAEoCBIY",
            "ChB2YW1waXJpY19lbWJyYWNlGEUgASgIEiEKGWltcHJvdmVkX3ZhbXBpcmlj",
            "X2VtYnJhY2UYRiABKAUSFAoMZm9jdXNlZF9taW5kGEcgASgFEhEKCW1pbmRf",
            "bWVsdBhIIAEoBRIhChlpbXByb3ZlZF9kZXZvdXJpbmdfcGxhZ3VlGEkgASgF",
            "EhIKCnNoYWRvd2Zvcm0YSiABKAgSFAoMc2hhZG93X3Bvd2VyGEsgASgFEhsK",
            "E2ltcHJvdmVkX3NoYWRvd2Zvcm0YTCABKAUSDgoGbWlzZXJ5GE0gASgFEhYK",
            "DnBzeWNoaWNfaG9ycm9yGE4gASgIEhYKDnZhbXBpcmljX3RvdWNoGE8gASgI",
            "EhoKEnBhaW5fYW5kX3N1ZmZlcmluZxhQIAEoBRIVCg10d2lzdGVkX2ZhaXRo",
            "GFEgASgFEhIKCmRpc3BlcnNpb24YUiABKAgi4AEKDFNoYWRvd1ByaWVzdBIs",
            "CgdvcHRpb25zGAMgASgLMhsucHJvdG8uU2hhZG93UHJpZXN0Lk9wdGlvbnMa",
            "CgoIUm90YXRpb24alQEKB09wdGlvbnMSMAoFYXJtb3IYAiABKA4yIS5wcm90",
            "by5TaGFkb3dQcmllc3QuT3B0aW9ucy5Bcm1vchIzChVwb3dlcl9pbmZ1c2lv",
            "bl90YXJnZXQYBiABKAsyFC5wcm90by5Vbml0UmVmZXJlbmNlIiMKBUFybW9y",
            "EgsKB05vQXJtb3IQABINCglJbm5lckZpcmUQASK3AQoLU21pdGVQcmllc3QS",
            "KwoHb3B0aW9ucxgDIAEoCzIaLnByb3RvLlNtaXRlUHJpZXN0Lk9wdGlvbnMa",
            "CgoIUm90YXRpb24abwoHT3B0aW9ucxIWCg51c2VfaW5uZXJfZmlyZRgDIAEo",
            "CBIXCg91c2Vfc2hhZG93ZmllbmQYASABKAgSMwoVcG93ZXJfaW5mdXNpb25f",
            "dGFyZ2V0GAIgASgLMhQucHJvdG8uVW5pdFJlZmVyZW5jZSLZAQoNSGVhbGlu",
            "Z1ByaWVzdBItCgdvcHRpb25zGAMgASgLMhwucHJvdG8uSGVhbGluZ1ByaWVz",
            "dC5PcHRpb25zGgoKCFJvdGF0aW9uGowBCgdPcHRpb25zEhYKDnVzZV9pbm5l",
            "cl9maXJlGAMgASgIEhcKD3VzZV9zaGFkb3dmaWVuZBgBIAEoCBIzChVwb3dl",
            "cl9pbmZ1c2lvbl90YXJnZXQYAiABKAsyFC5wcm90by5Vbml0UmVmZXJlbmNl",
            "EhsKE3JhcHR1cmVzX3Blcl9taW51dGUYBCABKAEq5AUKEFByaWVzdE1ham9y",
            "R2x5cGgSGAoUUHJpZXN0TWFqb3JHbHlwaE5vbmUQABIcChZHbHlwaE9mQ2ly",
            "Y2xlT2ZIZWFsaW5nEJzLAhIYChJHbHlwaE9mRGlzcGVsTWFnaWMQncsCEhcK",
            "EUdseXBoT2ZEaXNwZXJzaW9uELnlAhIRCgtHbHlwaE9mRmFkZRCeywISFQoP",
            "R2x5cGhPZkZlYXJXYXJkEJ/LAhIWChBHbHlwaE9mRmxhc2hIZWFsEKDLAhIb",
            "ChVHbHlwaE9mR3VhcmRpYW5TcGlyaXQQu+UCEhUKD0dseXBoT2ZIb2x5Tm92",
            "YRChywISFwoRR2x5cGhPZkh5bW5PZkhvcGUQvuUCEhYKEEdseXBoT2ZJbm5l",
            "ckZpcmUQossCEhYKEEdseXBoT2ZMaWdodHdlbGwQo8sCEhcKEUdseXBoT2ZN",
            "YXNzRGlzcGVsEKTLAhIYChJHbHlwaE9mTWluZENvbnRyb2wQpcsCEhUKD0ds",
            "eXBoT2ZNaW5kRmxheRCvywISFQoPR2x5cGhPZk1pbmRTZWFyEL3lAhIcChZH",
            "bHlwaE9mUGFpblN1cHByZXNzaW9uEMDlAhIUCg5HbHlwaE9mUGVuYW5jZRC8",
            "5QISHAoWR2x5cGhPZlBvd2VyV29yZFNoaWVsZBCoywISHAoWR2x5cGhPZlBy",
            "YXllck9mSGVhbGluZxCpywISGgoUR2x5cGhPZlBzeWNoaWNTY3JlYW0QqssC",
            "EhIKDEdseXBoT2ZSZW5ldxCrywISIAoaR2x5cGhPZlNjb3VyZ2VJbXByaXNv",
            "bm1lbnQQrMsCEhMKDUdseXBoT2ZTaGFkb3cQp8sCEhwKFkdseXBoT2ZTaGFk",
            "b3dXb3JkRGVhdGgQrssCEhsKFUdseXBoT2ZTaGFkb3dXb3JkUGFpbhCmywIS",
            "EgoMR2x5cGhPZlNtaXRlELDLAhIfChlHbHlwaE9mU3Bpcml0T2ZSZWRlbXB0",
            "aW9uELHLAirFAQoQUHJpZXN0TWlub3JHbHlwaBIYChRQcmllc3RNaW5vckds",
            "eXBoTm9uZRAAEhMKDUdseXBoT2ZGYWRpbmcQztICEhYKEEdseXBoT2ZGb3J0",
            "aXR1ZGUQ69ICEhUKD0dseXBoT2ZMZXZpdGF0ZRDq0gISGgoUR2x5cGhPZlNo",
            "YWNrbGVVbmRlYWQQ7dICEh0KF0dseXBoT2ZTaGFkb3dQcm90ZWN0aW9uEOzS",
            "AhIYChJHbHlwaE9mU2hhZG93ZmllbmQQ7tICQh2qAhpTaXJ1c0RiU2NyYXBw",
            "ZXIuVUlEYXRhYmFzZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SirusDbScrapper.UIDatabase.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SirusDbScrapper.UIDatabase.PriestMajorGlyph), typeof(global::SirusDbScrapper.UIDatabase.PriestMinorGlyph), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.PriestTalents), global::SirusDbScrapper.UIDatabase.PriestTalents.Parser, new[]{ "UnbreakableWill", "TwinDisciplines", "SilentResolve", "ImprovedInnerFire", "ImprovedPowerWordFortitude", "Martyrdom", "Meditation", "InnerFocus", "ImprovedPowerWordShield", "Absolution", "MentalAgility", "ImprovedManaBurn", "ReflectiveShield", "MentalStrength", "SoulWarding", "FocusedPower", "Enlightenment", "FocusedWill", "PowerInfusion", "ImprovedFlashHeal", "RenewedHope", "Rapture", "Aspiration", "DivineAegis", "PainSuppression", "Grace", "BorrowedTime", "Penance", "HealingFocus", "ImprovedRenew", "HolySpecialization", "SpellWarding", "DivineFury", "DesperatePrayer", "BlessedRecovery", "Inspiration", "HolyReach", "ImprovedHealing", "SearingLight", "HealingPrayers", "SpiritOfRedemption", "SpiritualGuidance", "SurgeOfLight", "SpiritualHealing", "HolyConcentration", "Lightwell", "BlessedResilience", "BodyAndSoul", "EmpoweredHealing", "Serendipity", "EmpoweredRenew", "CircleOfHealing", "TestOfFaith", "DivineProvidence", "GuardianSpirit", "SpiritTap", "ImprovedSpiritTap", "Darkness", "ShadowAffinity", "ImprovedShadowWordPain", "ShadowFocus", "ImprovedPsychicScream", "ImprovedMindBlast", "MindFlay", "VeiledShadows", "ShadowReach", "ShadowWeaving", "Silence", "VampiricEmbrace", "ImprovedVampiricEmbrace", "FocusedMind", "MindMelt", "ImprovedDevouringPlague", "Shadowform", "ShadowPower", "ImprovedShadowform", "Misery", "PsychicHorror", "VampiricTouch", "PainAndSuffering", "TwistedFaith", "Dispersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.ShadowPriest), global::SirusDbScrapper.UIDatabase.ShadowPriest.Parser, new[]{ "Options" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Rotation), global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Rotation.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options), global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options.Parser, new[]{ "Armor", "PowerInfusionTarget" }, null, new[]{ typeof(global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options.Types.Armor) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.SmitePriest), global::SirusDbScrapper.UIDatabase.SmitePriest.Parser, new[]{ "Options" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.SmitePriest.Types.Rotation), global::SirusDbScrapper.UIDatabase.SmitePriest.Types.Rotation.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.SmitePriest.Types.Options), global::SirusDbScrapper.UIDatabase.SmitePriest.Types.Options.Parser, new[]{ "UseInnerFire", "UseShadowfiend", "PowerInfusionTarget" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.HealingPriest), global::SirusDbScrapper.UIDatabase.HealingPriest.Parser, new[]{ "Options" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.HealingPriest.Types.Rotation), global::SirusDbScrapper.UIDatabase.HealingPriest.Types.Rotation.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.HealingPriest.Types.Options), global::SirusDbScrapper.UIDatabase.HealingPriest.Types.Options.Parser, new[]{ "UseInnerFire", "UseShadowfiend", "PowerInfusionTarget", "RapturesPerMinute" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum PriestMajorGlyph {
    [pbr::OriginalName("PriestMajorGlyphNone")] None = 0,
    [pbr::OriginalName("GlyphOfCircleOfHealing")] GlyphOfCircleOfHealing = 42396,
    [pbr::OriginalName("GlyphOfDispelMagic")] GlyphOfDispelMagic = 42397,
    [pbr::OriginalName("GlyphOfDispersion")] GlyphOfDispersion = 45753,
    [pbr::OriginalName("GlyphOfFade")] GlyphOfFade = 42398,
    [pbr::OriginalName("GlyphOfFearWard")] GlyphOfFearWard = 42399,
    [pbr::OriginalName("GlyphOfFlashHeal")] GlyphOfFlashHeal = 42400,
    [pbr::OriginalName("GlyphOfGuardianSpirit")] GlyphOfGuardianSpirit = 45755,
    [pbr::OriginalName("GlyphOfHolyNova")] GlyphOfHolyNova = 42401,
    [pbr::OriginalName("GlyphOfHymnOfHope")] GlyphOfHymnOfHope = 45758,
    [pbr::OriginalName("GlyphOfInnerFire")] GlyphOfInnerFire = 42402,
    [pbr::OriginalName("GlyphOfLightwell")] GlyphOfLightwell = 42403,
    [pbr::OriginalName("GlyphOfMassDispel")] GlyphOfMassDispel = 42404,
    [pbr::OriginalName("GlyphOfMindControl")] GlyphOfMindControl = 42405,
    [pbr::OriginalName("GlyphOfMindFlay")] GlyphOfMindFlay = 42415,
    [pbr::OriginalName("GlyphOfMindSear")] GlyphOfMindSear = 45757,
    [pbr::OriginalName("GlyphOfPainSuppression")] GlyphOfPainSuppression = 45760,
    [pbr::OriginalName("GlyphOfPenance")] GlyphOfPenance = 45756,
    [pbr::OriginalName("GlyphOfPowerWordShield")] GlyphOfPowerWordShield = 42408,
    [pbr::OriginalName("GlyphOfPrayerOfHealing")] GlyphOfPrayerOfHealing = 42409,
    [pbr::OriginalName("GlyphOfPsychicScream")] GlyphOfPsychicScream = 42410,
    [pbr::OriginalName("GlyphOfRenew")] GlyphOfRenew = 42411,
    [pbr::OriginalName("GlyphOfScourgeImprisonment")] GlyphOfScourgeImprisonment = 42412,
    [pbr::OriginalName("GlyphOfShadow")] GlyphOfShadow = 42407,
    [pbr::OriginalName("GlyphOfShadowWordDeath")] GlyphOfShadowWordDeath = 42414,
    [pbr::OriginalName("GlyphOfShadowWordPain")] GlyphOfShadowWordPain = 42406,
    [pbr::OriginalName("GlyphOfSmite")] GlyphOfSmite = 42416,
    [pbr::OriginalName("GlyphOfSpiritOfRedemption")] GlyphOfSpiritOfRedemption = 42417,
  }

  public enum PriestMinorGlyph {
    [pbr::OriginalName("PriestMinorGlyphNone")] None = 0,
    [pbr::OriginalName("GlyphOfFading")] GlyphOfFading = 43342,
    [pbr::OriginalName("GlyphOfFortitude")] GlyphOfFortitude = 43371,
    [pbr::OriginalName("GlyphOfLevitate")] GlyphOfLevitate = 43370,
    [pbr::OriginalName("GlyphOfShackleUndead")] GlyphOfShackleUndead = 43373,
    [pbr::OriginalName("GlyphOfShadowProtection")] GlyphOfShadowProtection = 43372,
    [pbr::OriginalName("GlyphOfShadowfiend")] GlyphOfShadowfiend = 43374,
  }

  #endregion

  #region Messages
  /// <summary>
  /// WotLK talents
  /// </summary>
  public sealed partial class PriestTalents : pb::IMessage<PriestTalents>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PriestTalents> _parser = new pb::MessageParser<PriestTalents>(() => new PriestTalents());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PriestTalents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.PriestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PriestTalents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PriestTalents(PriestTalents other) : this() {
      unbreakableWill_ = other.unbreakableWill_;
      twinDisciplines_ = other.twinDisciplines_;
      silentResolve_ = other.silentResolve_;
      improvedInnerFire_ = other.improvedInnerFire_;
      improvedPowerWordFortitude_ = other.improvedPowerWordFortitude_;
      martyrdom_ = other.martyrdom_;
      meditation_ = other.meditation_;
      innerFocus_ = other.innerFocus_;
      improvedPowerWordShield_ = other.improvedPowerWordShield_;
      absolution_ = other.absolution_;
      mentalAgility_ = other.mentalAgility_;
      improvedManaBurn_ = other.improvedManaBurn_;
      reflectiveShield_ = other.reflectiveShield_;
      mentalStrength_ = other.mentalStrength_;
      soulWarding_ = other.soulWarding_;
      focusedPower_ = other.focusedPower_;
      enlightenment_ = other.enlightenment_;
      focusedWill_ = other.focusedWill_;
      powerInfusion_ = other.powerInfusion_;
      improvedFlashHeal_ = other.improvedFlashHeal_;
      renewedHope_ = other.renewedHope_;
      rapture_ = other.rapture_;
      aspiration_ = other.aspiration_;
      divineAegis_ = other.divineAegis_;
      painSuppression_ = other.painSuppression_;
      grace_ = other.grace_;
      borrowedTime_ = other.borrowedTime_;
      penance_ = other.penance_;
      healingFocus_ = other.healingFocus_;
      improvedRenew_ = other.improvedRenew_;
      holySpecialization_ = other.holySpecialization_;
      spellWarding_ = other.spellWarding_;
      divineFury_ = other.divineFury_;
      desperatePrayer_ = other.desperatePrayer_;
      blessedRecovery_ = other.blessedRecovery_;
      inspiration_ = other.inspiration_;
      holyReach_ = other.holyReach_;
      improvedHealing_ = other.improvedHealing_;
      searingLight_ = other.searingLight_;
      healingPrayers_ = other.healingPrayers_;
      spiritOfRedemption_ = other.spiritOfRedemption_;
      spiritualGuidance_ = other.spiritualGuidance_;
      surgeOfLight_ = other.surgeOfLight_;
      spiritualHealing_ = other.spiritualHealing_;
      holyConcentration_ = other.holyConcentration_;
      lightwell_ = other.lightwell_;
      blessedResilience_ = other.blessedResilience_;
      bodyAndSoul_ = other.bodyAndSoul_;
      empoweredHealing_ = other.empoweredHealing_;
      serendipity_ = other.serendipity_;
      empoweredRenew_ = other.empoweredRenew_;
      circleOfHealing_ = other.circleOfHealing_;
      testOfFaith_ = other.testOfFaith_;
      divineProvidence_ = other.divineProvidence_;
      guardianSpirit_ = other.guardianSpirit_;
      spiritTap_ = other.spiritTap_;
      improvedSpiritTap_ = other.improvedSpiritTap_;
      darkness_ = other.darkness_;
      shadowAffinity_ = other.shadowAffinity_;
      improvedShadowWordPain_ = other.improvedShadowWordPain_;
      shadowFocus_ = other.shadowFocus_;
      improvedPsychicScream_ = other.improvedPsychicScream_;
      improvedMindBlast_ = other.improvedMindBlast_;
      mindFlay_ = other.mindFlay_;
      veiledShadows_ = other.veiledShadows_;
      shadowReach_ = other.shadowReach_;
      shadowWeaving_ = other.shadowWeaving_;
      silence_ = other.silence_;
      vampiricEmbrace_ = other.vampiricEmbrace_;
      improvedVampiricEmbrace_ = other.improvedVampiricEmbrace_;
      focusedMind_ = other.focusedMind_;
      mindMelt_ = other.mindMelt_;
      improvedDevouringPlague_ = other.improvedDevouringPlague_;
      shadowform_ = other.shadowform_;
      shadowPower_ = other.shadowPower_;
      improvedShadowform_ = other.improvedShadowform_;
      misery_ = other.misery_;
      psychicHorror_ = other.psychicHorror_;
      vampiricTouch_ = other.vampiricTouch_;
      painAndSuffering_ = other.painAndSuffering_;
      twistedFaith_ = other.twistedFaith_;
      dispersion_ = other.dispersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PriestTalents Clone() {
      return new PriestTalents(this);
    }

    /// <summary>Field number for the "unbreakable_will" field.</summary>
    public const int UnbreakableWillFieldNumber = 1;
    private int unbreakableWill_;
    /// <summary>
    /// Discipline
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnbreakableWill {
      get { return unbreakableWill_; }
      set {
        unbreakableWill_ = value;
      }
    }

    /// <summary>Field number for the "twin_disciplines" field.</summary>
    public const int TwinDisciplinesFieldNumber = 2;
    private int twinDisciplines_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TwinDisciplines {
      get { return twinDisciplines_; }
      set {
        twinDisciplines_ = value;
      }
    }

    /// <summary>Field number for the "silent_resolve" field.</summary>
    public const int SilentResolveFieldNumber = 3;
    private int silentResolve_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SilentResolve {
      get { return silentResolve_; }
      set {
        silentResolve_ = value;
      }
    }

    /// <summary>Field number for the "improved_inner_fire" field.</summary>
    public const int ImprovedInnerFireFieldNumber = 4;
    private int improvedInnerFire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedInnerFire {
      get { return improvedInnerFire_; }
      set {
        improvedInnerFire_ = value;
      }
    }

    /// <summary>Field number for the "improved_power_word_fortitude" field.</summary>
    public const int ImprovedPowerWordFortitudeFieldNumber = 5;
    private int improvedPowerWordFortitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedPowerWordFortitude {
      get { return improvedPowerWordFortitude_; }
      set {
        improvedPowerWordFortitude_ = value;
      }
    }

    /// <summary>Field number for the "martyrdom" field.</summary>
    public const int MartyrdomFieldNumber = 6;
    private int martyrdom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Martyrdom {
      get { return martyrdom_; }
      set {
        martyrdom_ = value;
      }
    }

    /// <summary>Field number for the "meditation" field.</summary>
    public const int MeditationFieldNumber = 7;
    private int meditation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Meditation {
      get { return meditation_; }
      set {
        meditation_ = value;
      }
    }

    /// <summary>Field number for the "inner_focus" field.</summary>
    public const int InnerFocusFieldNumber = 8;
    private bool innerFocus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool InnerFocus {
      get { return innerFocus_; }
      set {
        innerFocus_ = value;
      }
    }

    /// <summary>Field number for the "improved_power_word_shield" field.</summary>
    public const int ImprovedPowerWordShieldFieldNumber = 9;
    private int improvedPowerWordShield_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedPowerWordShield {
      get { return improvedPowerWordShield_; }
      set {
        improvedPowerWordShield_ = value;
      }
    }

    /// <summary>Field number for the "absolution" field.</summary>
    public const int AbsolutionFieldNumber = 10;
    private int absolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Absolution {
      get { return absolution_; }
      set {
        absolution_ = value;
      }
    }

    /// <summary>Field number for the "mental_agility" field.</summary>
    public const int MentalAgilityFieldNumber = 11;
    private int mentalAgility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MentalAgility {
      get { return mentalAgility_; }
      set {
        mentalAgility_ = value;
      }
    }

    /// <summary>Field number for the "improved_mana_burn" field.</summary>
    public const int ImprovedManaBurnFieldNumber = 12;
    private int improvedManaBurn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedManaBurn {
      get { return improvedManaBurn_; }
      set {
        improvedManaBurn_ = value;
      }
    }

    /// <summary>Field number for the "reflective_shield" field.</summary>
    public const int ReflectiveShieldFieldNumber = 13;
    private int reflectiveShield_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReflectiveShield {
      get { return reflectiveShield_; }
      set {
        reflectiveShield_ = value;
      }
    }

    /// <summary>Field number for the "mental_strength" field.</summary>
    public const int MentalStrengthFieldNumber = 14;
    private int mentalStrength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MentalStrength {
      get { return mentalStrength_; }
      set {
        mentalStrength_ = value;
      }
    }

    /// <summary>Field number for the "soul_warding" field.</summary>
    public const int SoulWardingFieldNumber = 15;
    private bool soulWarding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SoulWarding {
      get { return soulWarding_; }
      set {
        soulWarding_ = value;
      }
    }

    /// <summary>Field number for the "focused_power" field.</summary>
    public const int FocusedPowerFieldNumber = 16;
    private int focusedPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FocusedPower {
      get { return focusedPower_; }
      set {
        focusedPower_ = value;
      }
    }

    /// <summary>Field number for the "enlightenment" field.</summary>
    public const int EnlightenmentFieldNumber = 17;
    private int enlightenment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Enlightenment {
      get { return enlightenment_; }
      set {
        enlightenment_ = value;
      }
    }

    /// <summary>Field number for the "focused_will" field.</summary>
    public const int FocusedWillFieldNumber = 18;
    private int focusedWill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FocusedWill {
      get { return focusedWill_; }
      set {
        focusedWill_ = value;
      }
    }

    /// <summary>Field number for the "power_infusion" field.</summary>
    public const int PowerInfusionFieldNumber = 19;
    private bool powerInfusion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PowerInfusion {
      get { return powerInfusion_; }
      set {
        powerInfusion_ = value;
      }
    }

    /// <summary>Field number for the "improved_flash_heal" field.</summary>
    public const int ImprovedFlashHealFieldNumber = 20;
    private int improvedFlashHeal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedFlashHeal {
      get { return improvedFlashHeal_; }
      set {
        improvedFlashHeal_ = value;
      }
    }

    /// <summary>Field number for the "renewed_hope" field.</summary>
    public const int RenewedHopeFieldNumber = 21;
    private int renewedHope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RenewedHope {
      get { return renewedHope_; }
      set {
        renewedHope_ = value;
      }
    }

    /// <summary>Field number for the "rapture" field.</summary>
    public const int RaptureFieldNumber = 22;
    private int rapture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Rapture {
      get { return rapture_; }
      set {
        rapture_ = value;
      }
    }

    /// <summary>Field number for the "aspiration" field.</summary>
    public const int AspirationFieldNumber = 23;
    private int aspiration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Aspiration {
      get { return aspiration_; }
      set {
        aspiration_ = value;
      }
    }

    /// <summary>Field number for the "divine_aegis" field.</summary>
    public const int DivineAegisFieldNumber = 24;
    private int divineAegis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DivineAegis {
      get { return divineAegis_; }
      set {
        divineAegis_ = value;
      }
    }

    /// <summary>Field number for the "pain_suppression" field.</summary>
    public const int PainSuppressionFieldNumber = 25;
    private bool painSuppression_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PainSuppression {
      get { return painSuppression_; }
      set {
        painSuppression_ = value;
      }
    }

    /// <summary>Field number for the "grace" field.</summary>
    public const int GraceFieldNumber = 26;
    private int grace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Grace {
      get { return grace_; }
      set {
        grace_ = value;
      }
    }

    /// <summary>Field number for the "borrowed_time" field.</summary>
    public const int BorrowedTimeFieldNumber = 27;
    private int borrowedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BorrowedTime {
      get { return borrowedTime_; }
      set {
        borrowedTime_ = value;
      }
    }

    /// <summary>Field number for the "penance" field.</summary>
    public const int PenanceFieldNumber = 28;
    private bool penance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Penance {
      get { return penance_; }
      set {
        penance_ = value;
      }
    }

    /// <summary>Field number for the "healing_focus" field.</summary>
    public const int HealingFocusFieldNumber = 29;
    private int healingFocus_;
    /// <summary>
    /// Holy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HealingFocus {
      get { return healingFocus_; }
      set {
        healingFocus_ = value;
      }
    }

    /// <summary>Field number for the "improved_renew" field.</summary>
    public const int ImprovedRenewFieldNumber = 30;
    private int improvedRenew_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedRenew {
      get { return improvedRenew_; }
      set {
        improvedRenew_ = value;
      }
    }

    /// <summary>Field number for the "holy_specialization" field.</summary>
    public const int HolySpecializationFieldNumber = 31;
    private int holySpecialization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HolySpecialization {
      get { return holySpecialization_; }
      set {
        holySpecialization_ = value;
      }
    }

    /// <summary>Field number for the "spell_warding" field.</summary>
    public const int SpellWardingFieldNumber = 32;
    private int spellWarding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpellWarding {
      get { return spellWarding_; }
      set {
        spellWarding_ = value;
      }
    }

    /// <summary>Field number for the "divine_fury" field.</summary>
    public const int DivineFuryFieldNumber = 33;
    private int divineFury_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DivineFury {
      get { return divineFury_; }
      set {
        divineFury_ = value;
      }
    }

    /// <summary>Field number for the "desperate_prayer" field.</summary>
    public const int DesperatePrayerFieldNumber = 34;
    private bool desperatePrayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DesperatePrayer {
      get { return desperatePrayer_; }
      set {
        desperatePrayer_ = value;
      }
    }

    /// <summary>Field number for the "blessed_recovery" field.</summary>
    public const int BlessedRecoveryFieldNumber = 35;
    private int blessedRecovery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BlessedRecovery {
      get { return blessedRecovery_; }
      set {
        blessedRecovery_ = value;
      }
    }

    /// <summary>Field number for the "inspiration" field.</summary>
    public const int InspirationFieldNumber = 36;
    private int inspiration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Inspiration {
      get { return inspiration_; }
      set {
        inspiration_ = value;
      }
    }

    /// <summary>Field number for the "holy_reach" field.</summary>
    public const int HolyReachFieldNumber = 37;
    private int holyReach_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HolyReach {
      get { return holyReach_; }
      set {
        holyReach_ = value;
      }
    }

    /// <summary>Field number for the "improved_healing" field.</summary>
    public const int ImprovedHealingFieldNumber = 38;
    private int improvedHealing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedHealing {
      get { return improvedHealing_; }
      set {
        improvedHealing_ = value;
      }
    }

    /// <summary>Field number for the "searing_light" field.</summary>
    public const int SearingLightFieldNumber = 39;
    private int searingLight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SearingLight {
      get { return searingLight_; }
      set {
        searingLight_ = value;
      }
    }

    /// <summary>Field number for the "healing_prayers" field.</summary>
    public const int HealingPrayersFieldNumber = 40;
    private int healingPrayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HealingPrayers {
      get { return healingPrayers_; }
      set {
        healingPrayers_ = value;
      }
    }

    /// <summary>Field number for the "spirit_of_redemption" field.</summary>
    public const int SpiritOfRedemptionFieldNumber = 41;
    private bool spiritOfRedemption_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SpiritOfRedemption {
      get { return spiritOfRedemption_; }
      set {
        spiritOfRedemption_ = value;
      }
    }

    /// <summary>Field number for the "spiritual_guidance" field.</summary>
    public const int SpiritualGuidanceFieldNumber = 42;
    private int spiritualGuidance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpiritualGuidance {
      get { return spiritualGuidance_; }
      set {
        spiritualGuidance_ = value;
      }
    }

    /// <summary>Field number for the "surge_of_light" field.</summary>
    public const int SurgeOfLightFieldNumber = 43;
    private int surgeOfLight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SurgeOfLight {
      get { return surgeOfLight_; }
      set {
        surgeOfLight_ = value;
      }
    }

    /// <summary>Field number for the "spiritual_healing" field.</summary>
    public const int SpiritualHealingFieldNumber = 44;
    private int spiritualHealing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpiritualHealing {
      get { return spiritualHealing_; }
      set {
        spiritualHealing_ = value;
      }
    }

    /// <summary>Field number for the "holy_concentration" field.</summary>
    public const int HolyConcentrationFieldNumber = 45;
    private int holyConcentration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HolyConcentration {
      get { return holyConcentration_; }
      set {
        holyConcentration_ = value;
      }
    }

    /// <summary>Field number for the "lightwell" field.</summary>
    public const int LightwellFieldNumber = 46;
    private bool lightwell_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Lightwell {
      get { return lightwell_; }
      set {
        lightwell_ = value;
      }
    }

    /// <summary>Field number for the "blessed_resilience" field.</summary>
    public const int BlessedResilienceFieldNumber = 47;
    private int blessedResilience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BlessedResilience {
      get { return blessedResilience_; }
      set {
        blessedResilience_ = value;
      }
    }

    /// <summary>Field number for the "body_and_soul" field.</summary>
    public const int BodyAndSoulFieldNumber = 48;
    private int bodyAndSoul_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BodyAndSoul {
      get { return bodyAndSoul_; }
      set {
        bodyAndSoul_ = value;
      }
    }

    /// <summary>Field number for the "empowered_healing" field.</summary>
    public const int EmpoweredHealingFieldNumber = 49;
    private int empoweredHealing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EmpoweredHealing {
      get { return empoweredHealing_; }
      set {
        empoweredHealing_ = value;
      }
    }

    /// <summary>Field number for the "serendipity" field.</summary>
    public const int SerendipityFieldNumber = 50;
    private int serendipity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Serendipity {
      get { return serendipity_; }
      set {
        serendipity_ = value;
      }
    }

    /// <summary>Field number for the "empowered_renew" field.</summary>
    public const int EmpoweredRenewFieldNumber = 51;
    private int empoweredRenew_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EmpoweredRenew {
      get { return empoweredRenew_; }
      set {
        empoweredRenew_ = value;
      }
    }

    /// <summary>Field number for the "circle_of_healing" field.</summary>
    public const int CircleOfHealingFieldNumber = 52;
    private bool circleOfHealing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CircleOfHealing {
      get { return circleOfHealing_; }
      set {
        circleOfHealing_ = value;
      }
    }

    /// <summary>Field number for the "test_of_faith" field.</summary>
    public const int TestOfFaithFieldNumber = 53;
    private int testOfFaith_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TestOfFaith {
      get { return testOfFaith_; }
      set {
        testOfFaith_ = value;
      }
    }

    /// <summary>Field number for the "divine_providence" field.</summary>
    public const int DivineProvidenceFieldNumber = 54;
    private int divineProvidence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DivineProvidence {
      get { return divineProvidence_; }
      set {
        divineProvidence_ = value;
      }
    }

    /// <summary>Field number for the "guardian_spirit" field.</summary>
    public const int GuardianSpiritFieldNumber = 55;
    private bool guardianSpirit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GuardianSpirit {
      get { return guardianSpirit_; }
      set {
        guardianSpirit_ = value;
      }
    }

    /// <summary>Field number for the "spirit_tap" field.</summary>
    public const int SpiritTapFieldNumber = 56;
    private int spiritTap_;
    /// <summary>
    /// Shadow
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpiritTap {
      get { return spiritTap_; }
      set {
        spiritTap_ = value;
      }
    }

    /// <summary>Field number for the "improved_spirit_tap" field.</summary>
    public const int ImprovedSpiritTapFieldNumber = 57;
    private int improvedSpiritTap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedSpiritTap {
      get { return improvedSpiritTap_; }
      set {
        improvedSpiritTap_ = value;
      }
    }

    /// <summary>Field number for the "darkness" field.</summary>
    public const int DarknessFieldNumber = 58;
    private int darkness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Darkness {
      get { return darkness_; }
      set {
        darkness_ = value;
      }
    }

    /// <summary>Field number for the "shadow_affinity" field.</summary>
    public const int ShadowAffinityFieldNumber = 59;
    private int shadowAffinity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShadowAffinity {
      get { return shadowAffinity_; }
      set {
        shadowAffinity_ = value;
      }
    }

    /// <summary>Field number for the "improved_shadow_word_pain" field.</summary>
    public const int ImprovedShadowWordPainFieldNumber = 60;
    private int improvedShadowWordPain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedShadowWordPain {
      get { return improvedShadowWordPain_; }
      set {
        improvedShadowWordPain_ = value;
      }
    }

    /// <summary>Field number for the "shadow_focus" field.</summary>
    public const int ShadowFocusFieldNumber = 61;
    private int shadowFocus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShadowFocus {
      get { return shadowFocus_; }
      set {
        shadowFocus_ = value;
      }
    }

    /// <summary>Field number for the "improved_psychic_scream" field.</summary>
    public const int ImprovedPsychicScreamFieldNumber = 62;
    private int improvedPsychicScream_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedPsychicScream {
      get { return improvedPsychicScream_; }
      set {
        improvedPsychicScream_ = value;
      }
    }

    /// <summary>Field number for the "improved_mind_blast" field.</summary>
    public const int ImprovedMindBlastFieldNumber = 63;
    private int improvedMindBlast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedMindBlast {
      get { return improvedMindBlast_; }
      set {
        improvedMindBlast_ = value;
      }
    }

    /// <summary>Field number for the "mind_flay" field.</summary>
    public const int MindFlayFieldNumber = 64;
    private bool mindFlay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MindFlay {
      get { return mindFlay_; }
      set {
        mindFlay_ = value;
      }
    }

    /// <summary>Field number for the "veiled_shadows" field.</summary>
    public const int VeiledShadowsFieldNumber = 65;
    private int veiledShadows_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VeiledShadows {
      get { return veiledShadows_; }
      set {
        veiledShadows_ = value;
      }
    }

    /// <summary>Field number for the "shadow_reach" field.</summary>
    public const int ShadowReachFieldNumber = 66;
    private int shadowReach_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShadowReach {
      get { return shadowReach_; }
      set {
        shadowReach_ = value;
      }
    }

    /// <summary>Field number for the "shadow_weaving" field.</summary>
    public const int ShadowWeavingFieldNumber = 67;
    private int shadowWeaving_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShadowWeaving {
      get { return shadowWeaving_; }
      set {
        shadowWeaving_ = value;
      }
    }

    /// <summary>Field number for the "silence" field.</summary>
    public const int SilenceFieldNumber = 68;
    private bool silence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Silence {
      get { return silence_; }
      set {
        silence_ = value;
      }
    }

    /// <summary>Field number for the "vampiric_embrace" field.</summary>
    public const int VampiricEmbraceFieldNumber = 69;
    private bool vampiricEmbrace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool VampiricEmbrace {
      get { return vampiricEmbrace_; }
      set {
        vampiricEmbrace_ = value;
      }
    }

    /// <summary>Field number for the "improved_vampiric_embrace" field.</summary>
    public const int ImprovedVampiricEmbraceFieldNumber = 70;
    private int improvedVampiricEmbrace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedVampiricEmbrace {
      get { return improvedVampiricEmbrace_; }
      set {
        improvedVampiricEmbrace_ = value;
      }
    }

    /// <summary>Field number for the "focused_mind" field.</summary>
    public const int FocusedMindFieldNumber = 71;
    private int focusedMind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FocusedMind {
      get { return focusedMind_; }
      set {
        focusedMind_ = value;
      }
    }

    /// <summary>Field number for the "mind_melt" field.</summary>
    public const int MindMeltFieldNumber = 72;
    private int mindMelt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MindMelt {
      get { return mindMelt_; }
      set {
        mindMelt_ = value;
      }
    }

    /// <summary>Field number for the "improved_devouring_plague" field.</summary>
    public const int ImprovedDevouringPlagueFieldNumber = 73;
    private int improvedDevouringPlague_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedDevouringPlague {
      get { return improvedDevouringPlague_; }
      set {
        improvedDevouringPlague_ = value;
      }
    }

    /// <summary>Field number for the "shadowform" field.</summary>
    public const int ShadowformFieldNumber = 74;
    private bool shadowform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Shadowform {
      get { return shadowform_; }
      set {
        shadowform_ = value;
      }
    }

    /// <summary>Field number for the "shadow_power" field.</summary>
    public const int ShadowPowerFieldNumber = 75;
    private int shadowPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShadowPower {
      get { return shadowPower_; }
      set {
        shadowPower_ = value;
      }
    }

    /// <summary>Field number for the "improved_shadowform" field.</summary>
    public const int ImprovedShadowformFieldNumber = 76;
    private int improvedShadowform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedShadowform {
      get { return improvedShadowform_; }
      set {
        improvedShadowform_ = value;
      }
    }

    /// <summary>Field number for the "misery" field.</summary>
    public const int MiseryFieldNumber = 77;
    private int misery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Misery {
      get { return misery_; }
      set {
        misery_ = value;
      }
    }

    /// <summary>Field number for the "psychic_horror" field.</summary>
    public const int PsychicHorrorFieldNumber = 78;
    private bool psychicHorror_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PsychicHorror {
      get { return psychicHorror_; }
      set {
        psychicHorror_ = value;
      }
    }

    /// <summary>Field number for the "vampiric_touch" field.</summary>
    public const int VampiricTouchFieldNumber = 79;
    private bool vampiricTouch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool VampiricTouch {
      get { return vampiricTouch_; }
      set {
        vampiricTouch_ = value;
      }
    }

    /// <summary>Field number for the "pain_and_suffering" field.</summary>
    public const int PainAndSufferingFieldNumber = 80;
    private int painAndSuffering_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PainAndSuffering {
      get { return painAndSuffering_; }
      set {
        painAndSuffering_ = value;
      }
    }

    /// <summary>Field number for the "twisted_faith" field.</summary>
    public const int TwistedFaithFieldNumber = 81;
    private int twistedFaith_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TwistedFaith {
      get { return twistedFaith_; }
      set {
        twistedFaith_ = value;
      }
    }

    /// <summary>Field number for the "dispersion" field.</summary>
    public const int DispersionFieldNumber = 82;
    private bool dispersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Dispersion {
      get { return dispersion_; }
      set {
        dispersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PriestTalents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PriestTalents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnbreakableWill != other.UnbreakableWill) return false;
      if (TwinDisciplines != other.TwinDisciplines) return false;
      if (SilentResolve != other.SilentResolve) return false;
      if (ImprovedInnerFire != other.ImprovedInnerFire) return false;
      if (ImprovedPowerWordFortitude != other.ImprovedPowerWordFortitude) return false;
      if (Martyrdom != other.Martyrdom) return false;
      if (Meditation != other.Meditation) return false;
      if (InnerFocus != other.InnerFocus) return false;
      if (ImprovedPowerWordShield != other.ImprovedPowerWordShield) return false;
      if (Absolution != other.Absolution) return false;
      if (MentalAgility != other.MentalAgility) return false;
      if (ImprovedManaBurn != other.ImprovedManaBurn) return false;
      if (ReflectiveShield != other.ReflectiveShield) return false;
      if (MentalStrength != other.MentalStrength) return false;
      if (SoulWarding != other.SoulWarding) return false;
      if (FocusedPower != other.FocusedPower) return false;
      if (Enlightenment != other.Enlightenment) return false;
      if (FocusedWill != other.FocusedWill) return false;
      if (PowerInfusion != other.PowerInfusion) return false;
      if (ImprovedFlashHeal != other.ImprovedFlashHeal) return false;
      if (RenewedHope != other.RenewedHope) return false;
      if (Rapture != other.Rapture) return false;
      if (Aspiration != other.Aspiration) return false;
      if (DivineAegis != other.DivineAegis) return false;
      if (PainSuppression != other.PainSuppression) return false;
      if (Grace != other.Grace) return false;
      if (BorrowedTime != other.BorrowedTime) return false;
      if (Penance != other.Penance) return false;
      if (HealingFocus != other.HealingFocus) return false;
      if (ImprovedRenew != other.ImprovedRenew) return false;
      if (HolySpecialization != other.HolySpecialization) return false;
      if (SpellWarding != other.SpellWarding) return false;
      if (DivineFury != other.DivineFury) return false;
      if (DesperatePrayer != other.DesperatePrayer) return false;
      if (BlessedRecovery != other.BlessedRecovery) return false;
      if (Inspiration != other.Inspiration) return false;
      if (HolyReach != other.HolyReach) return false;
      if (ImprovedHealing != other.ImprovedHealing) return false;
      if (SearingLight != other.SearingLight) return false;
      if (HealingPrayers != other.HealingPrayers) return false;
      if (SpiritOfRedemption != other.SpiritOfRedemption) return false;
      if (SpiritualGuidance != other.SpiritualGuidance) return false;
      if (SurgeOfLight != other.SurgeOfLight) return false;
      if (SpiritualHealing != other.SpiritualHealing) return false;
      if (HolyConcentration != other.HolyConcentration) return false;
      if (Lightwell != other.Lightwell) return false;
      if (BlessedResilience != other.BlessedResilience) return false;
      if (BodyAndSoul != other.BodyAndSoul) return false;
      if (EmpoweredHealing != other.EmpoweredHealing) return false;
      if (Serendipity != other.Serendipity) return false;
      if (EmpoweredRenew != other.EmpoweredRenew) return false;
      if (CircleOfHealing != other.CircleOfHealing) return false;
      if (TestOfFaith != other.TestOfFaith) return false;
      if (DivineProvidence != other.DivineProvidence) return false;
      if (GuardianSpirit != other.GuardianSpirit) return false;
      if (SpiritTap != other.SpiritTap) return false;
      if (ImprovedSpiritTap != other.ImprovedSpiritTap) return false;
      if (Darkness != other.Darkness) return false;
      if (ShadowAffinity != other.ShadowAffinity) return false;
      if (ImprovedShadowWordPain != other.ImprovedShadowWordPain) return false;
      if (ShadowFocus != other.ShadowFocus) return false;
      if (ImprovedPsychicScream != other.ImprovedPsychicScream) return false;
      if (ImprovedMindBlast != other.ImprovedMindBlast) return false;
      if (MindFlay != other.MindFlay) return false;
      if (VeiledShadows != other.VeiledShadows) return false;
      if (ShadowReach != other.ShadowReach) return false;
      if (ShadowWeaving != other.ShadowWeaving) return false;
      if (Silence != other.Silence) return false;
      if (VampiricEmbrace != other.VampiricEmbrace) return false;
      if (ImprovedVampiricEmbrace != other.ImprovedVampiricEmbrace) return false;
      if (FocusedMind != other.FocusedMind) return false;
      if (MindMelt != other.MindMelt) return false;
      if (ImprovedDevouringPlague != other.ImprovedDevouringPlague) return false;
      if (Shadowform != other.Shadowform) return false;
      if (ShadowPower != other.ShadowPower) return false;
      if (ImprovedShadowform != other.ImprovedShadowform) return false;
      if (Misery != other.Misery) return false;
      if (PsychicHorror != other.PsychicHorror) return false;
      if (VampiricTouch != other.VampiricTouch) return false;
      if (PainAndSuffering != other.PainAndSuffering) return false;
      if (TwistedFaith != other.TwistedFaith) return false;
      if (Dispersion != other.Dispersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (UnbreakableWill != 0) hash ^= UnbreakableWill.GetHashCode();
      if (TwinDisciplines != 0) hash ^= TwinDisciplines.GetHashCode();
      if (SilentResolve != 0) hash ^= SilentResolve.GetHashCode();
      if (ImprovedInnerFire != 0) hash ^= ImprovedInnerFire.GetHashCode();
      if (ImprovedPowerWordFortitude != 0) hash ^= ImprovedPowerWordFortitude.GetHashCode();
      if (Martyrdom != 0) hash ^= Martyrdom.GetHashCode();
      if (Meditation != 0) hash ^= Meditation.GetHashCode();
      if (InnerFocus != false) hash ^= InnerFocus.GetHashCode();
      if (ImprovedPowerWordShield != 0) hash ^= ImprovedPowerWordShield.GetHashCode();
      if (Absolution != 0) hash ^= Absolution.GetHashCode();
      if (MentalAgility != 0) hash ^= MentalAgility.GetHashCode();
      if (ImprovedManaBurn != 0) hash ^= ImprovedManaBurn.GetHashCode();
      if (ReflectiveShield != 0) hash ^= ReflectiveShield.GetHashCode();
      if (MentalStrength != 0) hash ^= MentalStrength.GetHashCode();
      if (SoulWarding != false) hash ^= SoulWarding.GetHashCode();
      if (FocusedPower != 0) hash ^= FocusedPower.GetHashCode();
      if (Enlightenment != 0) hash ^= Enlightenment.GetHashCode();
      if (FocusedWill != 0) hash ^= FocusedWill.GetHashCode();
      if (PowerInfusion != false) hash ^= PowerInfusion.GetHashCode();
      if (ImprovedFlashHeal != 0) hash ^= ImprovedFlashHeal.GetHashCode();
      if (RenewedHope != 0) hash ^= RenewedHope.GetHashCode();
      if (Rapture != 0) hash ^= Rapture.GetHashCode();
      if (Aspiration != 0) hash ^= Aspiration.GetHashCode();
      if (DivineAegis != 0) hash ^= DivineAegis.GetHashCode();
      if (PainSuppression != false) hash ^= PainSuppression.GetHashCode();
      if (Grace != 0) hash ^= Grace.GetHashCode();
      if (BorrowedTime != 0) hash ^= BorrowedTime.GetHashCode();
      if (Penance != false) hash ^= Penance.GetHashCode();
      if (HealingFocus != 0) hash ^= HealingFocus.GetHashCode();
      if (ImprovedRenew != 0) hash ^= ImprovedRenew.GetHashCode();
      if (HolySpecialization != 0) hash ^= HolySpecialization.GetHashCode();
      if (SpellWarding != 0) hash ^= SpellWarding.GetHashCode();
      if (DivineFury != 0) hash ^= DivineFury.GetHashCode();
      if (DesperatePrayer != false) hash ^= DesperatePrayer.GetHashCode();
      if (BlessedRecovery != 0) hash ^= BlessedRecovery.GetHashCode();
      if (Inspiration != 0) hash ^= Inspiration.GetHashCode();
      if (HolyReach != 0) hash ^= HolyReach.GetHashCode();
      if (ImprovedHealing != 0) hash ^= ImprovedHealing.GetHashCode();
      if (SearingLight != 0) hash ^= SearingLight.GetHashCode();
      if (HealingPrayers != 0) hash ^= HealingPrayers.GetHashCode();
      if (SpiritOfRedemption != false) hash ^= SpiritOfRedemption.GetHashCode();
      if (SpiritualGuidance != 0) hash ^= SpiritualGuidance.GetHashCode();
      if (SurgeOfLight != 0) hash ^= SurgeOfLight.GetHashCode();
      if (SpiritualHealing != 0) hash ^= SpiritualHealing.GetHashCode();
      if (HolyConcentration != 0) hash ^= HolyConcentration.GetHashCode();
      if (Lightwell != false) hash ^= Lightwell.GetHashCode();
      if (BlessedResilience != 0) hash ^= BlessedResilience.GetHashCode();
      if (BodyAndSoul != 0) hash ^= BodyAndSoul.GetHashCode();
      if (EmpoweredHealing != 0) hash ^= EmpoweredHealing.GetHashCode();
      if (Serendipity != 0) hash ^= Serendipity.GetHashCode();
      if (EmpoweredRenew != 0) hash ^= EmpoweredRenew.GetHashCode();
      if (CircleOfHealing != false) hash ^= CircleOfHealing.GetHashCode();
      if (TestOfFaith != 0) hash ^= TestOfFaith.GetHashCode();
      if (DivineProvidence != 0) hash ^= DivineProvidence.GetHashCode();
      if (GuardianSpirit != false) hash ^= GuardianSpirit.GetHashCode();
      if (SpiritTap != 0) hash ^= SpiritTap.GetHashCode();
      if (ImprovedSpiritTap != 0) hash ^= ImprovedSpiritTap.GetHashCode();
      if (Darkness != 0) hash ^= Darkness.GetHashCode();
      if (ShadowAffinity != 0) hash ^= ShadowAffinity.GetHashCode();
      if (ImprovedShadowWordPain != 0) hash ^= ImprovedShadowWordPain.GetHashCode();
      if (ShadowFocus != 0) hash ^= ShadowFocus.GetHashCode();
      if (ImprovedPsychicScream != 0) hash ^= ImprovedPsychicScream.GetHashCode();
      if (ImprovedMindBlast != 0) hash ^= ImprovedMindBlast.GetHashCode();
      if (MindFlay != false) hash ^= MindFlay.GetHashCode();
      if (VeiledShadows != 0) hash ^= VeiledShadows.GetHashCode();
      if (ShadowReach != 0) hash ^= ShadowReach.GetHashCode();
      if (ShadowWeaving != 0) hash ^= ShadowWeaving.GetHashCode();
      if (Silence != false) hash ^= Silence.GetHashCode();
      if (VampiricEmbrace != false) hash ^= VampiricEmbrace.GetHashCode();
      if (ImprovedVampiricEmbrace != 0) hash ^= ImprovedVampiricEmbrace.GetHashCode();
      if (FocusedMind != 0) hash ^= FocusedMind.GetHashCode();
      if (MindMelt != 0) hash ^= MindMelt.GetHashCode();
      if (ImprovedDevouringPlague != 0) hash ^= ImprovedDevouringPlague.GetHashCode();
      if (Shadowform != false) hash ^= Shadowform.GetHashCode();
      if (ShadowPower != 0) hash ^= ShadowPower.GetHashCode();
      if (ImprovedShadowform != 0) hash ^= ImprovedShadowform.GetHashCode();
      if (Misery != 0) hash ^= Misery.GetHashCode();
      if (PsychicHorror != false) hash ^= PsychicHorror.GetHashCode();
      if (VampiricTouch != false) hash ^= VampiricTouch.GetHashCode();
      if (PainAndSuffering != 0) hash ^= PainAndSuffering.GetHashCode();
      if (TwistedFaith != 0) hash ^= TwistedFaith.GetHashCode();
      if (Dispersion != false) hash ^= Dispersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UnbreakableWill != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnbreakableWill);
      }
      if (TwinDisciplines != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TwinDisciplines);
      }
      if (SilentResolve != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SilentResolve);
      }
      if (ImprovedInnerFire != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ImprovedInnerFire);
      }
      if (ImprovedPowerWordFortitude != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ImprovedPowerWordFortitude);
      }
      if (Martyrdom != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Martyrdom);
      }
      if (Meditation != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Meditation);
      }
      if (InnerFocus != false) {
        output.WriteRawTag(64);
        output.WriteBool(InnerFocus);
      }
      if (ImprovedPowerWordShield != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ImprovedPowerWordShield);
      }
      if (Absolution != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Absolution);
      }
      if (MentalAgility != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MentalAgility);
      }
      if (ImprovedManaBurn != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ImprovedManaBurn);
      }
      if (ReflectiveShield != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ReflectiveShield);
      }
      if (MentalStrength != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(MentalStrength);
      }
      if (SoulWarding != false) {
        output.WriteRawTag(120);
        output.WriteBool(SoulWarding);
      }
      if (FocusedPower != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(FocusedPower);
      }
      if (Enlightenment != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Enlightenment);
      }
      if (FocusedWill != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(FocusedWill);
      }
      if (PowerInfusion != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(PowerInfusion);
      }
      if (ImprovedFlashHeal != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ImprovedFlashHeal);
      }
      if (RenewedHope != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(RenewedHope);
      }
      if (Rapture != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Rapture);
      }
      if (Aspiration != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Aspiration);
      }
      if (DivineAegis != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(DivineAegis);
      }
      if (PainSuppression != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(PainSuppression);
      }
      if (Grace != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Grace);
      }
      if (BorrowedTime != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(BorrowedTime);
      }
      if (Penance != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(Penance);
      }
      if (HealingFocus != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(HealingFocus);
      }
      if (ImprovedRenew != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(ImprovedRenew);
      }
      if (HolySpecialization != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(HolySpecialization);
      }
      if (SpellWarding != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(SpellWarding);
      }
      if (DivineFury != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(DivineFury);
      }
      if (DesperatePrayer != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(DesperatePrayer);
      }
      if (BlessedRecovery != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(BlessedRecovery);
      }
      if (Inspiration != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(Inspiration);
      }
      if (HolyReach != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(HolyReach);
      }
      if (ImprovedHealing != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(ImprovedHealing);
      }
      if (SearingLight != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(SearingLight);
      }
      if (HealingPrayers != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(HealingPrayers);
      }
      if (SpiritOfRedemption != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(SpiritOfRedemption);
      }
      if (SpiritualGuidance != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(SpiritualGuidance);
      }
      if (SurgeOfLight != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(SurgeOfLight);
      }
      if (SpiritualHealing != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(SpiritualHealing);
      }
      if (HolyConcentration != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(HolyConcentration);
      }
      if (Lightwell != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(Lightwell);
      }
      if (BlessedResilience != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(BlessedResilience);
      }
      if (BodyAndSoul != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(BodyAndSoul);
      }
      if (EmpoweredHealing != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(EmpoweredHealing);
      }
      if (Serendipity != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(Serendipity);
      }
      if (EmpoweredRenew != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(EmpoweredRenew);
      }
      if (CircleOfHealing != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(CircleOfHealing);
      }
      if (TestOfFaith != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(TestOfFaith);
      }
      if (DivineProvidence != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(DivineProvidence);
      }
      if (GuardianSpirit != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(GuardianSpirit);
      }
      if (SpiritTap != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(SpiritTap);
      }
      if (ImprovedSpiritTap != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(ImprovedSpiritTap);
      }
      if (Darkness != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(Darkness);
      }
      if (ShadowAffinity != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(ShadowAffinity);
      }
      if (ImprovedShadowWordPain != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(ImprovedShadowWordPain);
      }
      if (ShadowFocus != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(ShadowFocus);
      }
      if (ImprovedPsychicScream != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(ImprovedPsychicScream);
      }
      if (ImprovedMindBlast != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(ImprovedMindBlast);
      }
      if (MindFlay != false) {
        output.WriteRawTag(128, 4);
        output.WriteBool(MindFlay);
      }
      if (VeiledShadows != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(VeiledShadows);
      }
      if (ShadowReach != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(ShadowReach);
      }
      if (ShadowWeaving != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(ShadowWeaving);
      }
      if (Silence != false) {
        output.WriteRawTag(160, 4);
        output.WriteBool(Silence);
      }
      if (VampiricEmbrace != false) {
        output.WriteRawTag(168, 4);
        output.WriteBool(VampiricEmbrace);
      }
      if (ImprovedVampiricEmbrace != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(ImprovedVampiricEmbrace);
      }
      if (FocusedMind != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(FocusedMind);
      }
      if (MindMelt != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(MindMelt);
      }
      if (ImprovedDevouringPlague != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(ImprovedDevouringPlague);
      }
      if (Shadowform != false) {
        output.WriteRawTag(208, 4);
        output.WriteBool(Shadowform);
      }
      if (ShadowPower != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(ShadowPower);
      }
      if (ImprovedShadowform != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(ImprovedShadowform);
      }
      if (Misery != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(Misery);
      }
      if (PsychicHorror != false) {
        output.WriteRawTag(240, 4);
        output.WriteBool(PsychicHorror);
      }
      if (VampiricTouch != false) {
        output.WriteRawTag(248, 4);
        output.WriteBool(VampiricTouch);
      }
      if (PainAndSuffering != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(PainAndSuffering);
      }
      if (TwistedFaith != 0) {
        output.WriteRawTag(136, 5);
        output.WriteInt32(TwistedFaith);
      }
      if (Dispersion != false) {
        output.WriteRawTag(144, 5);
        output.WriteBool(Dispersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UnbreakableWill != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnbreakableWill);
      }
      if (TwinDisciplines != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TwinDisciplines);
      }
      if (SilentResolve != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SilentResolve);
      }
      if (ImprovedInnerFire != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ImprovedInnerFire);
      }
      if (ImprovedPowerWordFortitude != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ImprovedPowerWordFortitude);
      }
      if (Martyrdom != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Martyrdom);
      }
      if (Meditation != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Meditation);
      }
      if (InnerFocus != false) {
        output.WriteRawTag(64);
        output.WriteBool(InnerFocus);
      }
      if (ImprovedPowerWordShield != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ImprovedPowerWordShield);
      }
      if (Absolution != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Absolution);
      }
      if (MentalAgility != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MentalAgility);
      }
      if (ImprovedManaBurn != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ImprovedManaBurn);
      }
      if (ReflectiveShield != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ReflectiveShield);
      }
      if (MentalStrength != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(MentalStrength);
      }
      if (SoulWarding != false) {
        output.WriteRawTag(120);
        output.WriteBool(SoulWarding);
      }
      if (FocusedPower != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(FocusedPower);
      }
      if (Enlightenment != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Enlightenment);
      }
      if (FocusedWill != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(FocusedWill);
      }
      if (PowerInfusion != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(PowerInfusion);
      }
      if (ImprovedFlashHeal != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(ImprovedFlashHeal);
      }
      if (RenewedHope != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(RenewedHope);
      }
      if (Rapture != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Rapture);
      }
      if (Aspiration != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Aspiration);
      }
      if (DivineAegis != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(DivineAegis);
      }
      if (PainSuppression != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(PainSuppression);
      }
      if (Grace != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Grace);
      }
      if (BorrowedTime != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(BorrowedTime);
      }
      if (Penance != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(Penance);
      }
      if (HealingFocus != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(HealingFocus);
      }
      if (ImprovedRenew != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(ImprovedRenew);
      }
      if (HolySpecialization != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(HolySpecialization);
      }
      if (SpellWarding != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(SpellWarding);
      }
      if (DivineFury != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(DivineFury);
      }
      if (DesperatePrayer != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(DesperatePrayer);
      }
      if (BlessedRecovery != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(BlessedRecovery);
      }
      if (Inspiration != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(Inspiration);
      }
      if (HolyReach != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(HolyReach);
      }
      if (ImprovedHealing != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(ImprovedHealing);
      }
      if (SearingLight != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(SearingLight);
      }
      if (HealingPrayers != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(HealingPrayers);
      }
      if (SpiritOfRedemption != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(SpiritOfRedemption);
      }
      if (SpiritualGuidance != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(SpiritualGuidance);
      }
      if (SurgeOfLight != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(SurgeOfLight);
      }
      if (SpiritualHealing != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(SpiritualHealing);
      }
      if (HolyConcentration != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(HolyConcentration);
      }
      if (Lightwell != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(Lightwell);
      }
      if (BlessedResilience != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(BlessedResilience);
      }
      if (BodyAndSoul != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(BodyAndSoul);
      }
      if (EmpoweredHealing != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(EmpoweredHealing);
      }
      if (Serendipity != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(Serendipity);
      }
      if (EmpoweredRenew != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(EmpoweredRenew);
      }
      if (CircleOfHealing != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(CircleOfHealing);
      }
      if (TestOfFaith != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(TestOfFaith);
      }
      if (DivineProvidence != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(DivineProvidence);
      }
      if (GuardianSpirit != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(GuardianSpirit);
      }
      if (SpiritTap != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(SpiritTap);
      }
      if (ImprovedSpiritTap != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(ImprovedSpiritTap);
      }
      if (Darkness != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(Darkness);
      }
      if (ShadowAffinity != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(ShadowAffinity);
      }
      if (ImprovedShadowWordPain != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(ImprovedShadowWordPain);
      }
      if (ShadowFocus != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(ShadowFocus);
      }
      if (ImprovedPsychicScream != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(ImprovedPsychicScream);
      }
      if (ImprovedMindBlast != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(ImprovedMindBlast);
      }
      if (MindFlay != false) {
        output.WriteRawTag(128, 4);
        output.WriteBool(MindFlay);
      }
      if (VeiledShadows != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(VeiledShadows);
      }
      if (ShadowReach != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(ShadowReach);
      }
      if (ShadowWeaving != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(ShadowWeaving);
      }
      if (Silence != false) {
        output.WriteRawTag(160, 4);
        output.WriteBool(Silence);
      }
      if (VampiricEmbrace != false) {
        output.WriteRawTag(168, 4);
        output.WriteBool(VampiricEmbrace);
      }
      if (ImprovedVampiricEmbrace != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(ImprovedVampiricEmbrace);
      }
      if (FocusedMind != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(FocusedMind);
      }
      if (MindMelt != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(MindMelt);
      }
      if (ImprovedDevouringPlague != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(ImprovedDevouringPlague);
      }
      if (Shadowform != false) {
        output.WriteRawTag(208, 4);
        output.WriteBool(Shadowform);
      }
      if (ShadowPower != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(ShadowPower);
      }
      if (ImprovedShadowform != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(ImprovedShadowform);
      }
      if (Misery != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(Misery);
      }
      if (PsychicHorror != false) {
        output.WriteRawTag(240, 4);
        output.WriteBool(PsychicHorror);
      }
      if (VampiricTouch != false) {
        output.WriteRawTag(248, 4);
        output.WriteBool(VampiricTouch);
      }
      if (PainAndSuffering != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(PainAndSuffering);
      }
      if (TwistedFaith != 0) {
        output.WriteRawTag(136, 5);
        output.WriteInt32(TwistedFaith);
      }
      if (Dispersion != false) {
        output.WriteRawTag(144, 5);
        output.WriteBool(Dispersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (UnbreakableWill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnbreakableWill);
      }
      if (TwinDisciplines != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TwinDisciplines);
      }
      if (SilentResolve != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SilentResolve);
      }
      if (ImprovedInnerFire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedInnerFire);
      }
      if (ImprovedPowerWordFortitude != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedPowerWordFortitude);
      }
      if (Martyrdom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Martyrdom);
      }
      if (Meditation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Meditation);
      }
      if (InnerFocus != false) {
        size += 1 + 1;
      }
      if (ImprovedPowerWordShield != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedPowerWordShield);
      }
      if (Absolution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Absolution);
      }
      if (MentalAgility != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MentalAgility);
      }
      if (ImprovedManaBurn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedManaBurn);
      }
      if (ReflectiveShield != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReflectiveShield);
      }
      if (MentalStrength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MentalStrength);
      }
      if (SoulWarding != false) {
        size += 1 + 1;
      }
      if (FocusedPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FocusedPower);
      }
      if (Enlightenment != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Enlightenment);
      }
      if (FocusedWill != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FocusedWill);
      }
      if (PowerInfusion != false) {
        size += 2 + 1;
      }
      if (ImprovedFlashHeal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedFlashHeal);
      }
      if (RenewedHope != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RenewedHope);
      }
      if (Rapture != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Rapture);
      }
      if (Aspiration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Aspiration);
      }
      if (DivineAegis != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DivineAegis);
      }
      if (PainSuppression != false) {
        size += 2 + 1;
      }
      if (Grace != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Grace);
      }
      if (BorrowedTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BorrowedTime);
      }
      if (Penance != false) {
        size += 2 + 1;
      }
      if (HealingFocus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HealingFocus);
      }
      if (ImprovedRenew != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedRenew);
      }
      if (HolySpecialization != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HolySpecialization);
      }
      if (SpellWarding != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellWarding);
      }
      if (DivineFury != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DivineFury);
      }
      if (DesperatePrayer != false) {
        size += 2 + 1;
      }
      if (BlessedRecovery != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BlessedRecovery);
      }
      if (Inspiration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Inspiration);
      }
      if (HolyReach != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HolyReach);
      }
      if (ImprovedHealing != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedHealing);
      }
      if (SearingLight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SearingLight);
      }
      if (HealingPrayers != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HealingPrayers);
      }
      if (SpiritOfRedemption != false) {
        size += 2 + 1;
      }
      if (SpiritualGuidance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpiritualGuidance);
      }
      if (SurgeOfLight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SurgeOfLight);
      }
      if (SpiritualHealing != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpiritualHealing);
      }
      if (HolyConcentration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HolyConcentration);
      }
      if (Lightwell != false) {
        size += 2 + 1;
      }
      if (BlessedResilience != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BlessedResilience);
      }
      if (BodyAndSoul != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BodyAndSoul);
      }
      if (EmpoweredHealing != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EmpoweredHealing);
      }
      if (Serendipity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Serendipity);
      }
      if (EmpoweredRenew != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EmpoweredRenew);
      }
      if (CircleOfHealing != false) {
        size += 2 + 1;
      }
      if (TestOfFaith != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TestOfFaith);
      }
      if (DivineProvidence != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DivineProvidence);
      }
      if (GuardianSpirit != false) {
        size += 2 + 1;
      }
      if (SpiritTap != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpiritTap);
      }
      if (ImprovedSpiritTap != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedSpiritTap);
      }
      if (Darkness != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Darkness);
      }
      if (ShadowAffinity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShadowAffinity);
      }
      if (ImprovedShadowWordPain != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedShadowWordPain);
      }
      if (ShadowFocus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShadowFocus);
      }
      if (ImprovedPsychicScream != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedPsychicScream);
      }
      if (ImprovedMindBlast != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedMindBlast);
      }
      if (MindFlay != false) {
        size += 2 + 1;
      }
      if (VeiledShadows != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VeiledShadows);
      }
      if (ShadowReach != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShadowReach);
      }
      if (ShadowWeaving != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShadowWeaving);
      }
      if (Silence != false) {
        size += 2 + 1;
      }
      if (VampiricEmbrace != false) {
        size += 2 + 1;
      }
      if (ImprovedVampiricEmbrace != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedVampiricEmbrace);
      }
      if (FocusedMind != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FocusedMind);
      }
      if (MindMelt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MindMelt);
      }
      if (ImprovedDevouringPlague != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedDevouringPlague);
      }
      if (Shadowform != false) {
        size += 2 + 1;
      }
      if (ShadowPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShadowPower);
      }
      if (ImprovedShadowform != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedShadowform);
      }
      if (Misery != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Misery);
      }
      if (PsychicHorror != false) {
        size += 2 + 1;
      }
      if (VampiricTouch != false) {
        size += 2 + 1;
      }
      if (PainAndSuffering != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PainAndSuffering);
      }
      if (TwistedFaith != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TwistedFaith);
      }
      if (Dispersion != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PriestTalents other) {
      if (other == null) {
        return;
      }
      if (other.UnbreakableWill != 0) {
        UnbreakableWill = other.UnbreakableWill;
      }
      if (other.TwinDisciplines != 0) {
        TwinDisciplines = other.TwinDisciplines;
      }
      if (other.SilentResolve != 0) {
        SilentResolve = other.SilentResolve;
      }
      if (other.ImprovedInnerFire != 0) {
        ImprovedInnerFire = other.ImprovedInnerFire;
      }
      if (other.ImprovedPowerWordFortitude != 0) {
        ImprovedPowerWordFortitude = other.ImprovedPowerWordFortitude;
      }
      if (other.Martyrdom != 0) {
        Martyrdom = other.Martyrdom;
      }
      if (other.Meditation != 0) {
        Meditation = other.Meditation;
      }
      if (other.InnerFocus != false) {
        InnerFocus = other.InnerFocus;
      }
      if (other.ImprovedPowerWordShield != 0) {
        ImprovedPowerWordShield = other.ImprovedPowerWordShield;
      }
      if (other.Absolution != 0) {
        Absolution = other.Absolution;
      }
      if (other.MentalAgility != 0) {
        MentalAgility = other.MentalAgility;
      }
      if (other.ImprovedManaBurn != 0) {
        ImprovedManaBurn = other.ImprovedManaBurn;
      }
      if (other.ReflectiveShield != 0) {
        ReflectiveShield = other.ReflectiveShield;
      }
      if (other.MentalStrength != 0) {
        MentalStrength = other.MentalStrength;
      }
      if (other.SoulWarding != false) {
        SoulWarding = other.SoulWarding;
      }
      if (other.FocusedPower != 0) {
        FocusedPower = other.FocusedPower;
      }
      if (other.Enlightenment != 0) {
        Enlightenment = other.Enlightenment;
      }
      if (other.FocusedWill != 0) {
        FocusedWill = other.FocusedWill;
      }
      if (other.PowerInfusion != false) {
        PowerInfusion = other.PowerInfusion;
      }
      if (other.ImprovedFlashHeal != 0) {
        ImprovedFlashHeal = other.ImprovedFlashHeal;
      }
      if (other.RenewedHope != 0) {
        RenewedHope = other.RenewedHope;
      }
      if (other.Rapture != 0) {
        Rapture = other.Rapture;
      }
      if (other.Aspiration != 0) {
        Aspiration = other.Aspiration;
      }
      if (other.DivineAegis != 0) {
        DivineAegis = other.DivineAegis;
      }
      if (other.PainSuppression != false) {
        PainSuppression = other.PainSuppression;
      }
      if (other.Grace != 0) {
        Grace = other.Grace;
      }
      if (other.BorrowedTime != 0) {
        BorrowedTime = other.BorrowedTime;
      }
      if (other.Penance != false) {
        Penance = other.Penance;
      }
      if (other.HealingFocus != 0) {
        HealingFocus = other.HealingFocus;
      }
      if (other.ImprovedRenew != 0) {
        ImprovedRenew = other.ImprovedRenew;
      }
      if (other.HolySpecialization != 0) {
        HolySpecialization = other.HolySpecialization;
      }
      if (other.SpellWarding != 0) {
        SpellWarding = other.SpellWarding;
      }
      if (other.DivineFury != 0) {
        DivineFury = other.DivineFury;
      }
      if (other.DesperatePrayer != false) {
        DesperatePrayer = other.DesperatePrayer;
      }
      if (other.BlessedRecovery != 0) {
        BlessedRecovery = other.BlessedRecovery;
      }
      if (other.Inspiration != 0) {
        Inspiration = other.Inspiration;
      }
      if (other.HolyReach != 0) {
        HolyReach = other.HolyReach;
      }
      if (other.ImprovedHealing != 0) {
        ImprovedHealing = other.ImprovedHealing;
      }
      if (other.SearingLight != 0) {
        SearingLight = other.SearingLight;
      }
      if (other.HealingPrayers != 0) {
        HealingPrayers = other.HealingPrayers;
      }
      if (other.SpiritOfRedemption != false) {
        SpiritOfRedemption = other.SpiritOfRedemption;
      }
      if (other.SpiritualGuidance != 0) {
        SpiritualGuidance = other.SpiritualGuidance;
      }
      if (other.SurgeOfLight != 0) {
        SurgeOfLight = other.SurgeOfLight;
      }
      if (other.SpiritualHealing != 0) {
        SpiritualHealing = other.SpiritualHealing;
      }
      if (other.HolyConcentration != 0) {
        HolyConcentration = other.HolyConcentration;
      }
      if (other.Lightwell != false) {
        Lightwell = other.Lightwell;
      }
      if (other.BlessedResilience != 0) {
        BlessedResilience = other.BlessedResilience;
      }
      if (other.BodyAndSoul != 0) {
        BodyAndSoul = other.BodyAndSoul;
      }
      if (other.EmpoweredHealing != 0) {
        EmpoweredHealing = other.EmpoweredHealing;
      }
      if (other.Serendipity != 0) {
        Serendipity = other.Serendipity;
      }
      if (other.EmpoweredRenew != 0) {
        EmpoweredRenew = other.EmpoweredRenew;
      }
      if (other.CircleOfHealing != false) {
        CircleOfHealing = other.CircleOfHealing;
      }
      if (other.TestOfFaith != 0) {
        TestOfFaith = other.TestOfFaith;
      }
      if (other.DivineProvidence != 0) {
        DivineProvidence = other.DivineProvidence;
      }
      if (other.GuardianSpirit != false) {
        GuardianSpirit = other.GuardianSpirit;
      }
      if (other.SpiritTap != 0) {
        SpiritTap = other.SpiritTap;
      }
      if (other.ImprovedSpiritTap != 0) {
        ImprovedSpiritTap = other.ImprovedSpiritTap;
      }
      if (other.Darkness != 0) {
        Darkness = other.Darkness;
      }
      if (other.ShadowAffinity != 0) {
        ShadowAffinity = other.ShadowAffinity;
      }
      if (other.ImprovedShadowWordPain != 0) {
        ImprovedShadowWordPain = other.ImprovedShadowWordPain;
      }
      if (other.ShadowFocus != 0) {
        ShadowFocus = other.ShadowFocus;
      }
      if (other.ImprovedPsychicScream != 0) {
        ImprovedPsychicScream = other.ImprovedPsychicScream;
      }
      if (other.ImprovedMindBlast != 0) {
        ImprovedMindBlast = other.ImprovedMindBlast;
      }
      if (other.MindFlay != false) {
        MindFlay = other.MindFlay;
      }
      if (other.VeiledShadows != 0) {
        VeiledShadows = other.VeiledShadows;
      }
      if (other.ShadowReach != 0) {
        ShadowReach = other.ShadowReach;
      }
      if (other.ShadowWeaving != 0) {
        ShadowWeaving = other.ShadowWeaving;
      }
      if (other.Silence != false) {
        Silence = other.Silence;
      }
      if (other.VampiricEmbrace != false) {
        VampiricEmbrace = other.VampiricEmbrace;
      }
      if (other.ImprovedVampiricEmbrace != 0) {
        ImprovedVampiricEmbrace = other.ImprovedVampiricEmbrace;
      }
      if (other.FocusedMind != 0) {
        FocusedMind = other.FocusedMind;
      }
      if (other.MindMelt != 0) {
        MindMelt = other.MindMelt;
      }
      if (other.ImprovedDevouringPlague != 0) {
        ImprovedDevouringPlague = other.ImprovedDevouringPlague;
      }
      if (other.Shadowform != false) {
        Shadowform = other.Shadowform;
      }
      if (other.ShadowPower != 0) {
        ShadowPower = other.ShadowPower;
      }
      if (other.ImprovedShadowform != 0) {
        ImprovedShadowform = other.ImprovedShadowform;
      }
      if (other.Misery != 0) {
        Misery = other.Misery;
      }
      if (other.PsychicHorror != false) {
        PsychicHorror = other.PsychicHorror;
      }
      if (other.VampiricTouch != false) {
        VampiricTouch = other.VampiricTouch;
      }
      if (other.PainAndSuffering != 0) {
        PainAndSuffering = other.PainAndSuffering;
      }
      if (other.TwistedFaith != 0) {
        TwistedFaith = other.TwistedFaith;
      }
      if (other.Dispersion != false) {
        Dispersion = other.Dispersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnbreakableWill = input.ReadInt32();
            break;
          }
          case 16: {
            TwinDisciplines = input.ReadInt32();
            break;
          }
          case 24: {
            SilentResolve = input.ReadInt32();
            break;
          }
          case 32: {
            ImprovedInnerFire = input.ReadInt32();
            break;
          }
          case 40: {
            ImprovedPowerWordFortitude = input.ReadInt32();
            break;
          }
          case 48: {
            Martyrdom = input.ReadInt32();
            break;
          }
          case 56: {
            Meditation = input.ReadInt32();
            break;
          }
          case 64: {
            InnerFocus = input.ReadBool();
            break;
          }
          case 72: {
            ImprovedPowerWordShield = input.ReadInt32();
            break;
          }
          case 80: {
            Absolution = input.ReadInt32();
            break;
          }
          case 88: {
            MentalAgility = input.ReadInt32();
            break;
          }
          case 96: {
            ImprovedManaBurn = input.ReadInt32();
            break;
          }
          case 104: {
            ReflectiveShield = input.ReadInt32();
            break;
          }
          case 112: {
            MentalStrength = input.ReadInt32();
            break;
          }
          case 120: {
            SoulWarding = input.ReadBool();
            break;
          }
          case 128: {
            FocusedPower = input.ReadInt32();
            break;
          }
          case 136: {
            Enlightenment = input.ReadInt32();
            break;
          }
          case 144: {
            FocusedWill = input.ReadInt32();
            break;
          }
          case 152: {
            PowerInfusion = input.ReadBool();
            break;
          }
          case 160: {
            ImprovedFlashHeal = input.ReadInt32();
            break;
          }
          case 168: {
            RenewedHope = input.ReadInt32();
            break;
          }
          case 176: {
            Rapture = input.ReadInt32();
            break;
          }
          case 184: {
            Aspiration = input.ReadInt32();
            break;
          }
          case 192: {
            DivineAegis = input.ReadInt32();
            break;
          }
          case 200: {
            PainSuppression = input.ReadBool();
            break;
          }
          case 208: {
            Grace = input.ReadInt32();
            break;
          }
          case 216: {
            BorrowedTime = input.ReadInt32();
            break;
          }
          case 224: {
            Penance = input.ReadBool();
            break;
          }
          case 232: {
            HealingFocus = input.ReadInt32();
            break;
          }
          case 240: {
            ImprovedRenew = input.ReadInt32();
            break;
          }
          case 248: {
            HolySpecialization = input.ReadInt32();
            break;
          }
          case 256: {
            SpellWarding = input.ReadInt32();
            break;
          }
          case 264: {
            DivineFury = input.ReadInt32();
            break;
          }
          case 272: {
            DesperatePrayer = input.ReadBool();
            break;
          }
          case 280: {
            BlessedRecovery = input.ReadInt32();
            break;
          }
          case 288: {
            Inspiration = input.ReadInt32();
            break;
          }
          case 296: {
            HolyReach = input.ReadInt32();
            break;
          }
          case 304: {
            ImprovedHealing = input.ReadInt32();
            break;
          }
          case 312: {
            SearingLight = input.ReadInt32();
            break;
          }
          case 320: {
            HealingPrayers = input.ReadInt32();
            break;
          }
          case 328: {
            SpiritOfRedemption = input.ReadBool();
            break;
          }
          case 336: {
            SpiritualGuidance = input.ReadInt32();
            break;
          }
          case 344: {
            SurgeOfLight = input.ReadInt32();
            break;
          }
          case 352: {
            SpiritualHealing = input.ReadInt32();
            break;
          }
          case 360: {
            HolyConcentration = input.ReadInt32();
            break;
          }
          case 368: {
            Lightwell = input.ReadBool();
            break;
          }
          case 376: {
            BlessedResilience = input.ReadInt32();
            break;
          }
          case 384: {
            BodyAndSoul = input.ReadInt32();
            break;
          }
          case 392: {
            EmpoweredHealing = input.ReadInt32();
            break;
          }
          case 400: {
            Serendipity = input.ReadInt32();
            break;
          }
          case 408: {
            EmpoweredRenew = input.ReadInt32();
            break;
          }
          case 416: {
            CircleOfHealing = input.ReadBool();
            break;
          }
          case 424: {
            TestOfFaith = input.ReadInt32();
            break;
          }
          case 432: {
            DivineProvidence = input.ReadInt32();
            break;
          }
          case 440: {
            GuardianSpirit = input.ReadBool();
            break;
          }
          case 448: {
            SpiritTap = input.ReadInt32();
            break;
          }
          case 456: {
            ImprovedSpiritTap = input.ReadInt32();
            break;
          }
          case 464: {
            Darkness = input.ReadInt32();
            break;
          }
          case 472: {
            ShadowAffinity = input.ReadInt32();
            break;
          }
          case 480: {
            ImprovedShadowWordPain = input.ReadInt32();
            break;
          }
          case 488: {
            ShadowFocus = input.ReadInt32();
            break;
          }
          case 496: {
            ImprovedPsychicScream = input.ReadInt32();
            break;
          }
          case 504: {
            ImprovedMindBlast = input.ReadInt32();
            break;
          }
          case 512: {
            MindFlay = input.ReadBool();
            break;
          }
          case 520: {
            VeiledShadows = input.ReadInt32();
            break;
          }
          case 528: {
            ShadowReach = input.ReadInt32();
            break;
          }
          case 536: {
            ShadowWeaving = input.ReadInt32();
            break;
          }
          case 544: {
            Silence = input.ReadBool();
            break;
          }
          case 552: {
            VampiricEmbrace = input.ReadBool();
            break;
          }
          case 560: {
            ImprovedVampiricEmbrace = input.ReadInt32();
            break;
          }
          case 568: {
            FocusedMind = input.ReadInt32();
            break;
          }
          case 576: {
            MindMelt = input.ReadInt32();
            break;
          }
          case 584: {
            ImprovedDevouringPlague = input.ReadInt32();
            break;
          }
          case 592: {
            Shadowform = input.ReadBool();
            break;
          }
          case 600: {
            ShadowPower = input.ReadInt32();
            break;
          }
          case 608: {
            ImprovedShadowform = input.ReadInt32();
            break;
          }
          case 616: {
            Misery = input.ReadInt32();
            break;
          }
          case 624: {
            PsychicHorror = input.ReadBool();
            break;
          }
          case 632: {
            VampiricTouch = input.ReadBool();
            break;
          }
          case 640: {
            PainAndSuffering = input.ReadInt32();
            break;
          }
          case 648: {
            TwistedFaith = input.ReadInt32();
            break;
          }
          case 656: {
            Dispersion = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UnbreakableWill = input.ReadInt32();
            break;
          }
          case 16: {
            TwinDisciplines = input.ReadInt32();
            break;
          }
          case 24: {
            SilentResolve = input.ReadInt32();
            break;
          }
          case 32: {
            ImprovedInnerFire = input.ReadInt32();
            break;
          }
          case 40: {
            ImprovedPowerWordFortitude = input.ReadInt32();
            break;
          }
          case 48: {
            Martyrdom = input.ReadInt32();
            break;
          }
          case 56: {
            Meditation = input.ReadInt32();
            break;
          }
          case 64: {
            InnerFocus = input.ReadBool();
            break;
          }
          case 72: {
            ImprovedPowerWordShield = input.ReadInt32();
            break;
          }
          case 80: {
            Absolution = input.ReadInt32();
            break;
          }
          case 88: {
            MentalAgility = input.ReadInt32();
            break;
          }
          case 96: {
            ImprovedManaBurn = input.ReadInt32();
            break;
          }
          case 104: {
            ReflectiveShield = input.ReadInt32();
            break;
          }
          case 112: {
            MentalStrength = input.ReadInt32();
            break;
          }
          case 120: {
            SoulWarding = input.ReadBool();
            break;
          }
          case 128: {
            FocusedPower = input.ReadInt32();
            break;
          }
          case 136: {
            Enlightenment = input.ReadInt32();
            break;
          }
          case 144: {
            FocusedWill = input.ReadInt32();
            break;
          }
          case 152: {
            PowerInfusion = input.ReadBool();
            break;
          }
          case 160: {
            ImprovedFlashHeal = input.ReadInt32();
            break;
          }
          case 168: {
            RenewedHope = input.ReadInt32();
            break;
          }
          case 176: {
            Rapture = input.ReadInt32();
            break;
          }
          case 184: {
            Aspiration = input.ReadInt32();
            break;
          }
          case 192: {
            DivineAegis = input.ReadInt32();
            break;
          }
          case 200: {
            PainSuppression = input.ReadBool();
            break;
          }
          case 208: {
            Grace = input.ReadInt32();
            break;
          }
          case 216: {
            BorrowedTime = input.ReadInt32();
            break;
          }
          case 224: {
            Penance = input.ReadBool();
            break;
          }
          case 232: {
            HealingFocus = input.ReadInt32();
            break;
          }
          case 240: {
            ImprovedRenew = input.ReadInt32();
            break;
          }
          case 248: {
            HolySpecialization = input.ReadInt32();
            break;
          }
          case 256: {
            SpellWarding = input.ReadInt32();
            break;
          }
          case 264: {
            DivineFury = input.ReadInt32();
            break;
          }
          case 272: {
            DesperatePrayer = input.ReadBool();
            break;
          }
          case 280: {
            BlessedRecovery = input.ReadInt32();
            break;
          }
          case 288: {
            Inspiration = input.ReadInt32();
            break;
          }
          case 296: {
            HolyReach = input.ReadInt32();
            break;
          }
          case 304: {
            ImprovedHealing = input.ReadInt32();
            break;
          }
          case 312: {
            SearingLight = input.ReadInt32();
            break;
          }
          case 320: {
            HealingPrayers = input.ReadInt32();
            break;
          }
          case 328: {
            SpiritOfRedemption = input.ReadBool();
            break;
          }
          case 336: {
            SpiritualGuidance = input.ReadInt32();
            break;
          }
          case 344: {
            SurgeOfLight = input.ReadInt32();
            break;
          }
          case 352: {
            SpiritualHealing = input.ReadInt32();
            break;
          }
          case 360: {
            HolyConcentration = input.ReadInt32();
            break;
          }
          case 368: {
            Lightwell = input.ReadBool();
            break;
          }
          case 376: {
            BlessedResilience = input.ReadInt32();
            break;
          }
          case 384: {
            BodyAndSoul = input.ReadInt32();
            break;
          }
          case 392: {
            EmpoweredHealing = input.ReadInt32();
            break;
          }
          case 400: {
            Serendipity = input.ReadInt32();
            break;
          }
          case 408: {
            EmpoweredRenew = input.ReadInt32();
            break;
          }
          case 416: {
            CircleOfHealing = input.ReadBool();
            break;
          }
          case 424: {
            TestOfFaith = input.ReadInt32();
            break;
          }
          case 432: {
            DivineProvidence = input.ReadInt32();
            break;
          }
          case 440: {
            GuardianSpirit = input.ReadBool();
            break;
          }
          case 448: {
            SpiritTap = input.ReadInt32();
            break;
          }
          case 456: {
            ImprovedSpiritTap = input.ReadInt32();
            break;
          }
          case 464: {
            Darkness = input.ReadInt32();
            break;
          }
          case 472: {
            ShadowAffinity = input.ReadInt32();
            break;
          }
          case 480: {
            ImprovedShadowWordPain = input.ReadInt32();
            break;
          }
          case 488: {
            ShadowFocus = input.ReadInt32();
            break;
          }
          case 496: {
            ImprovedPsychicScream = input.ReadInt32();
            break;
          }
          case 504: {
            ImprovedMindBlast = input.ReadInt32();
            break;
          }
          case 512: {
            MindFlay = input.ReadBool();
            break;
          }
          case 520: {
            VeiledShadows = input.ReadInt32();
            break;
          }
          case 528: {
            ShadowReach = input.ReadInt32();
            break;
          }
          case 536: {
            ShadowWeaving = input.ReadInt32();
            break;
          }
          case 544: {
            Silence = input.ReadBool();
            break;
          }
          case 552: {
            VampiricEmbrace = input.ReadBool();
            break;
          }
          case 560: {
            ImprovedVampiricEmbrace = input.ReadInt32();
            break;
          }
          case 568: {
            FocusedMind = input.ReadInt32();
            break;
          }
          case 576: {
            MindMelt = input.ReadInt32();
            break;
          }
          case 584: {
            ImprovedDevouringPlague = input.ReadInt32();
            break;
          }
          case 592: {
            Shadowform = input.ReadBool();
            break;
          }
          case 600: {
            ShadowPower = input.ReadInt32();
            break;
          }
          case 608: {
            ImprovedShadowform = input.ReadInt32();
            break;
          }
          case 616: {
            Misery = input.ReadInt32();
            break;
          }
          case 624: {
            PsychicHorror = input.ReadBool();
            break;
          }
          case 632: {
            VampiricTouch = input.ReadBool();
            break;
          }
          case 640: {
            PainAndSuffering = input.ReadInt32();
            break;
          }
          case 648: {
            TwistedFaith = input.ReadInt32();
            break;
          }
          case 656: {
            Dispersion = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ShadowPriest : pb::IMessage<ShadowPriest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ShadowPriest> _parser = new pb::MessageParser<ShadowPriest>(() => new ShadowPriest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ShadowPriest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.PriestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShadowPriest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShadowPriest(ShadowPriest other) : this() {
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShadowPriest Clone() {
      return new ShadowPriest(this);
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ShadowPriest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ShadowPriest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ShadowPriest other) {
      if (other == null) {
        return;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ShadowPriest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Rotation : pb::IMessage<Rotation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Rotation> _parser = new pb::MessageParser<Rotation>(() => new Rotation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Rotation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.ShadowPriest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation(Rotation other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation Clone() {
          return new Rotation(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Rotation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Rotation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Rotation other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

      public sealed partial class Options : pb::IMessage<Options>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Options> _parser = new pb::MessageParser<Options>(() => new Options());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Options> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.ShadowPriest.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options(Options other) : this() {
          armor_ = other.armor_;
          powerInfusionTarget_ = other.powerInfusionTarget_ != null ? other.powerInfusionTarget_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options Clone() {
          return new Options(this);
        }

        /// <summary>Field number for the "armor" field.</summary>
        public const int ArmorFieldNumber = 2;
        private global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options.Types.Armor armor_ = global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options.Types.Armor.NoArmor;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options.Types.Armor Armor {
          get { return armor_; }
          set {
            armor_ = value;
          }
        }

        /// <summary>Field number for the "power_infusion_target" field.</summary>
        public const int PowerInfusionTargetFieldNumber = 6;
        private global::SirusDbScrapper.UIDatabase.UnitReference powerInfusionTarget_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.UnitReference PowerInfusionTarget {
          get { return powerInfusionTarget_; }
          set {
            powerInfusionTarget_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Options);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Options other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Armor != other.Armor) return false;
          if (!object.Equals(PowerInfusionTarget, other.PowerInfusionTarget)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Armor != global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options.Types.Armor.NoArmor) hash ^= Armor.GetHashCode();
          if (powerInfusionTarget_ != null) hash ^= PowerInfusionTarget.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Armor != global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options.Types.Armor.NoArmor) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Armor);
          }
          if (powerInfusionTarget_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(PowerInfusionTarget);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Armor != global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options.Types.Armor.NoArmor) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Armor);
          }
          if (powerInfusionTarget_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(PowerInfusionTarget);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Armor != global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options.Types.Armor.NoArmor) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Armor);
          }
          if (powerInfusionTarget_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PowerInfusionTarget);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Options other) {
          if (other == null) {
            return;
          }
          if (other.Armor != global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options.Types.Armor.NoArmor) {
            Armor = other.Armor;
          }
          if (other.powerInfusionTarget_ != null) {
            if (powerInfusionTarget_ == null) {
              PowerInfusionTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
            }
            PowerInfusionTarget.MergeFrom(other.PowerInfusionTarget);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 16: {
                Armor = (global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options.Types.Armor) input.ReadEnum();
                break;
              }
              case 50: {
                if (powerInfusionTarget_ == null) {
                  PowerInfusionTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
                }
                input.ReadMessage(PowerInfusionTarget);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 16: {
                Armor = (global::SirusDbScrapper.UIDatabase.ShadowPriest.Types.Options.Types.Armor) input.ReadEnum();
                break;
              }
              case 50: {
                if (powerInfusionTarget_ == null) {
                  PowerInfusionTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
                }
                input.ReadMessage(PowerInfusionTarget);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Options message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public enum Armor {
            [pbr::OriginalName("NoArmor")] NoArmor = 0,
            [pbr::OriginalName("InnerFire")] InnerFire = 1,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class SmitePriest : pb::IMessage<SmitePriest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SmitePriest> _parser = new pb::MessageParser<SmitePriest>(() => new SmitePriest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SmitePriest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.PriestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SmitePriest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SmitePriest(SmitePriest other) : this() {
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SmitePriest Clone() {
      return new SmitePriest(this);
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::SirusDbScrapper.UIDatabase.SmitePriest.Types.Options options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SirusDbScrapper.UIDatabase.SmitePriest.Types.Options Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SmitePriest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SmitePriest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SmitePriest other) {
      if (other == null) {
        return;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::SirusDbScrapper.UIDatabase.SmitePriest.Types.Options();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.SmitePriest.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.SmitePriest.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SmitePriest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Rotation : pb::IMessage<Rotation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Rotation> _parser = new pb::MessageParser<Rotation>(() => new Rotation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Rotation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.SmitePriest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation(Rotation other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation Clone() {
          return new Rotation(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Rotation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Rotation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Rotation other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

      public sealed partial class Options : pb::IMessage<Options>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Options> _parser = new pb::MessageParser<Options>(() => new Options());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Options> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.SmitePriest.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options(Options other) : this() {
          useInnerFire_ = other.useInnerFire_;
          useShadowfiend_ = other.useShadowfiend_;
          powerInfusionTarget_ = other.powerInfusionTarget_ != null ? other.powerInfusionTarget_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options Clone() {
          return new Options(this);
        }

        /// <summary>Field number for the "use_inner_fire" field.</summary>
        public const int UseInnerFireFieldNumber = 3;
        private bool useInnerFire_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool UseInnerFire {
          get { return useInnerFire_; }
          set {
            useInnerFire_ = value;
          }
        }

        /// <summary>Field number for the "use_shadowfiend" field.</summary>
        public const int UseShadowfiendFieldNumber = 1;
        private bool useShadowfiend_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool UseShadowfiend {
          get { return useShadowfiend_; }
          set {
            useShadowfiend_ = value;
          }
        }

        /// <summary>Field number for the "power_infusion_target" field.</summary>
        public const int PowerInfusionTargetFieldNumber = 2;
        private global::SirusDbScrapper.UIDatabase.UnitReference powerInfusionTarget_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.UnitReference PowerInfusionTarget {
          get { return powerInfusionTarget_; }
          set {
            powerInfusionTarget_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Options);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Options other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UseInnerFire != other.UseInnerFire) return false;
          if (UseShadowfiend != other.UseShadowfiend) return false;
          if (!object.Equals(PowerInfusionTarget, other.PowerInfusionTarget)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (UseInnerFire != false) hash ^= UseInnerFire.GetHashCode();
          if (UseShadowfiend != false) hash ^= UseShadowfiend.GetHashCode();
          if (powerInfusionTarget_ != null) hash ^= PowerInfusionTarget.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (UseShadowfiend != false) {
            output.WriteRawTag(8);
            output.WriteBool(UseShadowfiend);
          }
          if (powerInfusionTarget_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(PowerInfusionTarget);
          }
          if (UseInnerFire != false) {
            output.WriteRawTag(24);
            output.WriteBool(UseInnerFire);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (UseShadowfiend != false) {
            output.WriteRawTag(8);
            output.WriteBool(UseShadowfiend);
          }
          if (powerInfusionTarget_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(PowerInfusionTarget);
          }
          if (UseInnerFire != false) {
            output.WriteRawTag(24);
            output.WriteBool(UseInnerFire);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (UseInnerFire != false) {
            size += 1 + 1;
          }
          if (UseShadowfiend != false) {
            size += 1 + 1;
          }
          if (powerInfusionTarget_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PowerInfusionTarget);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Options other) {
          if (other == null) {
            return;
          }
          if (other.UseInnerFire != false) {
            UseInnerFire = other.UseInnerFire;
          }
          if (other.UseShadowfiend != false) {
            UseShadowfiend = other.UseShadowfiend;
          }
          if (other.powerInfusionTarget_ != null) {
            if (powerInfusionTarget_ == null) {
              PowerInfusionTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
            }
            PowerInfusionTarget.MergeFrom(other.PowerInfusionTarget);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                UseShadowfiend = input.ReadBool();
                break;
              }
              case 18: {
                if (powerInfusionTarget_ == null) {
                  PowerInfusionTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
                }
                input.ReadMessage(PowerInfusionTarget);
                break;
              }
              case 24: {
                UseInnerFire = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                UseShadowfiend = input.ReadBool();
                break;
              }
              case 18: {
                if (powerInfusionTarget_ == null) {
                  PowerInfusionTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
                }
                input.ReadMessage(PowerInfusionTarget);
                break;
              }
              case 24: {
                UseInnerFire = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class HealingPriest : pb::IMessage<HealingPriest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HealingPriest> _parser = new pb::MessageParser<HealingPriest>(() => new HealingPriest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HealingPriest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.PriestReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HealingPriest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HealingPriest(HealingPriest other) : this() {
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HealingPriest Clone() {
      return new HealingPriest(this);
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::SirusDbScrapper.UIDatabase.HealingPriest.Types.Options options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SirusDbScrapper.UIDatabase.HealingPriest.Types.Options Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HealingPriest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HealingPriest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HealingPriest other) {
      if (other == null) {
        return;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::SirusDbScrapper.UIDatabase.HealingPriest.Types.Options();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.HealingPriest.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.HealingPriest.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the HealingPriest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Rotation : pb::IMessage<Rotation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Rotation> _parser = new pb::MessageParser<Rotation>(() => new Rotation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Rotation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.HealingPriest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation(Rotation other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation Clone() {
          return new Rotation(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Rotation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Rotation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Rotation other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

      public sealed partial class Options : pb::IMessage<Options>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Options> _parser = new pb::MessageParser<Options>(() => new Options());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Options> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.HealingPriest.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options(Options other) : this() {
          useInnerFire_ = other.useInnerFire_;
          useShadowfiend_ = other.useShadowfiend_;
          powerInfusionTarget_ = other.powerInfusionTarget_ != null ? other.powerInfusionTarget_.Clone() : null;
          rapturesPerMinute_ = other.rapturesPerMinute_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options Clone() {
          return new Options(this);
        }

        /// <summary>Field number for the "use_inner_fire" field.</summary>
        public const int UseInnerFireFieldNumber = 3;
        private bool useInnerFire_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool UseInnerFire {
          get { return useInnerFire_; }
          set {
            useInnerFire_ = value;
          }
        }

        /// <summary>Field number for the "use_shadowfiend" field.</summary>
        public const int UseShadowfiendFieldNumber = 1;
        private bool useShadowfiend_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool UseShadowfiend {
          get { return useShadowfiend_; }
          set {
            useShadowfiend_ = value;
          }
        }

        /// <summary>Field number for the "power_infusion_target" field.</summary>
        public const int PowerInfusionTargetFieldNumber = 2;
        private global::SirusDbScrapper.UIDatabase.UnitReference powerInfusionTarget_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.UnitReference PowerInfusionTarget {
          get { return powerInfusionTarget_; }
          set {
            powerInfusionTarget_ = value;
          }
        }

        /// <summary>Field number for the "raptures_per_minute" field.</summary>
        public const int RapturesPerMinuteFieldNumber = 4;
        private double rapturesPerMinute_;
        /// <summary>
        /// Number of times for rapture to proc each minute, ie when a PWS is fully absorbed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double RapturesPerMinute {
          get { return rapturesPerMinute_; }
          set {
            rapturesPerMinute_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Options);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Options other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UseInnerFire != other.UseInnerFire) return false;
          if (UseShadowfiend != other.UseShadowfiend) return false;
          if (!object.Equals(PowerInfusionTarget, other.PowerInfusionTarget)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RapturesPerMinute, other.RapturesPerMinute)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (UseInnerFire != false) hash ^= UseInnerFire.GetHashCode();
          if (UseShadowfiend != false) hash ^= UseShadowfiend.GetHashCode();
          if (powerInfusionTarget_ != null) hash ^= PowerInfusionTarget.GetHashCode();
          if (RapturesPerMinute != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RapturesPerMinute);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (UseShadowfiend != false) {
            output.WriteRawTag(8);
            output.WriteBool(UseShadowfiend);
          }
          if (powerInfusionTarget_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(PowerInfusionTarget);
          }
          if (UseInnerFire != false) {
            output.WriteRawTag(24);
            output.WriteBool(UseInnerFire);
          }
          if (RapturesPerMinute != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(RapturesPerMinute);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (UseShadowfiend != false) {
            output.WriteRawTag(8);
            output.WriteBool(UseShadowfiend);
          }
          if (powerInfusionTarget_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(PowerInfusionTarget);
          }
          if (UseInnerFire != false) {
            output.WriteRawTag(24);
            output.WriteBool(UseInnerFire);
          }
          if (RapturesPerMinute != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(RapturesPerMinute);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (UseInnerFire != false) {
            size += 1 + 1;
          }
          if (UseShadowfiend != false) {
            size += 1 + 1;
          }
          if (powerInfusionTarget_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PowerInfusionTarget);
          }
          if (RapturesPerMinute != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Options other) {
          if (other == null) {
            return;
          }
          if (other.UseInnerFire != false) {
            UseInnerFire = other.UseInnerFire;
          }
          if (other.UseShadowfiend != false) {
            UseShadowfiend = other.UseShadowfiend;
          }
          if (other.powerInfusionTarget_ != null) {
            if (powerInfusionTarget_ == null) {
              PowerInfusionTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
            }
            PowerInfusionTarget.MergeFrom(other.PowerInfusionTarget);
          }
          if (other.RapturesPerMinute != 0D) {
            RapturesPerMinute = other.RapturesPerMinute;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                UseShadowfiend = input.ReadBool();
                break;
              }
              case 18: {
                if (powerInfusionTarget_ == null) {
                  PowerInfusionTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
                }
                input.ReadMessage(PowerInfusionTarget);
                break;
              }
              case 24: {
                UseInnerFire = input.ReadBool();
                break;
              }
              case 33: {
                RapturesPerMinute = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                UseShadowfiend = input.ReadBool();
                break;
              }
              case 18: {
                if (powerInfusionTarget_ == null) {
                  PowerInfusionTarget = new global::SirusDbScrapper.UIDatabase.UnitReference();
                }
                input.ReadMessage(PowerInfusionTarget);
                break;
              }
              case 24: {
                UseInnerFire = input.ReadBool();
                break;
              }
              case 33: {
                RapturesPerMinute = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
