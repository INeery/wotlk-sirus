// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: warrior.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SirusDbScrapper.UIDatabase {

  /// <summary>Holder for reflection information generated from warrior.proto</summary>
  public static partial class WarriorReflection {

    #region Descriptor
    /// <summary>File descriptor for warrior.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WarriorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg13YXJyaW9yLnByb3RvEgVwcm90byKzEAoOV2FycmlvclRhbGVudHMSHgoW",
            "aW1wcm92ZWRfaGVyb2ljX3N0cmlrZRgBIAEoBRISCgpkZWZsZWN0aW9uGAIg",
            "ASgFEhUKDWltcHJvdmVkX3JlbmQYAyABKAUSFwoPaW1wcm92ZWRfY2hhcmdl",
            "GAQgASgFEhEKCWlyb25fd2lsbBgFIAEoBRIYChB0YWN0aWNhbF9tYXN0ZXJ5",
            "GAYgASgFEhoKEmltcHJvdmVkX292ZXJwb3dlchgHIAEoBRIYChBhbmdlcl9t",
            "YW5hZ2VtZW50GAggASgIEg4KBmltcGFsZRgJIAEoBRITCgtkZWVwX3dvdW5k",
            "cxgKIAEoBRIoCiB0d29faGFuZGVkX3dlYXBvbl9zcGVjaWFsaXphdGlvbhgL",
            "IAEoBRIXCg90YXN0ZV9mb3JfYmxvb2QYDCABKAUSHgoWcG9sZWF4ZV9zcGVj",
            "aWFsaXphdGlvbhgNIAEoBRIYChBzd2VlcGluZ19zdHJpa2VzGA4gASgIEhsK",
            "E21hY2Vfc3BlY2lhbGl6YXRpb24YDyABKAUSHAoUc3dvcmRfc3BlY2lhbGl6",
            "YXRpb24YECABKAUSFgoOd2VhcG9uX21hc3RlcnkYESABKAUSGgoSaW1wcm92",
            "ZWRfaGFtc3RyaW5nGBIgASgFEg4KBnRyYXVtYRgTIAEoBRITCgtzZWNvbmRf",
            "d2luZBgUIAEoBRIVCg1tb3J0YWxfc3RyaWtlGBUgASgIEhgKEHN0cmVuZ3Ro",
            "X29mX2FybXMYFiABKAUSFQoNaW1wcm92ZWRfc2xhbRgXIAEoBRISCgpqdWdn",
            "ZXJuYXV0GBggASgIEh4KFmltcHJvdmVkX21vcnRhbF9zdHJpa2UYGSABKAUS",
            "GwoTdW5yZWxlbnRpbmdfYXNzYXVsdBgaIAEoBRIUCgxzdWRkZW5fZGVhdGgY",
            "GyABKAUSFAoMZW5kbGVzc19yYWdlGBwgASgIEhQKDGJsb29kX2ZyZW56eRgd",
            "IAEoBRIVCg13cmVja2luZ19jcmV3GB4gASgFEhIKCmJsYWRlc3Rvcm0YHyAB",
            "KAgSHAoUYXJtb3JlZF90b190aGVfdGVldGgYICABKAUSFQoNYm9vbWluZ192",
            "b2ljZRghIAEoBRIPCgdjcnVlbHR5GCIgASgFEiMKG2ltcHJvdmVkX2RlbW9y",
            "YWxpemluZ19zaG91dBgjIAEoBRIXCg91bmJyaWRsZWRfd3JhdGgYJCABKAUS",
            "FwoPaW1wcm92ZWRfY2xlYXZlGCUgASgFEhUKDXBpZXJjaW5nX2hvd2wYJiAB",
            "KAgSEwoLYmxvb2RfY3JhemUYJyABKAUSGwoTY29tbWFuZGluZ19wcmVzZW5j",
            "ZRgoIAEoBRIhChlkdWFsX3dpZWxkX3NwZWNpYWxpemF0aW9uGCkgASgFEhgK",
            "EGltcHJvdmVkX2V4ZWN1dGUYKiABKAUSDgoGZW5yYWdlGCsgASgFEhEKCXBy",
            "ZWNpc2lvbhgsIAEoBRISCgpkZWF0aF93aXNoGC0gASgIEhoKEmltcHJvdmVk",
            "X2ludGVyY2VwdBguIAEoBRIfChdpbXByb3ZlZF9iZXJzZXJrZXJfcmFnZRgv",
            "IAEoBRIOCgZmbHVycnkYMCABKAUSFgoOaW50ZW5zaWZ5X3JhZ2UYMSABKAUS",
            "EwoLYmxvb2R0aGlyc3QYMiABKAgSGgoSaW1wcm92ZWRfd2hpcmx3aW5kGDMg",
            "ASgFEhcKD2Z1cmlvdXNfYXR0YWNrcxg0IAEoBRIhChlpbXByb3ZlZF9iZXJz",
            "ZXJrZXJfc3RhbmNlGDUgASgFEhMKC2hlcm9pY19mdXJ5GDYgASgIEg8KB3Jh",
            "bXBhZ2UYNyABKAgSEgoKYmxvb2RzdXJnZRg4IAEoBRIVCg11bmVuZGluZ19m",
            "dXJ5GDkgASgFEhMKC3RpdGFuc19ncmlwGDogASgIEhoKEmltcHJvdmVkX2Js",
            "b29kcmFnZRg7IAEoBRIdChVzaGllbGRfc3BlY2lhbGl6YXRpb24YPCABKAUS",
            "HQoVaW1wcm92ZWRfdGh1bmRlcl9jbGFwGD0gASgFEg4KBmluY2l0ZRg+IAEo",
            "BRIUCgxhbnRpY2lwYXRpb24YPyABKAUSEgoKbGFzdF9zdGFuZBhAIAEoCBIY",
            "ChBpbXByb3ZlZF9yZXZlbmdlGEEgASgFEhYKDnNoaWVsZF9tYXN0ZXJ5GEIg",
            "ASgFEhEKCXRvdWdobmVzcxhDIAEoBRIhChlpbXByb3ZlZF9zcGVsbF9yZWZs",
            "ZWN0aW9uGEQgASgFEhcKD2ltcHJvdmVkX2Rpc2FybRhFIAEoBRIQCghwdW5j",
            "dHVyZRhGIAEoBRIcChRpbXByb3ZlZF9kaXNjaXBsaW5lcxhHIAEoBRIXCg9j",
            "b25jdXNzaW9uX2Jsb3cYSCABKAgSEQoJZ2FnX29yZGVyGEkgASgFEigKIG9u",
            "ZV9oYW5kZWRfd2VhcG9uX3NwZWNpYWxpemF0aW9uGEogASgFEiEKGWltcHJv",
            "dmVkX2RlZmVuc2l2ZV9zdGFuY2UYSyABKAUSEQoJdmlnaWxhbmNlGEwgASgI",
            "EhQKDGZvY3VzZWRfcmFnZRhNIAEoBRIQCgh2aXRhbGl0eRhOIAEoBRIRCglz",
            "YWZlZ3VhcmQYTyABKAUSEgoKd2FyYnJpbmdlchhQIAEoCBIRCglkZXZhc3Rh",
            "dGUYUSABKAgSFgoOY3JpdGljYWxfYmxvY2sYUiABKAUSFwoPc3dvcmRfYW5k",
            "X2JvYXJkGFMgASgFEhUKDWRhbWFnZV9zaGllbGQYVCABKAUSEQoJc2hvY2t3",
            "YXZlGFUgASgIIvkBCgdXYXJyaW9yEicKB29wdGlvbnMYAyABKAsyFi5wcm90",
            "by5XYXJyaW9yLk9wdGlvbnMaCgoIUm90YXRpb24auAEKB09wdGlvbnMSFQoN",
            "c3RhcnRpbmdfcmFnZRgBIAEoARIYChB1c2VfcmVja2xlc3NuZXNzGAIgASgI",
            "EhwKFHVzZV9zaGF0dGVyaW5nX3Rocm93GAQgASgIEiIKBXNob3V0GAMgASgO",
            "MhMucHJvdG8uV2FycmlvclNob3V0EhcKD3N0YW5jZV9zbmFwc2hvdBgGIAEo",
            "CBIhChlkaXNhYmxlX2V4cGVydGlzZV9nZW1taW5nGAcgASgIIrYBChFQcm90",
            "ZWN0aW9uV2FycmlvchIxCgdvcHRpb25zGAMgASgLMiAucHJvdG8uUHJvdGVj",
            "dGlvbldhcnJpb3IuT3B0aW9ucxoKCghSb3RhdGlvbhpiCgdPcHRpb25zEhUK",
            "DXN0YXJ0aW5nX3JhZ2UYASABKAESIgoFc2hvdXQYBCABKA4yEy5wcm90by5X",
            "YXJyaW9yU2hvdXQSHAoUdXNlX3NoYXR0ZXJpbmdfdGhyb3cYCCABKAgq3gUK",
            "EVdhcnJpb3JNYWpvckdseXBoEhkKFVdhcnJpb3JNYWpvckdseXBoTm9uZRAA",
            "EhwKFkdseXBoT2ZCYXJiYXJpY0luc3VsdHMQnNMCEhcKEUdseXBoT2ZCbGFk",
            "ZXN0b3JtEN7lAhIVCg9HbHlwaE9mQmxvY2tpbmcQodMCEhgKEkdseXBoT2ZC",
            "bG9vZHRoaXJzdBCU0wISFQoPR2x5cGhPZkNsZWF2aW5nEJbTAhIWChBHbHlw",
            "aE9mRGV2YXN0YXRlEJfTAhIgChpHbHlwaE9mRW5yYWdlZFJlZ2VuZXJhdGlv",
            "bhDi5QISFgoQR2x5cGhPZkV4ZWN1dGlvbhCY0wISFgoQR2x5cGhPZkhhbXN0",
            "cmluZxCZ0wISGQoTR2x5cGhPZkhlcm9pY1N0cmlrZRCa0wISFgoQR2x5cGhP",
            "ZkludGVydmVuZRCb0wISFgoQR2x5cGhPZkxhc3RTdGFuZBCi0wISGQoTR2x5",
            "cGhPZk1vcnRhbFN0cmlrZRCd0wISFgoQR2x5cGhPZk92ZXJwb3dlchCe0wIS",
            "GAoSR2x5cGhPZlJhcGlkQ2hhcmdlEJXTAhIUCg5HbHlwaE9mUmVuZGluZxCf",
            "0wISHAoWR2x5cGhPZlJlc29uYXRpbmdQb3dlchCm0wISFAoOR2x5cGhPZlJl",
            "dmVuZ2UQoNMCEhcKEUdseXBoT2ZTaGllbGRXYWxsEOXlAhIWChBHbHlwaE9m",
            "U2hvY2t3YXZlEODlAhIcChZHbHlwaE9mU3BlbGxSZWZsZWN0aW9uEOPlAhIY",
            "ChJHbHlwaE9mU3VuZGVyQXJtb3IQo9MCEhwKFkdseXBoT2ZTd2VlcGluZ1N0",
            "cmlrZXMQpNMCEhIKDEdseXBoT2ZUYXVudBCl0wISGAoSR2x5cGhPZlZpY3Rv",
            "cnlSdXNoEKfTAhIWChBHbHlwaE9mVmlnaWxhbmNlEOHlAhIWChBHbHlwaE9m",
            "V2hpcmx3aW5kEKjTAir2AQoRV2Fycmlvck1pbm9yR2x5cGgSGQoVV2Fycmlv",
            "ck1pbm9yR2x5cGhOb25lEAASEwoNR2x5cGhPZkJhdHRsZRCD0wISFgoQR2x5",
            "cGhPZkJsb29kcmFnZRCE0wISEwoNR2x5cGhPZkNoYXJnZRCF0wISFAoOR2x5",
            "cGhPZkNvbW1hbmQQvP8CEhwKFkdseXBoT2ZFbmR1cmluZ1ZpY3RvcnkQiNMC",
            "EhgKEkdseXBoT2ZNb2NraW5nQmxvdxCG0wISGAoSR2x5cGhPZlRodW5kZXJD",
            "bGFwEIfTAhIcChZHbHlwaE9mU2hhdHRlcmluZ1Rocm93EOnQDCpYCgxXYXJy",
            "aW9yU2hvdXQSFAoQV2FycmlvclNob3V0Tm9uZRAAEhYKEldhcnJpb3JTaG91",
            "dEJhdHRsZRABEhoKFldhcnJpb3JTaG91dENvbW1hbmRpbmcQAkIdqgIaU2ly",
            "dXNEYlNjcmFwcGVyLlVJRGF0YWJhc2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SirusDbScrapper.UIDatabase.WarriorMajorGlyph), typeof(global::SirusDbScrapper.UIDatabase.WarriorMinorGlyph), typeof(global::SirusDbScrapper.UIDatabase.WarriorShout), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.WarriorTalents), global::SirusDbScrapper.UIDatabase.WarriorTalents.Parser, new[]{ "ImprovedHeroicStrike", "Deflection", "ImprovedRend", "ImprovedCharge", "IronWill", "TacticalMastery", "ImprovedOverpower", "AngerManagement", "Impale", "DeepWounds", "TwoHandedWeaponSpecialization", "TasteForBlood", "PoleaxeSpecialization", "SweepingStrikes", "MaceSpecialization", "SwordSpecialization", "WeaponMastery", "ImprovedHamstring", "Trauma", "SecondWind", "MortalStrike", "StrengthOfArms", "ImprovedSlam", "Juggernaut", "ImprovedMortalStrike", "UnrelentingAssault", "SuddenDeath", "EndlessRage", "BloodFrenzy", "WreckingCrew", "Bladestorm", "ArmoredToTheTeeth", "BoomingVoice", "Cruelty", "ImprovedDemoralizingShout", "UnbridledWrath", "ImprovedCleave", "PiercingHowl", "BloodCraze", "CommandingPresence", "DualWieldSpecialization", "ImprovedExecute", "Enrage", "Precision", "DeathWish", "ImprovedIntercept", "ImprovedBerserkerRage", "Flurry", "IntensifyRage", "Bloodthirst", "ImprovedWhirlwind", "FuriousAttacks", "ImprovedBerserkerStance", "HeroicFury", "Rampage", "Bloodsurge", "UnendingFury", "TitansGrip", "ImprovedBloodrage", "ShieldSpecialization", "ImprovedThunderClap", "Incite", "Anticipation", "LastStand", "ImprovedRevenge", "ShieldMastery", "Toughness", "ImprovedSpellReflection", "ImprovedDisarm", "Puncture", "ImprovedDisciplines", "ConcussionBlow", "GagOrder", "OneHandedWeaponSpecialization", "ImprovedDefensiveStance", "Vigilance", "FocusedRage", "Vitality", "Safeguard", "Warbringer", "Devastate", "CriticalBlock", "SwordAndBoard", "DamageShield", "Shockwave" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.Warrior), global::SirusDbScrapper.UIDatabase.Warrior.Parser, new[]{ "Options" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.Warrior.Types.Rotation), global::SirusDbScrapper.UIDatabase.Warrior.Types.Rotation.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.Warrior.Types.Options), global::SirusDbScrapper.UIDatabase.Warrior.Types.Options.Parser, new[]{ "StartingRage", "UseRecklessness", "UseShatteringThrow", "Shout", "StanceSnapshot", "DisableExpertiseGemming" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.ProtectionWarrior), global::SirusDbScrapper.UIDatabase.ProtectionWarrior.Parser, new[]{ "Options" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.ProtectionWarrior.Types.Rotation), global::SirusDbScrapper.UIDatabase.ProtectionWarrior.Types.Rotation.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.ProtectionWarrior.Types.Options), global::SirusDbScrapper.UIDatabase.ProtectionWarrior.Types.Options.Parser, new[]{ "StartingRage", "Shout", "UseShatteringThrow" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum WarriorMajorGlyph {
    [pbr::OriginalName("WarriorMajorGlyphNone")] None = 0,
    [pbr::OriginalName("GlyphOfBarbaricInsults")] GlyphOfBarbaricInsults = 43420,
    [pbr::OriginalName("GlyphOfBladestorm")] GlyphOfBladestorm = 45790,
    [pbr::OriginalName("GlyphOfBlocking")] GlyphOfBlocking = 43425,
    [pbr::OriginalName("GlyphOfBloodthirst")] GlyphOfBloodthirst = 43412,
    [pbr::OriginalName("GlyphOfCleaving")] GlyphOfCleaving = 43414,
    [pbr::OriginalName("GlyphOfDevastate")] GlyphOfDevastate = 43415,
    [pbr::OriginalName("GlyphOfEnragedRegeneration")] GlyphOfEnragedRegeneration = 45794,
    [pbr::OriginalName("GlyphOfExecution")] GlyphOfExecution = 43416,
    [pbr::OriginalName("GlyphOfHamstring")] GlyphOfHamstring = 43417,
    [pbr::OriginalName("GlyphOfHeroicStrike")] GlyphOfHeroicStrike = 43418,
    [pbr::OriginalName("GlyphOfIntervene")] GlyphOfIntervene = 43419,
    [pbr::OriginalName("GlyphOfLastStand")] GlyphOfLastStand = 43426,
    [pbr::OriginalName("GlyphOfMortalStrike")] GlyphOfMortalStrike = 43421,
    [pbr::OriginalName("GlyphOfOverpower")] GlyphOfOverpower = 43422,
    [pbr::OriginalName("GlyphOfRapidCharge")] GlyphOfRapidCharge = 43413,
    [pbr::OriginalName("GlyphOfRending")] GlyphOfRending = 43423,
    [pbr::OriginalName("GlyphOfResonatingPower")] GlyphOfResonatingPower = 43430,
    [pbr::OriginalName("GlyphOfRevenge")] GlyphOfRevenge = 43424,
    [pbr::OriginalName("GlyphOfShieldWall")] GlyphOfShieldWall = 45797,
    [pbr::OriginalName("GlyphOfShockwave")] GlyphOfShockwave = 45792,
    [pbr::OriginalName("GlyphOfSpellReflection")] GlyphOfSpellReflection = 45795,
    [pbr::OriginalName("GlyphOfSunderArmor")] GlyphOfSunderArmor = 43427,
    [pbr::OriginalName("GlyphOfSweepingStrikes")] GlyphOfSweepingStrikes = 43428,
    [pbr::OriginalName("GlyphOfTaunt")] GlyphOfTaunt = 43429,
    [pbr::OriginalName("GlyphOfVictoryRush")] GlyphOfVictoryRush = 43431,
    [pbr::OriginalName("GlyphOfVigilance")] GlyphOfVigilance = 45793,
    [pbr::OriginalName("GlyphOfWhirlwind")] GlyphOfWhirlwind = 43432,
  }

  public enum WarriorMinorGlyph {
    [pbr::OriginalName("WarriorMinorGlyphNone")] None = 0,
    [pbr::OriginalName("GlyphOfBattle")] GlyphOfBattle = 43395,
    [pbr::OriginalName("GlyphOfBloodrage")] GlyphOfBloodrage = 43396,
    [pbr::OriginalName("GlyphOfCharge")] GlyphOfCharge = 43397,
    [pbr::OriginalName("GlyphOfCommand")] GlyphOfCommand = 49084,
    [pbr::OriginalName("GlyphOfEnduringVictory")] GlyphOfEnduringVictory = 43400,
    [pbr::OriginalName("GlyphOfMockingBlow")] GlyphOfMockingBlow = 43398,
    [pbr::OriginalName("GlyphOfThunderClap")] GlyphOfThunderClap = 43399,
    [pbr::OriginalName("GlyphOfShatteringThrow")] GlyphOfShatteringThrow = 206953,
  }

  public enum WarriorShout {
    [pbr::OriginalName("WarriorShoutNone")] None = 0,
    [pbr::OriginalName("WarriorShoutBattle")] Battle = 1,
    [pbr::OriginalName("WarriorShoutCommanding")] Commanding = 2,
  }

  #endregion

  #region Messages
  public sealed partial class WarriorTalents : pb::IMessage<WarriorTalents>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WarriorTalents> _parser = new pb::MessageParser<WarriorTalents>(() => new WarriorTalents());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WarriorTalents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.WarriorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WarriorTalents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WarriorTalents(WarriorTalents other) : this() {
      improvedHeroicStrike_ = other.improvedHeroicStrike_;
      deflection_ = other.deflection_;
      improvedRend_ = other.improvedRend_;
      improvedCharge_ = other.improvedCharge_;
      ironWill_ = other.ironWill_;
      tacticalMastery_ = other.tacticalMastery_;
      improvedOverpower_ = other.improvedOverpower_;
      angerManagement_ = other.angerManagement_;
      impale_ = other.impale_;
      deepWounds_ = other.deepWounds_;
      twoHandedWeaponSpecialization_ = other.twoHandedWeaponSpecialization_;
      tasteForBlood_ = other.tasteForBlood_;
      poleaxeSpecialization_ = other.poleaxeSpecialization_;
      sweepingStrikes_ = other.sweepingStrikes_;
      maceSpecialization_ = other.maceSpecialization_;
      swordSpecialization_ = other.swordSpecialization_;
      weaponMastery_ = other.weaponMastery_;
      improvedHamstring_ = other.improvedHamstring_;
      trauma_ = other.trauma_;
      secondWind_ = other.secondWind_;
      mortalStrike_ = other.mortalStrike_;
      strengthOfArms_ = other.strengthOfArms_;
      improvedSlam_ = other.improvedSlam_;
      juggernaut_ = other.juggernaut_;
      improvedMortalStrike_ = other.improvedMortalStrike_;
      unrelentingAssault_ = other.unrelentingAssault_;
      suddenDeath_ = other.suddenDeath_;
      endlessRage_ = other.endlessRage_;
      bloodFrenzy_ = other.bloodFrenzy_;
      wreckingCrew_ = other.wreckingCrew_;
      bladestorm_ = other.bladestorm_;
      armoredToTheTeeth_ = other.armoredToTheTeeth_;
      boomingVoice_ = other.boomingVoice_;
      cruelty_ = other.cruelty_;
      improvedDemoralizingShout_ = other.improvedDemoralizingShout_;
      unbridledWrath_ = other.unbridledWrath_;
      improvedCleave_ = other.improvedCleave_;
      piercingHowl_ = other.piercingHowl_;
      bloodCraze_ = other.bloodCraze_;
      commandingPresence_ = other.commandingPresence_;
      dualWieldSpecialization_ = other.dualWieldSpecialization_;
      improvedExecute_ = other.improvedExecute_;
      enrage_ = other.enrage_;
      precision_ = other.precision_;
      deathWish_ = other.deathWish_;
      improvedIntercept_ = other.improvedIntercept_;
      improvedBerserkerRage_ = other.improvedBerserkerRage_;
      flurry_ = other.flurry_;
      intensifyRage_ = other.intensifyRage_;
      bloodthirst_ = other.bloodthirst_;
      improvedWhirlwind_ = other.improvedWhirlwind_;
      furiousAttacks_ = other.furiousAttacks_;
      improvedBerserkerStance_ = other.improvedBerserkerStance_;
      heroicFury_ = other.heroicFury_;
      rampage_ = other.rampage_;
      bloodsurge_ = other.bloodsurge_;
      unendingFury_ = other.unendingFury_;
      titansGrip_ = other.titansGrip_;
      improvedBloodrage_ = other.improvedBloodrage_;
      shieldSpecialization_ = other.shieldSpecialization_;
      improvedThunderClap_ = other.improvedThunderClap_;
      incite_ = other.incite_;
      anticipation_ = other.anticipation_;
      lastStand_ = other.lastStand_;
      improvedRevenge_ = other.improvedRevenge_;
      shieldMastery_ = other.shieldMastery_;
      toughness_ = other.toughness_;
      improvedSpellReflection_ = other.improvedSpellReflection_;
      improvedDisarm_ = other.improvedDisarm_;
      puncture_ = other.puncture_;
      improvedDisciplines_ = other.improvedDisciplines_;
      concussionBlow_ = other.concussionBlow_;
      gagOrder_ = other.gagOrder_;
      oneHandedWeaponSpecialization_ = other.oneHandedWeaponSpecialization_;
      improvedDefensiveStance_ = other.improvedDefensiveStance_;
      vigilance_ = other.vigilance_;
      focusedRage_ = other.focusedRage_;
      vitality_ = other.vitality_;
      safeguard_ = other.safeguard_;
      warbringer_ = other.warbringer_;
      devastate_ = other.devastate_;
      criticalBlock_ = other.criticalBlock_;
      swordAndBoard_ = other.swordAndBoard_;
      damageShield_ = other.damageShield_;
      shockwave_ = other.shockwave_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WarriorTalents Clone() {
      return new WarriorTalents(this);
    }

    /// <summary>Field number for the "improved_heroic_strike" field.</summary>
    public const int ImprovedHeroicStrikeFieldNumber = 1;
    private int improvedHeroicStrike_;
    /// <summary>
    /// Arms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedHeroicStrike {
      get { return improvedHeroicStrike_; }
      set {
        improvedHeroicStrike_ = value;
      }
    }

    /// <summary>Field number for the "deflection" field.</summary>
    public const int DeflectionFieldNumber = 2;
    private int deflection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Deflection {
      get { return deflection_; }
      set {
        deflection_ = value;
      }
    }

    /// <summary>Field number for the "improved_rend" field.</summary>
    public const int ImprovedRendFieldNumber = 3;
    private int improvedRend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedRend {
      get { return improvedRend_; }
      set {
        improvedRend_ = value;
      }
    }

    /// <summary>Field number for the "improved_charge" field.</summary>
    public const int ImprovedChargeFieldNumber = 4;
    private int improvedCharge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedCharge {
      get { return improvedCharge_; }
      set {
        improvedCharge_ = value;
      }
    }

    /// <summary>Field number for the "iron_will" field.</summary>
    public const int IronWillFieldNumber = 5;
    private int ironWill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IronWill {
      get { return ironWill_; }
      set {
        ironWill_ = value;
      }
    }

    /// <summary>Field number for the "tactical_mastery" field.</summary>
    public const int TacticalMasteryFieldNumber = 6;
    private int tacticalMastery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TacticalMastery {
      get { return tacticalMastery_; }
      set {
        tacticalMastery_ = value;
      }
    }

    /// <summary>Field number for the "improved_overpower" field.</summary>
    public const int ImprovedOverpowerFieldNumber = 7;
    private int improvedOverpower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedOverpower {
      get { return improvedOverpower_; }
      set {
        improvedOverpower_ = value;
      }
    }

    /// <summary>Field number for the "anger_management" field.</summary>
    public const int AngerManagementFieldNumber = 8;
    private bool angerManagement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AngerManagement {
      get { return angerManagement_; }
      set {
        angerManagement_ = value;
      }
    }

    /// <summary>Field number for the "impale" field.</summary>
    public const int ImpaleFieldNumber = 9;
    private int impale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Impale {
      get { return impale_; }
      set {
        impale_ = value;
      }
    }

    /// <summary>Field number for the "deep_wounds" field.</summary>
    public const int DeepWoundsFieldNumber = 10;
    private int deepWounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DeepWounds {
      get { return deepWounds_; }
      set {
        deepWounds_ = value;
      }
    }

    /// <summary>Field number for the "two_handed_weapon_specialization" field.</summary>
    public const int TwoHandedWeaponSpecializationFieldNumber = 11;
    private int twoHandedWeaponSpecialization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TwoHandedWeaponSpecialization {
      get { return twoHandedWeaponSpecialization_; }
      set {
        twoHandedWeaponSpecialization_ = value;
      }
    }

    /// <summary>Field number for the "taste_for_blood" field.</summary>
    public const int TasteForBloodFieldNumber = 12;
    private int tasteForBlood_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TasteForBlood {
      get { return tasteForBlood_; }
      set {
        tasteForBlood_ = value;
      }
    }

    /// <summary>Field number for the "poleaxe_specialization" field.</summary>
    public const int PoleaxeSpecializationFieldNumber = 13;
    private int poleaxeSpecialization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PoleaxeSpecialization {
      get { return poleaxeSpecialization_; }
      set {
        poleaxeSpecialization_ = value;
      }
    }

    /// <summary>Field number for the "sweeping_strikes" field.</summary>
    public const int SweepingStrikesFieldNumber = 14;
    private bool sweepingStrikes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SweepingStrikes {
      get { return sweepingStrikes_; }
      set {
        sweepingStrikes_ = value;
      }
    }

    /// <summary>Field number for the "mace_specialization" field.</summary>
    public const int MaceSpecializationFieldNumber = 15;
    private int maceSpecialization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaceSpecialization {
      get { return maceSpecialization_; }
      set {
        maceSpecialization_ = value;
      }
    }

    /// <summary>Field number for the "sword_specialization" field.</summary>
    public const int SwordSpecializationFieldNumber = 16;
    private int swordSpecialization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SwordSpecialization {
      get { return swordSpecialization_; }
      set {
        swordSpecialization_ = value;
      }
    }

    /// <summary>Field number for the "weapon_mastery" field.</summary>
    public const int WeaponMasteryFieldNumber = 17;
    private int weaponMastery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WeaponMastery {
      get { return weaponMastery_; }
      set {
        weaponMastery_ = value;
      }
    }

    /// <summary>Field number for the "improved_hamstring" field.</summary>
    public const int ImprovedHamstringFieldNumber = 18;
    private int improvedHamstring_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedHamstring {
      get { return improvedHamstring_; }
      set {
        improvedHamstring_ = value;
      }
    }

    /// <summary>Field number for the "trauma" field.</summary>
    public const int TraumaFieldNumber = 19;
    private int trauma_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Trauma {
      get { return trauma_; }
      set {
        trauma_ = value;
      }
    }

    /// <summary>Field number for the "second_wind" field.</summary>
    public const int SecondWindFieldNumber = 20;
    private int secondWind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SecondWind {
      get { return secondWind_; }
      set {
        secondWind_ = value;
      }
    }

    /// <summary>Field number for the "mortal_strike" field.</summary>
    public const int MortalStrikeFieldNumber = 21;
    private bool mortalStrike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MortalStrike {
      get { return mortalStrike_; }
      set {
        mortalStrike_ = value;
      }
    }

    /// <summary>Field number for the "strength_of_arms" field.</summary>
    public const int StrengthOfArmsFieldNumber = 22;
    private int strengthOfArms_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StrengthOfArms {
      get { return strengthOfArms_; }
      set {
        strengthOfArms_ = value;
      }
    }

    /// <summary>Field number for the "improved_slam" field.</summary>
    public const int ImprovedSlamFieldNumber = 23;
    private int improvedSlam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedSlam {
      get { return improvedSlam_; }
      set {
        improvedSlam_ = value;
      }
    }

    /// <summary>Field number for the "juggernaut" field.</summary>
    public const int JuggernautFieldNumber = 24;
    private bool juggernaut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Juggernaut {
      get { return juggernaut_; }
      set {
        juggernaut_ = value;
      }
    }

    /// <summary>Field number for the "improved_mortal_strike" field.</summary>
    public const int ImprovedMortalStrikeFieldNumber = 25;
    private int improvedMortalStrike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedMortalStrike {
      get { return improvedMortalStrike_; }
      set {
        improvedMortalStrike_ = value;
      }
    }

    /// <summary>Field number for the "unrelenting_assault" field.</summary>
    public const int UnrelentingAssaultFieldNumber = 26;
    private int unrelentingAssault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnrelentingAssault {
      get { return unrelentingAssault_; }
      set {
        unrelentingAssault_ = value;
      }
    }

    /// <summary>Field number for the "sudden_death" field.</summary>
    public const int SuddenDeathFieldNumber = 27;
    private int suddenDeath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuddenDeath {
      get { return suddenDeath_; }
      set {
        suddenDeath_ = value;
      }
    }

    /// <summary>Field number for the "endless_rage" field.</summary>
    public const int EndlessRageFieldNumber = 28;
    private bool endlessRage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EndlessRage {
      get { return endlessRage_; }
      set {
        endlessRage_ = value;
      }
    }

    /// <summary>Field number for the "blood_frenzy" field.</summary>
    public const int BloodFrenzyFieldNumber = 29;
    private int bloodFrenzy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BloodFrenzy {
      get { return bloodFrenzy_; }
      set {
        bloodFrenzy_ = value;
      }
    }

    /// <summary>Field number for the "wrecking_crew" field.</summary>
    public const int WreckingCrewFieldNumber = 30;
    private int wreckingCrew_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WreckingCrew {
      get { return wreckingCrew_; }
      set {
        wreckingCrew_ = value;
      }
    }

    /// <summary>Field number for the "bladestorm" field.</summary>
    public const int BladestormFieldNumber = 31;
    private bool bladestorm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Bladestorm {
      get { return bladestorm_; }
      set {
        bladestorm_ = value;
      }
    }

    /// <summary>Field number for the "armored_to_the_teeth" field.</summary>
    public const int ArmoredToTheTeethFieldNumber = 32;
    private int armoredToTheTeeth_;
    /// <summary>
    /// Fury
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArmoredToTheTeeth {
      get { return armoredToTheTeeth_; }
      set {
        armoredToTheTeeth_ = value;
      }
    }

    /// <summary>Field number for the "booming_voice" field.</summary>
    public const int BoomingVoiceFieldNumber = 33;
    private int boomingVoice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BoomingVoice {
      get { return boomingVoice_; }
      set {
        boomingVoice_ = value;
      }
    }

    /// <summary>Field number for the "cruelty" field.</summary>
    public const int CrueltyFieldNumber = 34;
    private int cruelty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cruelty {
      get { return cruelty_; }
      set {
        cruelty_ = value;
      }
    }

    /// <summary>Field number for the "improved_demoralizing_shout" field.</summary>
    public const int ImprovedDemoralizingShoutFieldNumber = 35;
    private int improvedDemoralizingShout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedDemoralizingShout {
      get { return improvedDemoralizingShout_; }
      set {
        improvedDemoralizingShout_ = value;
      }
    }

    /// <summary>Field number for the "unbridled_wrath" field.</summary>
    public const int UnbridledWrathFieldNumber = 36;
    private int unbridledWrath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnbridledWrath {
      get { return unbridledWrath_; }
      set {
        unbridledWrath_ = value;
      }
    }

    /// <summary>Field number for the "improved_cleave" field.</summary>
    public const int ImprovedCleaveFieldNumber = 37;
    private int improvedCleave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedCleave {
      get { return improvedCleave_; }
      set {
        improvedCleave_ = value;
      }
    }

    /// <summary>Field number for the "piercing_howl" field.</summary>
    public const int PiercingHowlFieldNumber = 38;
    private bool piercingHowl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PiercingHowl {
      get { return piercingHowl_; }
      set {
        piercingHowl_ = value;
      }
    }

    /// <summary>Field number for the "blood_craze" field.</summary>
    public const int BloodCrazeFieldNumber = 39;
    private int bloodCraze_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BloodCraze {
      get { return bloodCraze_; }
      set {
        bloodCraze_ = value;
      }
    }

    /// <summary>Field number for the "commanding_presence" field.</summary>
    public const int CommandingPresenceFieldNumber = 40;
    private int commandingPresence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CommandingPresence {
      get { return commandingPresence_; }
      set {
        commandingPresence_ = value;
      }
    }

    /// <summary>Field number for the "dual_wield_specialization" field.</summary>
    public const int DualWieldSpecializationFieldNumber = 41;
    private int dualWieldSpecialization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DualWieldSpecialization {
      get { return dualWieldSpecialization_; }
      set {
        dualWieldSpecialization_ = value;
      }
    }

    /// <summary>Field number for the "improved_execute" field.</summary>
    public const int ImprovedExecuteFieldNumber = 42;
    private int improvedExecute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedExecute {
      get { return improvedExecute_; }
      set {
        improvedExecute_ = value;
      }
    }

    /// <summary>Field number for the "enrage" field.</summary>
    public const int EnrageFieldNumber = 43;
    private int enrage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Enrage {
      get { return enrage_; }
      set {
        enrage_ = value;
      }
    }

    /// <summary>Field number for the "precision" field.</summary>
    public const int PrecisionFieldNumber = 44;
    private int precision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Precision {
      get { return precision_; }
      set {
        precision_ = value;
      }
    }

    /// <summary>Field number for the "death_wish" field.</summary>
    public const int DeathWishFieldNumber = 45;
    private bool deathWish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DeathWish {
      get { return deathWish_; }
      set {
        deathWish_ = value;
      }
    }

    /// <summary>Field number for the "improved_intercept" field.</summary>
    public const int ImprovedInterceptFieldNumber = 46;
    private int improvedIntercept_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedIntercept {
      get { return improvedIntercept_; }
      set {
        improvedIntercept_ = value;
      }
    }

    /// <summary>Field number for the "improved_berserker_rage" field.</summary>
    public const int ImprovedBerserkerRageFieldNumber = 47;
    private int improvedBerserkerRage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedBerserkerRage {
      get { return improvedBerserkerRage_; }
      set {
        improvedBerserkerRage_ = value;
      }
    }

    /// <summary>Field number for the "flurry" field.</summary>
    public const int FlurryFieldNumber = 48;
    private int flurry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Flurry {
      get { return flurry_; }
      set {
        flurry_ = value;
      }
    }

    /// <summary>Field number for the "intensify_rage" field.</summary>
    public const int IntensifyRageFieldNumber = 49;
    private int intensifyRage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int IntensifyRage {
      get { return intensifyRage_; }
      set {
        intensifyRage_ = value;
      }
    }

    /// <summary>Field number for the "bloodthirst" field.</summary>
    public const int BloodthirstFieldNumber = 50;
    private bool bloodthirst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Bloodthirst {
      get { return bloodthirst_; }
      set {
        bloodthirst_ = value;
      }
    }

    /// <summary>Field number for the "improved_whirlwind" field.</summary>
    public const int ImprovedWhirlwindFieldNumber = 51;
    private int improvedWhirlwind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedWhirlwind {
      get { return improvedWhirlwind_; }
      set {
        improvedWhirlwind_ = value;
      }
    }

    /// <summary>Field number for the "furious_attacks" field.</summary>
    public const int FuriousAttacksFieldNumber = 52;
    private int furiousAttacks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FuriousAttacks {
      get { return furiousAttacks_; }
      set {
        furiousAttacks_ = value;
      }
    }

    /// <summary>Field number for the "improved_berserker_stance" field.</summary>
    public const int ImprovedBerserkerStanceFieldNumber = 53;
    private int improvedBerserkerStance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedBerserkerStance {
      get { return improvedBerserkerStance_; }
      set {
        improvedBerserkerStance_ = value;
      }
    }

    /// <summary>Field number for the "heroic_fury" field.</summary>
    public const int HeroicFuryFieldNumber = 54;
    private bool heroicFury_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HeroicFury {
      get { return heroicFury_; }
      set {
        heroicFury_ = value;
      }
    }

    /// <summary>Field number for the "rampage" field.</summary>
    public const int RampageFieldNumber = 55;
    private bool rampage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Rampage {
      get { return rampage_; }
      set {
        rampage_ = value;
      }
    }

    /// <summary>Field number for the "bloodsurge" field.</summary>
    public const int BloodsurgeFieldNumber = 56;
    private int bloodsurge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Bloodsurge {
      get { return bloodsurge_; }
      set {
        bloodsurge_ = value;
      }
    }

    /// <summary>Field number for the "unending_fury" field.</summary>
    public const int UnendingFuryFieldNumber = 57;
    private int unendingFury_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnendingFury {
      get { return unendingFury_; }
      set {
        unendingFury_ = value;
      }
    }

    /// <summary>Field number for the "titans_grip" field.</summary>
    public const int TitansGripFieldNumber = 58;
    private bool titansGrip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool TitansGrip {
      get { return titansGrip_; }
      set {
        titansGrip_ = value;
      }
    }

    /// <summary>Field number for the "improved_bloodrage" field.</summary>
    public const int ImprovedBloodrageFieldNumber = 59;
    private int improvedBloodrage_;
    /// <summary>
    /// Protection
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedBloodrage {
      get { return improvedBloodrage_; }
      set {
        improvedBloodrage_ = value;
      }
    }

    /// <summary>Field number for the "shield_specialization" field.</summary>
    public const int ShieldSpecializationFieldNumber = 60;
    private int shieldSpecialization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShieldSpecialization {
      get { return shieldSpecialization_; }
      set {
        shieldSpecialization_ = value;
      }
    }

    /// <summary>Field number for the "improved_thunder_clap" field.</summary>
    public const int ImprovedThunderClapFieldNumber = 61;
    private int improvedThunderClap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedThunderClap {
      get { return improvedThunderClap_; }
      set {
        improvedThunderClap_ = value;
      }
    }

    /// <summary>Field number for the "incite" field.</summary>
    public const int InciteFieldNumber = 62;
    private int incite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Incite {
      get { return incite_; }
      set {
        incite_ = value;
      }
    }

    /// <summary>Field number for the "anticipation" field.</summary>
    public const int AnticipationFieldNumber = 63;
    private int anticipation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Anticipation {
      get { return anticipation_; }
      set {
        anticipation_ = value;
      }
    }

    /// <summary>Field number for the "last_stand" field.</summary>
    public const int LastStandFieldNumber = 64;
    private bool lastStand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LastStand {
      get { return lastStand_; }
      set {
        lastStand_ = value;
      }
    }

    /// <summary>Field number for the "improved_revenge" field.</summary>
    public const int ImprovedRevengeFieldNumber = 65;
    private int improvedRevenge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedRevenge {
      get { return improvedRevenge_; }
      set {
        improvedRevenge_ = value;
      }
    }

    /// <summary>Field number for the "shield_mastery" field.</summary>
    public const int ShieldMasteryFieldNumber = 66;
    private int shieldMastery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShieldMastery {
      get { return shieldMastery_; }
      set {
        shieldMastery_ = value;
      }
    }

    /// <summary>Field number for the "toughness" field.</summary>
    public const int ToughnessFieldNumber = 67;
    private int toughness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Toughness {
      get { return toughness_; }
      set {
        toughness_ = value;
      }
    }

    /// <summary>Field number for the "improved_spell_reflection" field.</summary>
    public const int ImprovedSpellReflectionFieldNumber = 68;
    private int improvedSpellReflection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedSpellReflection {
      get { return improvedSpellReflection_; }
      set {
        improvedSpellReflection_ = value;
      }
    }

    /// <summary>Field number for the "improved_disarm" field.</summary>
    public const int ImprovedDisarmFieldNumber = 69;
    private int improvedDisarm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedDisarm {
      get { return improvedDisarm_; }
      set {
        improvedDisarm_ = value;
      }
    }

    /// <summary>Field number for the "puncture" field.</summary>
    public const int PunctureFieldNumber = 70;
    private int puncture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Puncture {
      get { return puncture_; }
      set {
        puncture_ = value;
      }
    }

    /// <summary>Field number for the "improved_disciplines" field.</summary>
    public const int ImprovedDisciplinesFieldNumber = 71;
    private int improvedDisciplines_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedDisciplines {
      get { return improvedDisciplines_; }
      set {
        improvedDisciplines_ = value;
      }
    }

    /// <summary>Field number for the "concussion_blow" field.</summary>
    public const int ConcussionBlowFieldNumber = 72;
    private bool concussionBlow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ConcussionBlow {
      get { return concussionBlow_; }
      set {
        concussionBlow_ = value;
      }
    }

    /// <summary>Field number for the "gag_order" field.</summary>
    public const int GagOrderFieldNumber = 73;
    private int gagOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GagOrder {
      get { return gagOrder_; }
      set {
        gagOrder_ = value;
      }
    }

    /// <summary>Field number for the "one_handed_weapon_specialization" field.</summary>
    public const int OneHandedWeaponSpecializationFieldNumber = 74;
    private int oneHandedWeaponSpecialization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OneHandedWeaponSpecialization {
      get { return oneHandedWeaponSpecialization_; }
      set {
        oneHandedWeaponSpecialization_ = value;
      }
    }

    /// <summary>Field number for the "improved_defensive_stance" field.</summary>
    public const int ImprovedDefensiveStanceFieldNumber = 75;
    private int improvedDefensiveStance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedDefensiveStance {
      get { return improvedDefensiveStance_; }
      set {
        improvedDefensiveStance_ = value;
      }
    }

    /// <summary>Field number for the "vigilance" field.</summary>
    public const int VigilanceFieldNumber = 76;
    private bool vigilance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Vigilance {
      get { return vigilance_; }
      set {
        vigilance_ = value;
      }
    }

    /// <summary>Field number for the "focused_rage" field.</summary>
    public const int FocusedRageFieldNumber = 77;
    private int focusedRage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FocusedRage {
      get { return focusedRage_; }
      set {
        focusedRage_ = value;
      }
    }

    /// <summary>Field number for the "vitality" field.</summary>
    public const int VitalityFieldNumber = 78;
    private int vitality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Vitality {
      get { return vitality_; }
      set {
        vitality_ = value;
      }
    }

    /// <summary>Field number for the "safeguard" field.</summary>
    public const int SafeguardFieldNumber = 79;
    private int safeguard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Safeguard {
      get { return safeguard_; }
      set {
        safeguard_ = value;
      }
    }

    /// <summary>Field number for the "warbringer" field.</summary>
    public const int WarbringerFieldNumber = 80;
    private bool warbringer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Warbringer {
      get { return warbringer_; }
      set {
        warbringer_ = value;
      }
    }

    /// <summary>Field number for the "devastate" field.</summary>
    public const int DevastateFieldNumber = 81;
    private bool devastate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Devastate {
      get { return devastate_; }
      set {
        devastate_ = value;
      }
    }

    /// <summary>Field number for the "critical_block" field.</summary>
    public const int CriticalBlockFieldNumber = 82;
    private int criticalBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CriticalBlock {
      get { return criticalBlock_; }
      set {
        criticalBlock_ = value;
      }
    }

    /// <summary>Field number for the "sword_and_board" field.</summary>
    public const int SwordAndBoardFieldNumber = 83;
    private int swordAndBoard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SwordAndBoard {
      get { return swordAndBoard_; }
      set {
        swordAndBoard_ = value;
      }
    }

    /// <summary>Field number for the "damage_shield" field.</summary>
    public const int DamageShieldFieldNumber = 84;
    private int damageShield_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DamageShield {
      get { return damageShield_; }
      set {
        damageShield_ = value;
      }
    }

    /// <summary>Field number for the "shockwave" field.</summary>
    public const int ShockwaveFieldNumber = 85;
    private bool shockwave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Shockwave {
      get { return shockwave_; }
      set {
        shockwave_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WarriorTalents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WarriorTalents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImprovedHeroicStrike != other.ImprovedHeroicStrike) return false;
      if (Deflection != other.Deflection) return false;
      if (ImprovedRend != other.ImprovedRend) return false;
      if (ImprovedCharge != other.ImprovedCharge) return false;
      if (IronWill != other.IronWill) return false;
      if (TacticalMastery != other.TacticalMastery) return false;
      if (ImprovedOverpower != other.ImprovedOverpower) return false;
      if (AngerManagement != other.AngerManagement) return false;
      if (Impale != other.Impale) return false;
      if (DeepWounds != other.DeepWounds) return false;
      if (TwoHandedWeaponSpecialization != other.TwoHandedWeaponSpecialization) return false;
      if (TasteForBlood != other.TasteForBlood) return false;
      if (PoleaxeSpecialization != other.PoleaxeSpecialization) return false;
      if (SweepingStrikes != other.SweepingStrikes) return false;
      if (MaceSpecialization != other.MaceSpecialization) return false;
      if (SwordSpecialization != other.SwordSpecialization) return false;
      if (WeaponMastery != other.WeaponMastery) return false;
      if (ImprovedHamstring != other.ImprovedHamstring) return false;
      if (Trauma != other.Trauma) return false;
      if (SecondWind != other.SecondWind) return false;
      if (MortalStrike != other.MortalStrike) return false;
      if (StrengthOfArms != other.StrengthOfArms) return false;
      if (ImprovedSlam != other.ImprovedSlam) return false;
      if (Juggernaut != other.Juggernaut) return false;
      if (ImprovedMortalStrike != other.ImprovedMortalStrike) return false;
      if (UnrelentingAssault != other.UnrelentingAssault) return false;
      if (SuddenDeath != other.SuddenDeath) return false;
      if (EndlessRage != other.EndlessRage) return false;
      if (BloodFrenzy != other.BloodFrenzy) return false;
      if (WreckingCrew != other.WreckingCrew) return false;
      if (Bladestorm != other.Bladestorm) return false;
      if (ArmoredToTheTeeth != other.ArmoredToTheTeeth) return false;
      if (BoomingVoice != other.BoomingVoice) return false;
      if (Cruelty != other.Cruelty) return false;
      if (ImprovedDemoralizingShout != other.ImprovedDemoralizingShout) return false;
      if (UnbridledWrath != other.UnbridledWrath) return false;
      if (ImprovedCleave != other.ImprovedCleave) return false;
      if (PiercingHowl != other.PiercingHowl) return false;
      if (BloodCraze != other.BloodCraze) return false;
      if (CommandingPresence != other.CommandingPresence) return false;
      if (DualWieldSpecialization != other.DualWieldSpecialization) return false;
      if (ImprovedExecute != other.ImprovedExecute) return false;
      if (Enrage != other.Enrage) return false;
      if (Precision != other.Precision) return false;
      if (DeathWish != other.DeathWish) return false;
      if (ImprovedIntercept != other.ImprovedIntercept) return false;
      if (ImprovedBerserkerRage != other.ImprovedBerserkerRage) return false;
      if (Flurry != other.Flurry) return false;
      if (IntensifyRage != other.IntensifyRage) return false;
      if (Bloodthirst != other.Bloodthirst) return false;
      if (ImprovedWhirlwind != other.ImprovedWhirlwind) return false;
      if (FuriousAttacks != other.FuriousAttacks) return false;
      if (ImprovedBerserkerStance != other.ImprovedBerserkerStance) return false;
      if (HeroicFury != other.HeroicFury) return false;
      if (Rampage != other.Rampage) return false;
      if (Bloodsurge != other.Bloodsurge) return false;
      if (UnendingFury != other.UnendingFury) return false;
      if (TitansGrip != other.TitansGrip) return false;
      if (ImprovedBloodrage != other.ImprovedBloodrage) return false;
      if (ShieldSpecialization != other.ShieldSpecialization) return false;
      if (ImprovedThunderClap != other.ImprovedThunderClap) return false;
      if (Incite != other.Incite) return false;
      if (Anticipation != other.Anticipation) return false;
      if (LastStand != other.LastStand) return false;
      if (ImprovedRevenge != other.ImprovedRevenge) return false;
      if (ShieldMastery != other.ShieldMastery) return false;
      if (Toughness != other.Toughness) return false;
      if (ImprovedSpellReflection != other.ImprovedSpellReflection) return false;
      if (ImprovedDisarm != other.ImprovedDisarm) return false;
      if (Puncture != other.Puncture) return false;
      if (ImprovedDisciplines != other.ImprovedDisciplines) return false;
      if (ConcussionBlow != other.ConcussionBlow) return false;
      if (GagOrder != other.GagOrder) return false;
      if (OneHandedWeaponSpecialization != other.OneHandedWeaponSpecialization) return false;
      if (ImprovedDefensiveStance != other.ImprovedDefensiveStance) return false;
      if (Vigilance != other.Vigilance) return false;
      if (FocusedRage != other.FocusedRage) return false;
      if (Vitality != other.Vitality) return false;
      if (Safeguard != other.Safeguard) return false;
      if (Warbringer != other.Warbringer) return false;
      if (Devastate != other.Devastate) return false;
      if (CriticalBlock != other.CriticalBlock) return false;
      if (SwordAndBoard != other.SwordAndBoard) return false;
      if (DamageShield != other.DamageShield) return false;
      if (Shockwave != other.Shockwave) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ImprovedHeroicStrike != 0) hash ^= ImprovedHeroicStrike.GetHashCode();
      if (Deflection != 0) hash ^= Deflection.GetHashCode();
      if (ImprovedRend != 0) hash ^= ImprovedRend.GetHashCode();
      if (ImprovedCharge != 0) hash ^= ImprovedCharge.GetHashCode();
      if (IronWill != 0) hash ^= IronWill.GetHashCode();
      if (TacticalMastery != 0) hash ^= TacticalMastery.GetHashCode();
      if (ImprovedOverpower != 0) hash ^= ImprovedOverpower.GetHashCode();
      if (AngerManagement != false) hash ^= AngerManagement.GetHashCode();
      if (Impale != 0) hash ^= Impale.GetHashCode();
      if (DeepWounds != 0) hash ^= DeepWounds.GetHashCode();
      if (TwoHandedWeaponSpecialization != 0) hash ^= TwoHandedWeaponSpecialization.GetHashCode();
      if (TasteForBlood != 0) hash ^= TasteForBlood.GetHashCode();
      if (PoleaxeSpecialization != 0) hash ^= PoleaxeSpecialization.GetHashCode();
      if (SweepingStrikes != false) hash ^= SweepingStrikes.GetHashCode();
      if (MaceSpecialization != 0) hash ^= MaceSpecialization.GetHashCode();
      if (SwordSpecialization != 0) hash ^= SwordSpecialization.GetHashCode();
      if (WeaponMastery != 0) hash ^= WeaponMastery.GetHashCode();
      if (ImprovedHamstring != 0) hash ^= ImprovedHamstring.GetHashCode();
      if (Trauma != 0) hash ^= Trauma.GetHashCode();
      if (SecondWind != 0) hash ^= SecondWind.GetHashCode();
      if (MortalStrike != false) hash ^= MortalStrike.GetHashCode();
      if (StrengthOfArms != 0) hash ^= StrengthOfArms.GetHashCode();
      if (ImprovedSlam != 0) hash ^= ImprovedSlam.GetHashCode();
      if (Juggernaut != false) hash ^= Juggernaut.GetHashCode();
      if (ImprovedMortalStrike != 0) hash ^= ImprovedMortalStrike.GetHashCode();
      if (UnrelentingAssault != 0) hash ^= UnrelentingAssault.GetHashCode();
      if (SuddenDeath != 0) hash ^= SuddenDeath.GetHashCode();
      if (EndlessRage != false) hash ^= EndlessRage.GetHashCode();
      if (BloodFrenzy != 0) hash ^= BloodFrenzy.GetHashCode();
      if (WreckingCrew != 0) hash ^= WreckingCrew.GetHashCode();
      if (Bladestorm != false) hash ^= Bladestorm.GetHashCode();
      if (ArmoredToTheTeeth != 0) hash ^= ArmoredToTheTeeth.GetHashCode();
      if (BoomingVoice != 0) hash ^= BoomingVoice.GetHashCode();
      if (Cruelty != 0) hash ^= Cruelty.GetHashCode();
      if (ImprovedDemoralizingShout != 0) hash ^= ImprovedDemoralizingShout.GetHashCode();
      if (UnbridledWrath != 0) hash ^= UnbridledWrath.GetHashCode();
      if (ImprovedCleave != 0) hash ^= ImprovedCleave.GetHashCode();
      if (PiercingHowl != false) hash ^= PiercingHowl.GetHashCode();
      if (BloodCraze != 0) hash ^= BloodCraze.GetHashCode();
      if (CommandingPresence != 0) hash ^= CommandingPresence.GetHashCode();
      if (DualWieldSpecialization != 0) hash ^= DualWieldSpecialization.GetHashCode();
      if (ImprovedExecute != 0) hash ^= ImprovedExecute.GetHashCode();
      if (Enrage != 0) hash ^= Enrage.GetHashCode();
      if (Precision != 0) hash ^= Precision.GetHashCode();
      if (DeathWish != false) hash ^= DeathWish.GetHashCode();
      if (ImprovedIntercept != 0) hash ^= ImprovedIntercept.GetHashCode();
      if (ImprovedBerserkerRage != 0) hash ^= ImprovedBerserkerRage.GetHashCode();
      if (Flurry != 0) hash ^= Flurry.GetHashCode();
      if (IntensifyRage != 0) hash ^= IntensifyRage.GetHashCode();
      if (Bloodthirst != false) hash ^= Bloodthirst.GetHashCode();
      if (ImprovedWhirlwind != 0) hash ^= ImprovedWhirlwind.GetHashCode();
      if (FuriousAttacks != 0) hash ^= FuriousAttacks.GetHashCode();
      if (ImprovedBerserkerStance != 0) hash ^= ImprovedBerserkerStance.GetHashCode();
      if (HeroicFury != false) hash ^= HeroicFury.GetHashCode();
      if (Rampage != false) hash ^= Rampage.GetHashCode();
      if (Bloodsurge != 0) hash ^= Bloodsurge.GetHashCode();
      if (UnendingFury != 0) hash ^= UnendingFury.GetHashCode();
      if (TitansGrip != false) hash ^= TitansGrip.GetHashCode();
      if (ImprovedBloodrage != 0) hash ^= ImprovedBloodrage.GetHashCode();
      if (ShieldSpecialization != 0) hash ^= ShieldSpecialization.GetHashCode();
      if (ImprovedThunderClap != 0) hash ^= ImprovedThunderClap.GetHashCode();
      if (Incite != 0) hash ^= Incite.GetHashCode();
      if (Anticipation != 0) hash ^= Anticipation.GetHashCode();
      if (LastStand != false) hash ^= LastStand.GetHashCode();
      if (ImprovedRevenge != 0) hash ^= ImprovedRevenge.GetHashCode();
      if (ShieldMastery != 0) hash ^= ShieldMastery.GetHashCode();
      if (Toughness != 0) hash ^= Toughness.GetHashCode();
      if (ImprovedSpellReflection != 0) hash ^= ImprovedSpellReflection.GetHashCode();
      if (ImprovedDisarm != 0) hash ^= ImprovedDisarm.GetHashCode();
      if (Puncture != 0) hash ^= Puncture.GetHashCode();
      if (ImprovedDisciplines != 0) hash ^= ImprovedDisciplines.GetHashCode();
      if (ConcussionBlow != false) hash ^= ConcussionBlow.GetHashCode();
      if (GagOrder != 0) hash ^= GagOrder.GetHashCode();
      if (OneHandedWeaponSpecialization != 0) hash ^= OneHandedWeaponSpecialization.GetHashCode();
      if (ImprovedDefensiveStance != 0) hash ^= ImprovedDefensiveStance.GetHashCode();
      if (Vigilance != false) hash ^= Vigilance.GetHashCode();
      if (FocusedRage != 0) hash ^= FocusedRage.GetHashCode();
      if (Vitality != 0) hash ^= Vitality.GetHashCode();
      if (Safeguard != 0) hash ^= Safeguard.GetHashCode();
      if (Warbringer != false) hash ^= Warbringer.GetHashCode();
      if (Devastate != false) hash ^= Devastate.GetHashCode();
      if (CriticalBlock != 0) hash ^= CriticalBlock.GetHashCode();
      if (SwordAndBoard != 0) hash ^= SwordAndBoard.GetHashCode();
      if (DamageShield != 0) hash ^= DamageShield.GetHashCode();
      if (Shockwave != false) hash ^= Shockwave.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ImprovedHeroicStrike != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ImprovedHeroicStrike);
      }
      if (Deflection != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Deflection);
      }
      if (ImprovedRend != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ImprovedRend);
      }
      if (ImprovedCharge != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ImprovedCharge);
      }
      if (IronWill != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IronWill);
      }
      if (TacticalMastery != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TacticalMastery);
      }
      if (ImprovedOverpower != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ImprovedOverpower);
      }
      if (AngerManagement != false) {
        output.WriteRawTag(64);
        output.WriteBool(AngerManagement);
      }
      if (Impale != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Impale);
      }
      if (DeepWounds != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DeepWounds);
      }
      if (TwoHandedWeaponSpecialization != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TwoHandedWeaponSpecialization);
      }
      if (TasteForBlood != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TasteForBlood);
      }
      if (PoleaxeSpecialization != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(PoleaxeSpecialization);
      }
      if (SweepingStrikes != false) {
        output.WriteRawTag(112);
        output.WriteBool(SweepingStrikes);
      }
      if (MaceSpecialization != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MaceSpecialization);
      }
      if (SwordSpecialization != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(SwordSpecialization);
      }
      if (WeaponMastery != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(WeaponMastery);
      }
      if (ImprovedHamstring != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(ImprovedHamstring);
      }
      if (Trauma != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Trauma);
      }
      if (SecondWind != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SecondWind);
      }
      if (MortalStrike != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(MortalStrike);
      }
      if (StrengthOfArms != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(StrengthOfArms);
      }
      if (ImprovedSlam != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(ImprovedSlam);
      }
      if (Juggernaut != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(Juggernaut);
      }
      if (ImprovedMortalStrike != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(ImprovedMortalStrike);
      }
      if (UnrelentingAssault != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(UnrelentingAssault);
      }
      if (SuddenDeath != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(SuddenDeath);
      }
      if (EndlessRage != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(EndlessRage);
      }
      if (BloodFrenzy != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(BloodFrenzy);
      }
      if (WreckingCrew != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(WreckingCrew);
      }
      if (Bladestorm != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(Bladestorm);
      }
      if (ArmoredToTheTeeth != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(ArmoredToTheTeeth);
      }
      if (BoomingVoice != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(BoomingVoice);
      }
      if (Cruelty != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Cruelty);
      }
      if (ImprovedDemoralizingShout != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(ImprovedDemoralizingShout);
      }
      if (UnbridledWrath != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(UnbridledWrath);
      }
      if (ImprovedCleave != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(ImprovedCleave);
      }
      if (PiercingHowl != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(PiercingHowl);
      }
      if (BloodCraze != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(BloodCraze);
      }
      if (CommandingPresence != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(CommandingPresence);
      }
      if (DualWieldSpecialization != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(DualWieldSpecialization);
      }
      if (ImprovedExecute != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(ImprovedExecute);
      }
      if (Enrage != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(Enrage);
      }
      if (Precision != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(Precision);
      }
      if (DeathWish != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(DeathWish);
      }
      if (ImprovedIntercept != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(ImprovedIntercept);
      }
      if (ImprovedBerserkerRage != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(ImprovedBerserkerRage);
      }
      if (Flurry != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(Flurry);
      }
      if (IntensifyRage != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(IntensifyRage);
      }
      if (Bloodthirst != false) {
        output.WriteRawTag(144, 3);
        output.WriteBool(Bloodthirst);
      }
      if (ImprovedWhirlwind != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(ImprovedWhirlwind);
      }
      if (FuriousAttacks != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(FuriousAttacks);
      }
      if (ImprovedBerserkerStance != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(ImprovedBerserkerStance);
      }
      if (HeroicFury != false) {
        output.WriteRawTag(176, 3);
        output.WriteBool(HeroicFury);
      }
      if (Rampage != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(Rampage);
      }
      if (Bloodsurge != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(Bloodsurge);
      }
      if (UnendingFury != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(UnendingFury);
      }
      if (TitansGrip != false) {
        output.WriteRawTag(208, 3);
        output.WriteBool(TitansGrip);
      }
      if (ImprovedBloodrage != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(ImprovedBloodrage);
      }
      if (ShieldSpecialization != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(ShieldSpecialization);
      }
      if (ImprovedThunderClap != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(ImprovedThunderClap);
      }
      if (Incite != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(Incite);
      }
      if (Anticipation != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(Anticipation);
      }
      if (LastStand != false) {
        output.WriteRawTag(128, 4);
        output.WriteBool(LastStand);
      }
      if (ImprovedRevenge != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(ImprovedRevenge);
      }
      if (ShieldMastery != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(ShieldMastery);
      }
      if (Toughness != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(Toughness);
      }
      if (ImprovedSpellReflection != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(ImprovedSpellReflection);
      }
      if (ImprovedDisarm != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(ImprovedDisarm);
      }
      if (Puncture != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(Puncture);
      }
      if (ImprovedDisciplines != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(ImprovedDisciplines);
      }
      if (ConcussionBlow != false) {
        output.WriteRawTag(192, 4);
        output.WriteBool(ConcussionBlow);
      }
      if (GagOrder != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(GagOrder);
      }
      if (OneHandedWeaponSpecialization != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(OneHandedWeaponSpecialization);
      }
      if (ImprovedDefensiveStance != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(ImprovedDefensiveStance);
      }
      if (Vigilance != false) {
        output.WriteRawTag(224, 4);
        output.WriteBool(Vigilance);
      }
      if (FocusedRage != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(FocusedRage);
      }
      if (Vitality != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(Vitality);
      }
      if (Safeguard != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(Safeguard);
      }
      if (Warbringer != false) {
        output.WriteRawTag(128, 5);
        output.WriteBool(Warbringer);
      }
      if (Devastate != false) {
        output.WriteRawTag(136, 5);
        output.WriteBool(Devastate);
      }
      if (CriticalBlock != 0) {
        output.WriteRawTag(144, 5);
        output.WriteInt32(CriticalBlock);
      }
      if (SwordAndBoard != 0) {
        output.WriteRawTag(152, 5);
        output.WriteInt32(SwordAndBoard);
      }
      if (DamageShield != 0) {
        output.WriteRawTag(160, 5);
        output.WriteInt32(DamageShield);
      }
      if (Shockwave != false) {
        output.WriteRawTag(168, 5);
        output.WriteBool(Shockwave);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ImprovedHeroicStrike != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ImprovedHeroicStrike);
      }
      if (Deflection != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Deflection);
      }
      if (ImprovedRend != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ImprovedRend);
      }
      if (ImprovedCharge != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ImprovedCharge);
      }
      if (IronWill != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IronWill);
      }
      if (TacticalMastery != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TacticalMastery);
      }
      if (ImprovedOverpower != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ImprovedOverpower);
      }
      if (AngerManagement != false) {
        output.WriteRawTag(64);
        output.WriteBool(AngerManagement);
      }
      if (Impale != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Impale);
      }
      if (DeepWounds != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DeepWounds);
      }
      if (TwoHandedWeaponSpecialization != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TwoHandedWeaponSpecialization);
      }
      if (TasteForBlood != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TasteForBlood);
      }
      if (PoleaxeSpecialization != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(PoleaxeSpecialization);
      }
      if (SweepingStrikes != false) {
        output.WriteRawTag(112);
        output.WriteBool(SweepingStrikes);
      }
      if (MaceSpecialization != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MaceSpecialization);
      }
      if (SwordSpecialization != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(SwordSpecialization);
      }
      if (WeaponMastery != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(WeaponMastery);
      }
      if (ImprovedHamstring != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(ImprovedHamstring);
      }
      if (Trauma != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Trauma);
      }
      if (SecondWind != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SecondWind);
      }
      if (MortalStrike != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(MortalStrike);
      }
      if (StrengthOfArms != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(StrengthOfArms);
      }
      if (ImprovedSlam != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(ImprovedSlam);
      }
      if (Juggernaut != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(Juggernaut);
      }
      if (ImprovedMortalStrike != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(ImprovedMortalStrike);
      }
      if (UnrelentingAssault != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(UnrelentingAssault);
      }
      if (SuddenDeath != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(SuddenDeath);
      }
      if (EndlessRage != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(EndlessRage);
      }
      if (BloodFrenzy != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(BloodFrenzy);
      }
      if (WreckingCrew != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(WreckingCrew);
      }
      if (Bladestorm != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(Bladestorm);
      }
      if (ArmoredToTheTeeth != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(ArmoredToTheTeeth);
      }
      if (BoomingVoice != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(BoomingVoice);
      }
      if (Cruelty != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Cruelty);
      }
      if (ImprovedDemoralizingShout != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(ImprovedDemoralizingShout);
      }
      if (UnbridledWrath != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(UnbridledWrath);
      }
      if (ImprovedCleave != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(ImprovedCleave);
      }
      if (PiercingHowl != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(PiercingHowl);
      }
      if (BloodCraze != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(BloodCraze);
      }
      if (CommandingPresence != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(CommandingPresence);
      }
      if (DualWieldSpecialization != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(DualWieldSpecialization);
      }
      if (ImprovedExecute != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(ImprovedExecute);
      }
      if (Enrage != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(Enrage);
      }
      if (Precision != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(Precision);
      }
      if (DeathWish != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(DeathWish);
      }
      if (ImprovedIntercept != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(ImprovedIntercept);
      }
      if (ImprovedBerserkerRage != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(ImprovedBerserkerRage);
      }
      if (Flurry != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(Flurry);
      }
      if (IntensifyRage != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(IntensifyRage);
      }
      if (Bloodthirst != false) {
        output.WriteRawTag(144, 3);
        output.WriteBool(Bloodthirst);
      }
      if (ImprovedWhirlwind != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(ImprovedWhirlwind);
      }
      if (FuriousAttacks != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(FuriousAttacks);
      }
      if (ImprovedBerserkerStance != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(ImprovedBerserkerStance);
      }
      if (HeroicFury != false) {
        output.WriteRawTag(176, 3);
        output.WriteBool(HeroicFury);
      }
      if (Rampage != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(Rampage);
      }
      if (Bloodsurge != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(Bloodsurge);
      }
      if (UnendingFury != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(UnendingFury);
      }
      if (TitansGrip != false) {
        output.WriteRawTag(208, 3);
        output.WriteBool(TitansGrip);
      }
      if (ImprovedBloodrage != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(ImprovedBloodrage);
      }
      if (ShieldSpecialization != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(ShieldSpecialization);
      }
      if (ImprovedThunderClap != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(ImprovedThunderClap);
      }
      if (Incite != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(Incite);
      }
      if (Anticipation != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(Anticipation);
      }
      if (LastStand != false) {
        output.WriteRawTag(128, 4);
        output.WriteBool(LastStand);
      }
      if (ImprovedRevenge != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(ImprovedRevenge);
      }
      if (ShieldMastery != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(ShieldMastery);
      }
      if (Toughness != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(Toughness);
      }
      if (ImprovedSpellReflection != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(ImprovedSpellReflection);
      }
      if (ImprovedDisarm != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(ImprovedDisarm);
      }
      if (Puncture != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(Puncture);
      }
      if (ImprovedDisciplines != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(ImprovedDisciplines);
      }
      if (ConcussionBlow != false) {
        output.WriteRawTag(192, 4);
        output.WriteBool(ConcussionBlow);
      }
      if (GagOrder != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(GagOrder);
      }
      if (OneHandedWeaponSpecialization != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(OneHandedWeaponSpecialization);
      }
      if (ImprovedDefensiveStance != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(ImprovedDefensiveStance);
      }
      if (Vigilance != false) {
        output.WriteRawTag(224, 4);
        output.WriteBool(Vigilance);
      }
      if (FocusedRage != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(FocusedRage);
      }
      if (Vitality != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(Vitality);
      }
      if (Safeguard != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(Safeguard);
      }
      if (Warbringer != false) {
        output.WriteRawTag(128, 5);
        output.WriteBool(Warbringer);
      }
      if (Devastate != false) {
        output.WriteRawTag(136, 5);
        output.WriteBool(Devastate);
      }
      if (CriticalBlock != 0) {
        output.WriteRawTag(144, 5);
        output.WriteInt32(CriticalBlock);
      }
      if (SwordAndBoard != 0) {
        output.WriteRawTag(152, 5);
        output.WriteInt32(SwordAndBoard);
      }
      if (DamageShield != 0) {
        output.WriteRawTag(160, 5);
        output.WriteInt32(DamageShield);
      }
      if (Shockwave != false) {
        output.WriteRawTag(168, 5);
        output.WriteBool(Shockwave);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ImprovedHeroicStrike != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedHeroicStrike);
      }
      if (Deflection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deflection);
      }
      if (ImprovedRend != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedRend);
      }
      if (ImprovedCharge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedCharge);
      }
      if (IronWill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IronWill);
      }
      if (TacticalMastery != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TacticalMastery);
      }
      if (ImprovedOverpower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedOverpower);
      }
      if (AngerManagement != false) {
        size += 1 + 1;
      }
      if (Impale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Impale);
      }
      if (DeepWounds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeepWounds);
      }
      if (TwoHandedWeaponSpecialization != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TwoHandedWeaponSpecialization);
      }
      if (TasteForBlood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TasteForBlood);
      }
      if (PoleaxeSpecialization != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PoleaxeSpecialization);
      }
      if (SweepingStrikes != false) {
        size += 1 + 1;
      }
      if (MaceSpecialization != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaceSpecialization);
      }
      if (SwordSpecialization != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SwordSpecialization);
      }
      if (WeaponMastery != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WeaponMastery);
      }
      if (ImprovedHamstring != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedHamstring);
      }
      if (Trauma != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Trauma);
      }
      if (SecondWind != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SecondWind);
      }
      if (MortalStrike != false) {
        size += 2 + 1;
      }
      if (StrengthOfArms != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StrengthOfArms);
      }
      if (ImprovedSlam != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedSlam);
      }
      if (Juggernaut != false) {
        size += 2 + 1;
      }
      if (ImprovedMortalStrike != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedMortalStrike);
      }
      if (UnrelentingAssault != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnrelentingAssault);
      }
      if (SuddenDeath != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SuddenDeath);
      }
      if (EndlessRage != false) {
        size += 2 + 1;
      }
      if (BloodFrenzy != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BloodFrenzy);
      }
      if (WreckingCrew != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WreckingCrew);
      }
      if (Bladestorm != false) {
        size += 2 + 1;
      }
      if (ArmoredToTheTeeth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ArmoredToTheTeeth);
      }
      if (BoomingVoice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoomingVoice);
      }
      if (Cruelty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Cruelty);
      }
      if (ImprovedDemoralizingShout != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedDemoralizingShout);
      }
      if (UnbridledWrath != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnbridledWrath);
      }
      if (ImprovedCleave != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedCleave);
      }
      if (PiercingHowl != false) {
        size += 2 + 1;
      }
      if (BloodCraze != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BloodCraze);
      }
      if (CommandingPresence != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CommandingPresence);
      }
      if (DualWieldSpecialization != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DualWieldSpecialization);
      }
      if (ImprovedExecute != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedExecute);
      }
      if (Enrage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Enrage);
      }
      if (Precision != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Precision);
      }
      if (DeathWish != false) {
        size += 2 + 1;
      }
      if (ImprovedIntercept != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedIntercept);
      }
      if (ImprovedBerserkerRage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedBerserkerRage);
      }
      if (Flurry != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Flurry);
      }
      if (IntensifyRage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IntensifyRage);
      }
      if (Bloodthirst != false) {
        size += 2 + 1;
      }
      if (ImprovedWhirlwind != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedWhirlwind);
      }
      if (FuriousAttacks != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FuriousAttacks);
      }
      if (ImprovedBerserkerStance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedBerserkerStance);
      }
      if (HeroicFury != false) {
        size += 2 + 1;
      }
      if (Rampage != false) {
        size += 2 + 1;
      }
      if (Bloodsurge != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Bloodsurge);
      }
      if (UnendingFury != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnendingFury);
      }
      if (TitansGrip != false) {
        size += 2 + 1;
      }
      if (ImprovedBloodrage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedBloodrage);
      }
      if (ShieldSpecialization != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShieldSpecialization);
      }
      if (ImprovedThunderClap != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedThunderClap);
      }
      if (Incite != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Incite);
      }
      if (Anticipation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Anticipation);
      }
      if (LastStand != false) {
        size += 2 + 1;
      }
      if (ImprovedRevenge != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedRevenge);
      }
      if (ShieldMastery != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShieldMastery);
      }
      if (Toughness != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Toughness);
      }
      if (ImprovedSpellReflection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedSpellReflection);
      }
      if (ImprovedDisarm != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedDisarm);
      }
      if (Puncture != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Puncture);
      }
      if (ImprovedDisciplines != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedDisciplines);
      }
      if (ConcussionBlow != false) {
        size += 2 + 1;
      }
      if (GagOrder != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GagOrder);
      }
      if (OneHandedWeaponSpecialization != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OneHandedWeaponSpecialization);
      }
      if (ImprovedDefensiveStance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedDefensiveStance);
      }
      if (Vigilance != false) {
        size += 2 + 1;
      }
      if (FocusedRage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FocusedRage);
      }
      if (Vitality != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Vitality);
      }
      if (Safeguard != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Safeguard);
      }
      if (Warbringer != false) {
        size += 2 + 1;
      }
      if (Devastate != false) {
        size += 2 + 1;
      }
      if (CriticalBlock != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CriticalBlock);
      }
      if (SwordAndBoard != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SwordAndBoard);
      }
      if (DamageShield != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DamageShield);
      }
      if (Shockwave != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WarriorTalents other) {
      if (other == null) {
        return;
      }
      if (other.ImprovedHeroicStrike != 0) {
        ImprovedHeroicStrike = other.ImprovedHeroicStrike;
      }
      if (other.Deflection != 0) {
        Deflection = other.Deflection;
      }
      if (other.ImprovedRend != 0) {
        ImprovedRend = other.ImprovedRend;
      }
      if (other.ImprovedCharge != 0) {
        ImprovedCharge = other.ImprovedCharge;
      }
      if (other.IronWill != 0) {
        IronWill = other.IronWill;
      }
      if (other.TacticalMastery != 0) {
        TacticalMastery = other.TacticalMastery;
      }
      if (other.ImprovedOverpower != 0) {
        ImprovedOverpower = other.ImprovedOverpower;
      }
      if (other.AngerManagement != false) {
        AngerManagement = other.AngerManagement;
      }
      if (other.Impale != 0) {
        Impale = other.Impale;
      }
      if (other.DeepWounds != 0) {
        DeepWounds = other.DeepWounds;
      }
      if (other.TwoHandedWeaponSpecialization != 0) {
        TwoHandedWeaponSpecialization = other.TwoHandedWeaponSpecialization;
      }
      if (other.TasteForBlood != 0) {
        TasteForBlood = other.TasteForBlood;
      }
      if (other.PoleaxeSpecialization != 0) {
        PoleaxeSpecialization = other.PoleaxeSpecialization;
      }
      if (other.SweepingStrikes != false) {
        SweepingStrikes = other.SweepingStrikes;
      }
      if (other.MaceSpecialization != 0) {
        MaceSpecialization = other.MaceSpecialization;
      }
      if (other.SwordSpecialization != 0) {
        SwordSpecialization = other.SwordSpecialization;
      }
      if (other.WeaponMastery != 0) {
        WeaponMastery = other.WeaponMastery;
      }
      if (other.ImprovedHamstring != 0) {
        ImprovedHamstring = other.ImprovedHamstring;
      }
      if (other.Trauma != 0) {
        Trauma = other.Trauma;
      }
      if (other.SecondWind != 0) {
        SecondWind = other.SecondWind;
      }
      if (other.MortalStrike != false) {
        MortalStrike = other.MortalStrike;
      }
      if (other.StrengthOfArms != 0) {
        StrengthOfArms = other.StrengthOfArms;
      }
      if (other.ImprovedSlam != 0) {
        ImprovedSlam = other.ImprovedSlam;
      }
      if (other.Juggernaut != false) {
        Juggernaut = other.Juggernaut;
      }
      if (other.ImprovedMortalStrike != 0) {
        ImprovedMortalStrike = other.ImprovedMortalStrike;
      }
      if (other.UnrelentingAssault != 0) {
        UnrelentingAssault = other.UnrelentingAssault;
      }
      if (other.SuddenDeath != 0) {
        SuddenDeath = other.SuddenDeath;
      }
      if (other.EndlessRage != false) {
        EndlessRage = other.EndlessRage;
      }
      if (other.BloodFrenzy != 0) {
        BloodFrenzy = other.BloodFrenzy;
      }
      if (other.WreckingCrew != 0) {
        WreckingCrew = other.WreckingCrew;
      }
      if (other.Bladestorm != false) {
        Bladestorm = other.Bladestorm;
      }
      if (other.ArmoredToTheTeeth != 0) {
        ArmoredToTheTeeth = other.ArmoredToTheTeeth;
      }
      if (other.BoomingVoice != 0) {
        BoomingVoice = other.BoomingVoice;
      }
      if (other.Cruelty != 0) {
        Cruelty = other.Cruelty;
      }
      if (other.ImprovedDemoralizingShout != 0) {
        ImprovedDemoralizingShout = other.ImprovedDemoralizingShout;
      }
      if (other.UnbridledWrath != 0) {
        UnbridledWrath = other.UnbridledWrath;
      }
      if (other.ImprovedCleave != 0) {
        ImprovedCleave = other.ImprovedCleave;
      }
      if (other.PiercingHowl != false) {
        PiercingHowl = other.PiercingHowl;
      }
      if (other.BloodCraze != 0) {
        BloodCraze = other.BloodCraze;
      }
      if (other.CommandingPresence != 0) {
        CommandingPresence = other.CommandingPresence;
      }
      if (other.DualWieldSpecialization != 0) {
        DualWieldSpecialization = other.DualWieldSpecialization;
      }
      if (other.ImprovedExecute != 0) {
        ImprovedExecute = other.ImprovedExecute;
      }
      if (other.Enrage != 0) {
        Enrage = other.Enrage;
      }
      if (other.Precision != 0) {
        Precision = other.Precision;
      }
      if (other.DeathWish != false) {
        DeathWish = other.DeathWish;
      }
      if (other.ImprovedIntercept != 0) {
        ImprovedIntercept = other.ImprovedIntercept;
      }
      if (other.ImprovedBerserkerRage != 0) {
        ImprovedBerserkerRage = other.ImprovedBerserkerRage;
      }
      if (other.Flurry != 0) {
        Flurry = other.Flurry;
      }
      if (other.IntensifyRage != 0) {
        IntensifyRage = other.IntensifyRage;
      }
      if (other.Bloodthirst != false) {
        Bloodthirst = other.Bloodthirst;
      }
      if (other.ImprovedWhirlwind != 0) {
        ImprovedWhirlwind = other.ImprovedWhirlwind;
      }
      if (other.FuriousAttacks != 0) {
        FuriousAttacks = other.FuriousAttacks;
      }
      if (other.ImprovedBerserkerStance != 0) {
        ImprovedBerserkerStance = other.ImprovedBerserkerStance;
      }
      if (other.HeroicFury != false) {
        HeroicFury = other.HeroicFury;
      }
      if (other.Rampage != false) {
        Rampage = other.Rampage;
      }
      if (other.Bloodsurge != 0) {
        Bloodsurge = other.Bloodsurge;
      }
      if (other.UnendingFury != 0) {
        UnendingFury = other.UnendingFury;
      }
      if (other.TitansGrip != false) {
        TitansGrip = other.TitansGrip;
      }
      if (other.ImprovedBloodrage != 0) {
        ImprovedBloodrage = other.ImprovedBloodrage;
      }
      if (other.ShieldSpecialization != 0) {
        ShieldSpecialization = other.ShieldSpecialization;
      }
      if (other.ImprovedThunderClap != 0) {
        ImprovedThunderClap = other.ImprovedThunderClap;
      }
      if (other.Incite != 0) {
        Incite = other.Incite;
      }
      if (other.Anticipation != 0) {
        Anticipation = other.Anticipation;
      }
      if (other.LastStand != false) {
        LastStand = other.LastStand;
      }
      if (other.ImprovedRevenge != 0) {
        ImprovedRevenge = other.ImprovedRevenge;
      }
      if (other.ShieldMastery != 0) {
        ShieldMastery = other.ShieldMastery;
      }
      if (other.Toughness != 0) {
        Toughness = other.Toughness;
      }
      if (other.ImprovedSpellReflection != 0) {
        ImprovedSpellReflection = other.ImprovedSpellReflection;
      }
      if (other.ImprovedDisarm != 0) {
        ImprovedDisarm = other.ImprovedDisarm;
      }
      if (other.Puncture != 0) {
        Puncture = other.Puncture;
      }
      if (other.ImprovedDisciplines != 0) {
        ImprovedDisciplines = other.ImprovedDisciplines;
      }
      if (other.ConcussionBlow != false) {
        ConcussionBlow = other.ConcussionBlow;
      }
      if (other.GagOrder != 0) {
        GagOrder = other.GagOrder;
      }
      if (other.OneHandedWeaponSpecialization != 0) {
        OneHandedWeaponSpecialization = other.OneHandedWeaponSpecialization;
      }
      if (other.ImprovedDefensiveStance != 0) {
        ImprovedDefensiveStance = other.ImprovedDefensiveStance;
      }
      if (other.Vigilance != false) {
        Vigilance = other.Vigilance;
      }
      if (other.FocusedRage != 0) {
        FocusedRage = other.FocusedRage;
      }
      if (other.Vitality != 0) {
        Vitality = other.Vitality;
      }
      if (other.Safeguard != 0) {
        Safeguard = other.Safeguard;
      }
      if (other.Warbringer != false) {
        Warbringer = other.Warbringer;
      }
      if (other.Devastate != false) {
        Devastate = other.Devastate;
      }
      if (other.CriticalBlock != 0) {
        CriticalBlock = other.CriticalBlock;
      }
      if (other.SwordAndBoard != 0) {
        SwordAndBoard = other.SwordAndBoard;
      }
      if (other.DamageShield != 0) {
        DamageShield = other.DamageShield;
      }
      if (other.Shockwave != false) {
        Shockwave = other.Shockwave;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ImprovedHeroicStrike = input.ReadInt32();
            break;
          }
          case 16: {
            Deflection = input.ReadInt32();
            break;
          }
          case 24: {
            ImprovedRend = input.ReadInt32();
            break;
          }
          case 32: {
            ImprovedCharge = input.ReadInt32();
            break;
          }
          case 40: {
            IronWill = input.ReadInt32();
            break;
          }
          case 48: {
            TacticalMastery = input.ReadInt32();
            break;
          }
          case 56: {
            ImprovedOverpower = input.ReadInt32();
            break;
          }
          case 64: {
            AngerManagement = input.ReadBool();
            break;
          }
          case 72: {
            Impale = input.ReadInt32();
            break;
          }
          case 80: {
            DeepWounds = input.ReadInt32();
            break;
          }
          case 88: {
            TwoHandedWeaponSpecialization = input.ReadInt32();
            break;
          }
          case 96: {
            TasteForBlood = input.ReadInt32();
            break;
          }
          case 104: {
            PoleaxeSpecialization = input.ReadInt32();
            break;
          }
          case 112: {
            SweepingStrikes = input.ReadBool();
            break;
          }
          case 120: {
            MaceSpecialization = input.ReadInt32();
            break;
          }
          case 128: {
            SwordSpecialization = input.ReadInt32();
            break;
          }
          case 136: {
            WeaponMastery = input.ReadInt32();
            break;
          }
          case 144: {
            ImprovedHamstring = input.ReadInt32();
            break;
          }
          case 152: {
            Trauma = input.ReadInt32();
            break;
          }
          case 160: {
            SecondWind = input.ReadInt32();
            break;
          }
          case 168: {
            MortalStrike = input.ReadBool();
            break;
          }
          case 176: {
            StrengthOfArms = input.ReadInt32();
            break;
          }
          case 184: {
            ImprovedSlam = input.ReadInt32();
            break;
          }
          case 192: {
            Juggernaut = input.ReadBool();
            break;
          }
          case 200: {
            ImprovedMortalStrike = input.ReadInt32();
            break;
          }
          case 208: {
            UnrelentingAssault = input.ReadInt32();
            break;
          }
          case 216: {
            SuddenDeath = input.ReadInt32();
            break;
          }
          case 224: {
            EndlessRage = input.ReadBool();
            break;
          }
          case 232: {
            BloodFrenzy = input.ReadInt32();
            break;
          }
          case 240: {
            WreckingCrew = input.ReadInt32();
            break;
          }
          case 248: {
            Bladestorm = input.ReadBool();
            break;
          }
          case 256: {
            ArmoredToTheTeeth = input.ReadInt32();
            break;
          }
          case 264: {
            BoomingVoice = input.ReadInt32();
            break;
          }
          case 272: {
            Cruelty = input.ReadInt32();
            break;
          }
          case 280: {
            ImprovedDemoralizingShout = input.ReadInt32();
            break;
          }
          case 288: {
            UnbridledWrath = input.ReadInt32();
            break;
          }
          case 296: {
            ImprovedCleave = input.ReadInt32();
            break;
          }
          case 304: {
            PiercingHowl = input.ReadBool();
            break;
          }
          case 312: {
            BloodCraze = input.ReadInt32();
            break;
          }
          case 320: {
            CommandingPresence = input.ReadInt32();
            break;
          }
          case 328: {
            DualWieldSpecialization = input.ReadInt32();
            break;
          }
          case 336: {
            ImprovedExecute = input.ReadInt32();
            break;
          }
          case 344: {
            Enrage = input.ReadInt32();
            break;
          }
          case 352: {
            Precision = input.ReadInt32();
            break;
          }
          case 360: {
            DeathWish = input.ReadBool();
            break;
          }
          case 368: {
            ImprovedIntercept = input.ReadInt32();
            break;
          }
          case 376: {
            ImprovedBerserkerRage = input.ReadInt32();
            break;
          }
          case 384: {
            Flurry = input.ReadInt32();
            break;
          }
          case 392: {
            IntensifyRage = input.ReadInt32();
            break;
          }
          case 400: {
            Bloodthirst = input.ReadBool();
            break;
          }
          case 408: {
            ImprovedWhirlwind = input.ReadInt32();
            break;
          }
          case 416: {
            FuriousAttacks = input.ReadInt32();
            break;
          }
          case 424: {
            ImprovedBerserkerStance = input.ReadInt32();
            break;
          }
          case 432: {
            HeroicFury = input.ReadBool();
            break;
          }
          case 440: {
            Rampage = input.ReadBool();
            break;
          }
          case 448: {
            Bloodsurge = input.ReadInt32();
            break;
          }
          case 456: {
            UnendingFury = input.ReadInt32();
            break;
          }
          case 464: {
            TitansGrip = input.ReadBool();
            break;
          }
          case 472: {
            ImprovedBloodrage = input.ReadInt32();
            break;
          }
          case 480: {
            ShieldSpecialization = input.ReadInt32();
            break;
          }
          case 488: {
            ImprovedThunderClap = input.ReadInt32();
            break;
          }
          case 496: {
            Incite = input.ReadInt32();
            break;
          }
          case 504: {
            Anticipation = input.ReadInt32();
            break;
          }
          case 512: {
            LastStand = input.ReadBool();
            break;
          }
          case 520: {
            ImprovedRevenge = input.ReadInt32();
            break;
          }
          case 528: {
            ShieldMastery = input.ReadInt32();
            break;
          }
          case 536: {
            Toughness = input.ReadInt32();
            break;
          }
          case 544: {
            ImprovedSpellReflection = input.ReadInt32();
            break;
          }
          case 552: {
            ImprovedDisarm = input.ReadInt32();
            break;
          }
          case 560: {
            Puncture = input.ReadInt32();
            break;
          }
          case 568: {
            ImprovedDisciplines = input.ReadInt32();
            break;
          }
          case 576: {
            ConcussionBlow = input.ReadBool();
            break;
          }
          case 584: {
            GagOrder = input.ReadInt32();
            break;
          }
          case 592: {
            OneHandedWeaponSpecialization = input.ReadInt32();
            break;
          }
          case 600: {
            ImprovedDefensiveStance = input.ReadInt32();
            break;
          }
          case 608: {
            Vigilance = input.ReadBool();
            break;
          }
          case 616: {
            FocusedRage = input.ReadInt32();
            break;
          }
          case 624: {
            Vitality = input.ReadInt32();
            break;
          }
          case 632: {
            Safeguard = input.ReadInt32();
            break;
          }
          case 640: {
            Warbringer = input.ReadBool();
            break;
          }
          case 648: {
            Devastate = input.ReadBool();
            break;
          }
          case 656: {
            CriticalBlock = input.ReadInt32();
            break;
          }
          case 664: {
            SwordAndBoard = input.ReadInt32();
            break;
          }
          case 672: {
            DamageShield = input.ReadInt32();
            break;
          }
          case 680: {
            Shockwave = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ImprovedHeroicStrike = input.ReadInt32();
            break;
          }
          case 16: {
            Deflection = input.ReadInt32();
            break;
          }
          case 24: {
            ImprovedRend = input.ReadInt32();
            break;
          }
          case 32: {
            ImprovedCharge = input.ReadInt32();
            break;
          }
          case 40: {
            IronWill = input.ReadInt32();
            break;
          }
          case 48: {
            TacticalMastery = input.ReadInt32();
            break;
          }
          case 56: {
            ImprovedOverpower = input.ReadInt32();
            break;
          }
          case 64: {
            AngerManagement = input.ReadBool();
            break;
          }
          case 72: {
            Impale = input.ReadInt32();
            break;
          }
          case 80: {
            DeepWounds = input.ReadInt32();
            break;
          }
          case 88: {
            TwoHandedWeaponSpecialization = input.ReadInt32();
            break;
          }
          case 96: {
            TasteForBlood = input.ReadInt32();
            break;
          }
          case 104: {
            PoleaxeSpecialization = input.ReadInt32();
            break;
          }
          case 112: {
            SweepingStrikes = input.ReadBool();
            break;
          }
          case 120: {
            MaceSpecialization = input.ReadInt32();
            break;
          }
          case 128: {
            SwordSpecialization = input.ReadInt32();
            break;
          }
          case 136: {
            WeaponMastery = input.ReadInt32();
            break;
          }
          case 144: {
            ImprovedHamstring = input.ReadInt32();
            break;
          }
          case 152: {
            Trauma = input.ReadInt32();
            break;
          }
          case 160: {
            SecondWind = input.ReadInt32();
            break;
          }
          case 168: {
            MortalStrike = input.ReadBool();
            break;
          }
          case 176: {
            StrengthOfArms = input.ReadInt32();
            break;
          }
          case 184: {
            ImprovedSlam = input.ReadInt32();
            break;
          }
          case 192: {
            Juggernaut = input.ReadBool();
            break;
          }
          case 200: {
            ImprovedMortalStrike = input.ReadInt32();
            break;
          }
          case 208: {
            UnrelentingAssault = input.ReadInt32();
            break;
          }
          case 216: {
            SuddenDeath = input.ReadInt32();
            break;
          }
          case 224: {
            EndlessRage = input.ReadBool();
            break;
          }
          case 232: {
            BloodFrenzy = input.ReadInt32();
            break;
          }
          case 240: {
            WreckingCrew = input.ReadInt32();
            break;
          }
          case 248: {
            Bladestorm = input.ReadBool();
            break;
          }
          case 256: {
            ArmoredToTheTeeth = input.ReadInt32();
            break;
          }
          case 264: {
            BoomingVoice = input.ReadInt32();
            break;
          }
          case 272: {
            Cruelty = input.ReadInt32();
            break;
          }
          case 280: {
            ImprovedDemoralizingShout = input.ReadInt32();
            break;
          }
          case 288: {
            UnbridledWrath = input.ReadInt32();
            break;
          }
          case 296: {
            ImprovedCleave = input.ReadInt32();
            break;
          }
          case 304: {
            PiercingHowl = input.ReadBool();
            break;
          }
          case 312: {
            BloodCraze = input.ReadInt32();
            break;
          }
          case 320: {
            CommandingPresence = input.ReadInt32();
            break;
          }
          case 328: {
            DualWieldSpecialization = input.ReadInt32();
            break;
          }
          case 336: {
            ImprovedExecute = input.ReadInt32();
            break;
          }
          case 344: {
            Enrage = input.ReadInt32();
            break;
          }
          case 352: {
            Precision = input.ReadInt32();
            break;
          }
          case 360: {
            DeathWish = input.ReadBool();
            break;
          }
          case 368: {
            ImprovedIntercept = input.ReadInt32();
            break;
          }
          case 376: {
            ImprovedBerserkerRage = input.ReadInt32();
            break;
          }
          case 384: {
            Flurry = input.ReadInt32();
            break;
          }
          case 392: {
            IntensifyRage = input.ReadInt32();
            break;
          }
          case 400: {
            Bloodthirst = input.ReadBool();
            break;
          }
          case 408: {
            ImprovedWhirlwind = input.ReadInt32();
            break;
          }
          case 416: {
            FuriousAttacks = input.ReadInt32();
            break;
          }
          case 424: {
            ImprovedBerserkerStance = input.ReadInt32();
            break;
          }
          case 432: {
            HeroicFury = input.ReadBool();
            break;
          }
          case 440: {
            Rampage = input.ReadBool();
            break;
          }
          case 448: {
            Bloodsurge = input.ReadInt32();
            break;
          }
          case 456: {
            UnendingFury = input.ReadInt32();
            break;
          }
          case 464: {
            TitansGrip = input.ReadBool();
            break;
          }
          case 472: {
            ImprovedBloodrage = input.ReadInt32();
            break;
          }
          case 480: {
            ShieldSpecialization = input.ReadInt32();
            break;
          }
          case 488: {
            ImprovedThunderClap = input.ReadInt32();
            break;
          }
          case 496: {
            Incite = input.ReadInt32();
            break;
          }
          case 504: {
            Anticipation = input.ReadInt32();
            break;
          }
          case 512: {
            LastStand = input.ReadBool();
            break;
          }
          case 520: {
            ImprovedRevenge = input.ReadInt32();
            break;
          }
          case 528: {
            ShieldMastery = input.ReadInt32();
            break;
          }
          case 536: {
            Toughness = input.ReadInt32();
            break;
          }
          case 544: {
            ImprovedSpellReflection = input.ReadInt32();
            break;
          }
          case 552: {
            ImprovedDisarm = input.ReadInt32();
            break;
          }
          case 560: {
            Puncture = input.ReadInt32();
            break;
          }
          case 568: {
            ImprovedDisciplines = input.ReadInt32();
            break;
          }
          case 576: {
            ConcussionBlow = input.ReadBool();
            break;
          }
          case 584: {
            GagOrder = input.ReadInt32();
            break;
          }
          case 592: {
            OneHandedWeaponSpecialization = input.ReadInt32();
            break;
          }
          case 600: {
            ImprovedDefensiveStance = input.ReadInt32();
            break;
          }
          case 608: {
            Vigilance = input.ReadBool();
            break;
          }
          case 616: {
            FocusedRage = input.ReadInt32();
            break;
          }
          case 624: {
            Vitality = input.ReadInt32();
            break;
          }
          case 632: {
            Safeguard = input.ReadInt32();
            break;
          }
          case 640: {
            Warbringer = input.ReadBool();
            break;
          }
          case 648: {
            Devastate = input.ReadBool();
            break;
          }
          case 656: {
            CriticalBlock = input.ReadInt32();
            break;
          }
          case 664: {
            SwordAndBoard = input.ReadInt32();
            break;
          }
          case 672: {
            DamageShield = input.ReadInt32();
            break;
          }
          case 680: {
            Shockwave = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Warrior : pb::IMessage<Warrior>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Warrior> _parser = new pb::MessageParser<Warrior>(() => new Warrior());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Warrior> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.WarriorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Warrior() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Warrior(Warrior other) : this() {
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Warrior Clone() {
      return new Warrior(this);
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::SirusDbScrapper.UIDatabase.Warrior.Types.Options options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SirusDbScrapper.UIDatabase.Warrior.Types.Options Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Warrior);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Warrior other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Warrior other) {
      if (other == null) {
        return;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::SirusDbScrapper.UIDatabase.Warrior.Types.Options();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.Warrior.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.Warrior.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Warrior message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Rotation : pb::IMessage<Rotation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Rotation> _parser = new pb::MessageParser<Rotation>(() => new Rotation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Rotation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.Warrior.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation(Rotation other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation Clone() {
          return new Rotation(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Rotation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Rotation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Rotation other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

      public sealed partial class Options : pb::IMessage<Options>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Options> _parser = new pb::MessageParser<Options>(() => new Options());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Options> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.Warrior.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options(Options other) : this() {
          startingRage_ = other.startingRage_;
          useRecklessness_ = other.useRecklessness_;
          useShatteringThrow_ = other.useShatteringThrow_;
          shout_ = other.shout_;
          stanceSnapshot_ = other.stanceSnapshot_;
          disableExpertiseGemming_ = other.disableExpertiseGemming_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options Clone() {
          return new Options(this);
        }

        /// <summary>Field number for the "starting_rage" field.</summary>
        public const int StartingRageFieldNumber = 1;
        private double startingRage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double StartingRage {
          get { return startingRage_; }
          set {
            startingRage_ = value;
          }
        }

        /// <summary>Field number for the "use_recklessness" field.</summary>
        public const int UseRecklessnessFieldNumber = 2;
        private bool useRecklessness_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool UseRecklessness {
          get { return useRecklessness_; }
          set {
            useRecklessness_ = value;
          }
        }

        /// <summary>Field number for the "use_shattering_throw" field.</summary>
        public const int UseShatteringThrowFieldNumber = 4;
        private bool useShatteringThrow_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool UseShatteringThrow {
          get { return useShatteringThrow_; }
          set {
            useShatteringThrow_ = value;
          }
        }

        /// <summary>Field number for the "shout" field.</summary>
        public const int ShoutFieldNumber = 3;
        private global::SirusDbScrapper.UIDatabase.WarriorShout shout_ = global::SirusDbScrapper.UIDatabase.WarriorShout.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.WarriorShout Shout {
          get { return shout_; }
          set {
            shout_ = value;
          }
        }

        /// <summary>Field number for the "stance_snapshot" field.</summary>
        public const int StanceSnapshotFieldNumber = 6;
        private bool stanceSnapshot_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool StanceSnapshot {
          get { return stanceSnapshot_; }
          set {
            stanceSnapshot_ = value;
          }
        }

        /// <summary>Field number for the "disable_expertise_gemming" field.</summary>
        public const int DisableExpertiseGemmingFieldNumber = 7;
        private bool disableExpertiseGemming_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool DisableExpertiseGemming {
          get { return disableExpertiseGemming_; }
          set {
            disableExpertiseGemming_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Options);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Options other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StartingRage, other.StartingRage)) return false;
          if (UseRecklessness != other.UseRecklessness) return false;
          if (UseShatteringThrow != other.UseShatteringThrow) return false;
          if (Shout != other.Shout) return false;
          if (StanceSnapshot != other.StanceSnapshot) return false;
          if (DisableExpertiseGemming != other.DisableExpertiseGemming) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (StartingRage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StartingRage);
          if (UseRecklessness != false) hash ^= UseRecklessness.GetHashCode();
          if (UseShatteringThrow != false) hash ^= UseShatteringThrow.GetHashCode();
          if (Shout != global::SirusDbScrapper.UIDatabase.WarriorShout.None) hash ^= Shout.GetHashCode();
          if (StanceSnapshot != false) hash ^= StanceSnapshot.GetHashCode();
          if (DisableExpertiseGemming != false) hash ^= DisableExpertiseGemming.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (StartingRage != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(StartingRage);
          }
          if (UseRecklessness != false) {
            output.WriteRawTag(16);
            output.WriteBool(UseRecklessness);
          }
          if (Shout != global::SirusDbScrapper.UIDatabase.WarriorShout.None) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Shout);
          }
          if (UseShatteringThrow != false) {
            output.WriteRawTag(32);
            output.WriteBool(UseShatteringThrow);
          }
          if (StanceSnapshot != false) {
            output.WriteRawTag(48);
            output.WriteBool(StanceSnapshot);
          }
          if (DisableExpertiseGemming != false) {
            output.WriteRawTag(56);
            output.WriteBool(DisableExpertiseGemming);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (StartingRage != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(StartingRage);
          }
          if (UseRecklessness != false) {
            output.WriteRawTag(16);
            output.WriteBool(UseRecklessness);
          }
          if (Shout != global::SirusDbScrapper.UIDatabase.WarriorShout.None) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Shout);
          }
          if (UseShatteringThrow != false) {
            output.WriteRawTag(32);
            output.WriteBool(UseShatteringThrow);
          }
          if (StanceSnapshot != false) {
            output.WriteRawTag(48);
            output.WriteBool(StanceSnapshot);
          }
          if (DisableExpertiseGemming != false) {
            output.WriteRawTag(56);
            output.WriteBool(DisableExpertiseGemming);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (StartingRage != 0D) {
            size += 1 + 8;
          }
          if (UseRecklessness != false) {
            size += 1 + 1;
          }
          if (UseShatteringThrow != false) {
            size += 1 + 1;
          }
          if (Shout != global::SirusDbScrapper.UIDatabase.WarriorShout.None) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Shout);
          }
          if (StanceSnapshot != false) {
            size += 1 + 1;
          }
          if (DisableExpertiseGemming != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Options other) {
          if (other == null) {
            return;
          }
          if (other.StartingRage != 0D) {
            StartingRage = other.StartingRage;
          }
          if (other.UseRecklessness != false) {
            UseRecklessness = other.UseRecklessness;
          }
          if (other.UseShatteringThrow != false) {
            UseShatteringThrow = other.UseShatteringThrow;
          }
          if (other.Shout != global::SirusDbScrapper.UIDatabase.WarriorShout.None) {
            Shout = other.Shout;
          }
          if (other.StanceSnapshot != false) {
            StanceSnapshot = other.StanceSnapshot;
          }
          if (other.DisableExpertiseGemming != false) {
            DisableExpertiseGemming = other.DisableExpertiseGemming;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                StartingRage = input.ReadDouble();
                break;
              }
              case 16: {
                UseRecklessness = input.ReadBool();
                break;
              }
              case 24: {
                Shout = (global::SirusDbScrapper.UIDatabase.WarriorShout) input.ReadEnum();
                break;
              }
              case 32: {
                UseShatteringThrow = input.ReadBool();
                break;
              }
              case 48: {
                StanceSnapshot = input.ReadBool();
                break;
              }
              case 56: {
                DisableExpertiseGemming = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                StartingRage = input.ReadDouble();
                break;
              }
              case 16: {
                UseRecklessness = input.ReadBool();
                break;
              }
              case 24: {
                Shout = (global::SirusDbScrapper.UIDatabase.WarriorShout) input.ReadEnum();
                break;
              }
              case 32: {
                UseShatteringThrow = input.ReadBool();
                break;
              }
              case 48: {
                StanceSnapshot = input.ReadBool();
                break;
              }
              case 56: {
                DisableExpertiseGemming = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class ProtectionWarrior : pb::IMessage<ProtectionWarrior>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProtectionWarrior> _parser = new pb::MessageParser<ProtectionWarrior>(() => new ProtectionWarrior());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProtectionWarrior> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.WarriorReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtectionWarrior() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtectionWarrior(ProtectionWarrior other) : this() {
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtectionWarrior Clone() {
      return new ProtectionWarrior(this);
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::SirusDbScrapper.UIDatabase.ProtectionWarrior.Types.Options options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SirusDbScrapper.UIDatabase.ProtectionWarrior.Types.Options Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProtectionWarrior);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProtectionWarrior other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProtectionWarrior other) {
      if (other == null) {
        return;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::SirusDbScrapper.UIDatabase.ProtectionWarrior.Types.Options();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.ProtectionWarrior.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.ProtectionWarrior.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ProtectionWarrior message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Rotation : pb::IMessage<Rotation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Rotation> _parser = new pb::MessageParser<Rotation>(() => new Rotation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Rotation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.ProtectionWarrior.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation(Rotation other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation Clone() {
          return new Rotation(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Rotation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Rotation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Rotation other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

      public sealed partial class Options : pb::IMessage<Options>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Options> _parser = new pb::MessageParser<Options>(() => new Options());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Options> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.ProtectionWarrior.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options(Options other) : this() {
          startingRage_ = other.startingRage_;
          shout_ = other.shout_;
          useShatteringThrow_ = other.useShatteringThrow_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options Clone() {
          return new Options(this);
        }

        /// <summary>Field number for the "starting_rage" field.</summary>
        public const int StartingRageFieldNumber = 1;
        private double startingRage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double StartingRage {
          get { return startingRage_; }
          set {
            startingRage_ = value;
          }
        }

        /// <summary>Field number for the "shout" field.</summary>
        public const int ShoutFieldNumber = 4;
        private global::SirusDbScrapper.UIDatabase.WarriorShout shout_ = global::SirusDbScrapper.UIDatabase.WarriorShout.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.WarriorShout Shout {
          get { return shout_; }
          set {
            shout_ = value;
          }
        }

        /// <summary>Field number for the "use_shattering_throw" field.</summary>
        public const int UseShatteringThrowFieldNumber = 8;
        private bool useShatteringThrow_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool UseShatteringThrow {
          get { return useShatteringThrow_; }
          set {
            useShatteringThrow_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Options);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Options other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StartingRage, other.StartingRage)) return false;
          if (Shout != other.Shout) return false;
          if (UseShatteringThrow != other.UseShatteringThrow) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (StartingRage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StartingRage);
          if (Shout != global::SirusDbScrapper.UIDatabase.WarriorShout.None) hash ^= Shout.GetHashCode();
          if (UseShatteringThrow != false) hash ^= UseShatteringThrow.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (StartingRage != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(StartingRage);
          }
          if (Shout != global::SirusDbScrapper.UIDatabase.WarriorShout.None) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Shout);
          }
          if (UseShatteringThrow != false) {
            output.WriteRawTag(64);
            output.WriteBool(UseShatteringThrow);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (StartingRage != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(StartingRage);
          }
          if (Shout != global::SirusDbScrapper.UIDatabase.WarriorShout.None) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Shout);
          }
          if (UseShatteringThrow != false) {
            output.WriteRawTag(64);
            output.WriteBool(UseShatteringThrow);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (StartingRage != 0D) {
            size += 1 + 8;
          }
          if (Shout != global::SirusDbScrapper.UIDatabase.WarriorShout.None) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Shout);
          }
          if (UseShatteringThrow != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Options other) {
          if (other == null) {
            return;
          }
          if (other.StartingRage != 0D) {
            StartingRage = other.StartingRage;
          }
          if (other.Shout != global::SirusDbScrapper.UIDatabase.WarriorShout.None) {
            Shout = other.Shout;
          }
          if (other.UseShatteringThrow != false) {
            UseShatteringThrow = other.UseShatteringThrow;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                StartingRage = input.ReadDouble();
                break;
              }
              case 32: {
                Shout = (global::SirusDbScrapper.UIDatabase.WarriorShout) input.ReadEnum();
                break;
              }
              case 64: {
                UseShatteringThrow = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                StartingRage = input.ReadDouble();
                break;
              }
              case 32: {
                Shout = (global::SirusDbScrapper.UIDatabase.WarriorShout) input.ReadEnum();
                break;
              }
              case 64: {
                UseShatteringThrow = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
