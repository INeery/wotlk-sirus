// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: paladin.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SirusDbScrapper.UIDatabase {

  /// <summary>Holder for reflection information generated from paladin.proto</summary>
  public static partial class PaladinReflection {

    #region Descriptor
    /// <summary>File descriptor for paladin.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PaladinReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1wYWxhZGluLnByb3RvEgVwcm90byKAEAoOUGFsYWRpblRhbGVudHMSFwoP",
            "c3Bpcml0dWFsX2ZvY3VzGAEgASgFEhkKEXNlYWxzX29mX3RoZV9wdXJlGAIg",
            "ASgFEhUKDWhlYWxpbmdfbGlnaHQYAyABKAUSGAoQZGl2aW5lX2ludGVsbGVj",
            "dBgEIAEoBRIYChB1bnlpZWxkaW5nX2ZhaXRoGAUgASgFEhQKDGF1cmFfbWFz",
            "dGVyeRgGIAEoCBIUCgxpbGx1bWluYXRpb24YByABKAUSHQoVaW1wcm92ZWRf",
            "bGF5X29uX2hhbmRzGAggASgFEiMKG2ltcHJvdmVkX2NvbmNlbnRyYXRpb25f",
            "YXVyYRgJIAEoBRIjChtpbXByb3ZlZF9ibGVzc2luZ19vZl93aXNkb20YCiAB",
            "KAUSFQoNYmxlc3NlZF9oYW5kcxgLIAEoBRIVCg1wdXJlX29mX2hlYXJ0GAwg",
            "ASgFEhQKDGRpdmluZV9mYXZvchgNIAEoCBIYChBzYW5jdGlmaWVkX2xpZ2h0",
            "GA4gASgFEhcKD3B1cmlmeWluZ19wb3dlchgPIAEoBRISCgpob2x5X3Bvd2Vy",
            "GBAgASgFEhQKDGxpZ2h0c19ncmFjZRgRIAEoBRISCgpob2x5X3Nob2NrGBIg",
            "ASgIEhQKDGJsZXNzZWRfbGlmZRgTIAEoBRIYChBzYWNyZWRfY2xlYW5zaW5n",
            "GBQgASgFEhUKDWhvbHlfZ3VpZGFuY2UYFSABKAUSGwoTZGl2aW5lX2lsbHVt",
            "aW5hdGlvbhgWIAEoCBIeChZqdWRnZW1lbnRzX29mX3RoZV9wdXJlGBcgASgF",
            "EhkKEWluZnVzaW9uX29mX2xpZ2h0GBggASgFEh4KFmVubGlnaHRlbmVkX2p1",
            "ZGdlbWVudHMYGSABKAUSFwoPYmVhY29uX29mX2xpZ2h0GBogASgIEhAKCGRp",
            "dmluaXR5GBsgASgFEhcKD2RpdmluZV9zdHJlbmd0aBgcIAEoBRIQCghzdG9p",
            "Y2lzbRgdIAEoBRIXCg9ndWFyZGlhbnNfZmF2b3IYHiABKAUSFAoMYW50aWNp",
            "cGF0aW9uGB8gASgFEhgKEGRpdmluZV9zYWNyaWZpY2UYICABKAgSHwoXaW1w",
            "cm92ZWRfcmlnaHRlb3VzX2Z1cnkYISABKAUSEQoJdG91Z2huZXNzGCIgASgF",
            "EhcKD2RpdmluZV9ndWFyZGlhbhgjIAEoBRIiChppbXByb3ZlZF9oYW1tZXJf",
            "b2ZfanVzdGljZRgkIAEoBRIeChZpbXByb3ZlZF9kZXZvdGlvbl9hdXJhGCUg",
            "ASgFEh0KFWJsZXNzaW5nX29mX3NhbmN0dWFyeRgmIAEoCBIRCglyZWNrb25p",
            "bmcYJyABKAUSEwoLc2FjcmVkX2R1dHkYKCABKAUSKAogb25lX2hhbmRlZF93",
            "ZWFwb25fc3BlY2lhbGl6YXRpb24YKSABKAUSHAoUc3Bpcml0dWFsX2F0dHVu",
            "ZW1lbnQYKiABKAUSEwoLaG9seV9zaGllbGQYKyABKAgSFwoPYXJkZW50X2Rl",
            "ZmVuZGVyGCwgASgFEg8KB3JlZG91YnQYLSABKAUSGAoQY29tYmF0X2V4cGVy",
            "dGlzZRguIAEoBRIcChR0b3VjaGVkX2J5X3RoZV9saWdodBgvIAEoBRIXCg9h",
            "dmVuZ2Vyc19zaGllbGQYMCABKAgSHAoUZ3VhcmRlZF9ieV90aGVfbGlnaHQY",
            "MSABKAUSHQoVc2hpZWxkX29mX3RoZV90ZW1wbGFyGDIgASgFEh4KFmp1ZGdl",
            "bWVudHNfb2ZfdGhlX2p1c3QYMyABKAUSHwoXaGFtbWVyX29mX3RoZV9yaWdo",
            "dGVvdXMYNCABKAgSEgoKZGVmbGVjdGlvbhg1IAEoBRITCgtiZW5lZGljdGlv",
            "bhg2IAEoBRIbChNpbXByb3ZlZF9qdWRnZW1lbnRzGDcgASgFEh0KFWhlYXJ0",
            "X29mX3RoZV9jcnVzYWRlchg4IAEoBRIiChppbXByb3ZlZF9ibGVzc2luZ19v",
            "Zl9taWdodBg5IAEoBRITCgt2aW5kaWNhdGlvbhg6IAEoBRISCgpjb252aWN0",
            "aW9uGDsgASgFEhcKD3NlYWxfb2ZfY29tbWFuZBg8IAEoCBIaChJwdXJzdWl0",
            "X29mX2p1c3RpY2UYPSABKAUSFgoOZXllX2Zvcl9hbl9leWUYPiABKAUSGgoS",
            "c2FuY3RpdHlfb2ZfYmF0dGxlGD8gASgFEg8KB2NydXNhZGUYQCABKAUSKAog",
            "dHdvX2hhbmRlZF93ZWFwb25fc3BlY2lhbGl6YXRpb24YQSABKAUSHgoWc2Fu",
            "Y3RpZmllZF9yZXRyaWJ1dGlvbhhCIAEoCBIRCgl2ZW5nZWFuY2UYQyABKAUS",
            "FgoOZGl2aW5lX3B1cnBvc2UYRCABKAUSFgoOdGhlX2FydF9vZl93YXIYRSAB",
            "KAUSEgoKcmVwZW50YW5jZRhGIAEoCBIeChZqdWRnZW1lbnRzX29mX3RoZV93",
            "aXNlGEcgASgFEhIKCmZhbmF0aWNpc20YSCABKAUSGAoQc2FuY3RpZmllZF93",
            "cmF0aBhJIAEoBRIZChFzd2lmdF9yZXRyaWJ1dGlvbhhKIAEoBRIXCg9jcnVz",
            "YWRlcl9zdHJpa2UYSyABKAgSFwoPc2hlYXRoX29mX2xpZ2h0GEwgASgFEhsK",
            "E3JpZ2h0ZW91c192ZW5nZWFuY2UYTSABKAUSFAoMZGl2aW5lX3N0b3JtGE4g",
            "ASgIIuwBChJSZXRyaWJ1dGlvblBhbGFkaW4SMgoHb3B0aW9ucxgDIAEoCzIh",
            "LnByb3RvLlJldHJpYnV0aW9uUGFsYWRpbi5PcHRpb25zGgoKCFJvdGF0aW9u",
            "GpUBCgdPcHRpb25zEioKCWp1ZGdlbWVudBgBIAEoDjIXLnByb3RvLlBhbGFk",
            "aW5KdWRnZW1lbnQSIAoEc2VhbBgCIAEoDjISLnByb3RvLlBhbGFkaW5TZWFs",
            "EiAKBGF1cmEYAyABKA4yEi5wcm90by5QYWxhZGluQXVyYRIaChJ1c2VfYXZl",
            "bmdpbmdfd3JhdGgYBSABKAgi6gEKEVByb3RlY3Rpb25QYWxhZGluEjEKB29w",
            "dGlvbnMYAyABKAsyIC5wcm90by5Qcm90ZWN0aW9uUGFsYWRpbi5PcHRpb25z",
            "GgoKCFJvdGF0aW9uGpUBCgdPcHRpb25zEioKCWp1ZGdlbWVudBgBIAEoDjIX",
            "LnByb3RvLlBhbGFkaW5KdWRnZW1lbnQSIAoEc2VhbBgCIAEoDjISLnByb3Rv",
            "LlBhbGFkaW5TZWFsEiAKBGF1cmEYAyABKA4yEi5wcm90by5QYWxhZGluQXVy",
            "YRIaChJ1c2VfYXZlbmdpbmdfd3JhdGgYBSABKAginwEKC0hvbHlQYWxhZGlu",
            "EisKB29wdGlvbnMYAyABKAsyGi5wcm90by5Ib2x5UGFsYWRpbi5PcHRpb25z",
            "GgoKCFJvdGF0aW9uGlcKB09wdGlvbnMSKgoJanVkZ2VtZW50GAEgASgOMhcu",
            "cHJvdG8uUGFsYWRpbkp1ZGdlbWVudBIgCgRhdXJhGAIgASgOMhIucHJvdG8u",
            "UGFsYWRpbkF1cmEqyQYKEVBhbGFkaW5NYWpvckdseXBoEhkKFVBhbGFkaW5N",
            "YWpvckdseXBoTm9uZRAAEhsKFUdseXBoT2ZBdmVuZ2VyU1NoaWVsZBCNwQIS",
            "GgoUR2x5cGhPZkF2ZW5naW5nV3JhdGgQk8ECEhoKFEdseXBoT2ZCZWFjb25P",
            "ZkxpZ2h0EK3lAhIWChBHbHlwaE9mQ2xlYW5zaW5nEJDBAhIZChNHbHlwaE9m",
            "Q29uc2VjcmF0aW9uEIvBAhIbChVHbHlwaE9mQ3J1c2FkZXJTdHJpa2UQisEC",
            "EhcKEUdseXBoT2ZEaXZpbmVQbGVhELHlAhIYChJHbHlwaE9mRGl2aW5lU3Rv",
            "cm0Qr+UCEhUKD0dseXBoT2ZEaXZpbml0eRCUwQISFQoPR2x5cGhPZkV4b3Jj",
            "aXNtEI/BAhIZChNHbHlwaE9mRmxhc2hPZkxpZ2h0EJHBAhIcChZHbHlwaE9m",
            "SGFtbWVyT2ZKdXN0aWNlEIfBAhIhChtHbHlwaE9mSGFtbWVyT2ZUaGVSaWdo",
            "dGVvdXMQruUCEhoKFEdseXBoT2ZIYW1tZXJPZldyYXRoEInBAhIWChBHbHlw",
            "aE9mSG9seUxpZ2h0EJLBAhIWChBHbHlwaE9mSG9seVNob2NrELLlAhIWChBH",
            "bHlwaE9mSG9seVdyYXRoENvWAhIWChBHbHlwaE9mSnVkZ2VtZW50EITBAhId",
            "ChdHbHlwaE9mUmlnaHRlb3VzRGVmZW5zZRCMwQISFgoQR2x5cGhPZlNhbHZh",
            "dGlvbhCz5QISGgoUR2x5cGhPZlNlYWxPZkNvbW1hbmQQhsECEhgKEkdseXBo",
            "T2ZTZWFsT2ZMaWdodBCWwQISIAoaR2x5cGhPZlNlYWxPZlJpZ2h0ZW91c25l",
            "c3MQ3NYCEhwKFkdseXBoT2ZTZWFsT2ZWZW5nZWFuY2UQ3dYCEhkKE0dseXBo",
            "T2ZTZWFsT2ZXaXNkb20QlcECEiIKHEdseXBoT2ZTaGllbGRPZlJpZ2h0ZW91",
            "c25lc3MQsOUCEiAKGkdseXBoT2ZTcGlyaXR1YWxBdHR1bmVtZW50EIjBAhIV",
            "Cg9HbHlwaE9mVHVybkV2aWwQjsECEhYKEEdseXBoT2ZSZWNrb25pbmcQ4bwM",
            "KtIBChFQYWxhZGluTWlub3JHbHlwaBIZChVQYWxhZGluTWlub3JHbHlwaE5v",
            "bmUQABIcChZHbHlwaE9mQmxlc3NpbmdPZktpbmdzEOXSAhIcChZHbHlwaE9m",
            "Qmxlc3NpbmdPZk1pZ2h0EMzSAhIdChdHbHlwaE9mQmxlc3NpbmdPZldpc2Rv",
            "bRDm0gISFwoRR2x5cGhPZkxheU9uSGFuZHMQ59ICEhgKEkdseXBoT2ZTZW5z",
            "ZVVuZGVhZBDo0gISFAoOR2x5cGhPZlRoZVdpc2UQ6dICKqcBCglCbGVzc2lu",
            "Z3MSEwoPQmxlc3NpbmdVbmtub3duEAASEwoPQmxlc3NpbmdPZktpbmdzEAES",
            "EwoPQmxlc3NpbmdPZk1pZ2h0EAISFwoTQmxlc3NpbmdPZlNhbHZhdGlvbhAD",
            "EhQKEEJsZXNzaW5nT2ZXaXNkb20QBBIXChNCbGVzc2luZ09mU2FuY3R1YXJ5",
            "EAUSEwoPQmxlc3NpbmdPZkxpZ2h0EAYqRwoLUGFsYWRpbkF1cmESEQoNTm9Q",
            "YWxhZGluQXVyYRAAEhAKDERldm90aW9uQXVyYRACEhMKD1JldHJpYnV0aW9u",
            "QXVyYRADKjwKC1BhbGFkaW5TZWFsEg0KCVZlbmdlYW5jZRAAEgsKB0NvbW1h",
            "bmQQARIRCg1SaWdodGVvdXNuZXNzEAIqUAoQUGFsYWRpbkp1ZGdlbWVudBIV",
            "ChFKdWRnZW1lbnRPZldpc2RvbRAAEhQKEEp1ZGdlbWVudE9mTGlnaHQQARIP",
            "CgtOb0p1ZGdlbWVudBACQh2qAhpTaXJ1c0RiU2NyYXBwZXIuVUlEYXRhYmFz",
            "ZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SirusDbScrapper.UIDatabase.PaladinMajorGlyph), typeof(global::SirusDbScrapper.UIDatabase.PaladinMinorGlyph), typeof(global::SirusDbScrapper.UIDatabase.Blessings), typeof(global::SirusDbScrapper.UIDatabase.PaladinAura), typeof(global::SirusDbScrapper.UIDatabase.PaladinSeal), typeof(global::SirusDbScrapper.UIDatabase.PaladinJudgement), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.PaladinTalents), global::SirusDbScrapper.UIDatabase.PaladinTalents.Parser, new[]{ "SpiritualFocus", "SealsOfThePure", "HealingLight", "DivineIntellect", "UnyieldingFaith", "AuraMastery", "Illumination", "ImprovedLayOnHands", "ImprovedConcentrationAura", "ImprovedBlessingOfWisdom", "BlessedHands", "PureOfHeart", "DivineFavor", "SanctifiedLight", "PurifyingPower", "HolyPower", "LightsGrace", "HolyShock", "BlessedLife", "SacredCleansing", "HolyGuidance", "DivineIllumination", "JudgementsOfThePure", "InfusionOfLight", "EnlightenedJudgements", "BeaconOfLight", "Divinity", "DivineStrength", "Stoicism", "GuardiansFavor", "Anticipation", "DivineSacrifice", "ImprovedRighteousFury", "Toughness", "DivineGuardian", "ImprovedHammerOfJustice", "ImprovedDevotionAura", "BlessingOfSanctuary", "Reckoning", "SacredDuty", "OneHandedWeaponSpecialization", "SpiritualAttunement", "HolyShield", "ArdentDefender", "Redoubt", "CombatExpertise", "TouchedByTheLight", "AvengersShield", "GuardedByTheLight", "ShieldOfTheTemplar", "JudgementsOfTheJust", "HammerOfTheRighteous", "Deflection", "Benediction", "ImprovedJudgements", "HeartOfTheCrusader", "ImprovedBlessingOfMight", "Vindication", "Conviction", "SealOfCommand", "PursuitOfJustice", "EyeForAnEye", "SanctityOfBattle", "Crusade", "TwoHandedWeaponSpecialization", "SanctifiedRetribution", "Vengeance", "DivinePurpose", "TheArtOfWar", "Repentance", "JudgementsOfTheWise", "Fanaticism", "SanctifiedWrath", "SwiftRetribution", "CrusaderStrike", "SheathOfLight", "RighteousVengeance", "DivineStorm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.RetributionPaladin), global::SirusDbScrapper.UIDatabase.RetributionPaladin.Parser, new[]{ "Options" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.RetributionPaladin.Types.Rotation), global::SirusDbScrapper.UIDatabase.RetributionPaladin.Types.Rotation.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.RetributionPaladin.Types.Options), global::SirusDbScrapper.UIDatabase.RetributionPaladin.Types.Options.Parser, new[]{ "Judgement", "Seal", "Aura", "UseAvengingWrath" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.ProtectionPaladin), global::SirusDbScrapper.UIDatabase.ProtectionPaladin.Parser, new[]{ "Options" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.ProtectionPaladin.Types.Rotation), global::SirusDbScrapper.UIDatabase.ProtectionPaladin.Types.Rotation.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.ProtectionPaladin.Types.Options), global::SirusDbScrapper.UIDatabase.ProtectionPaladin.Types.Options.Parser, new[]{ "Judgement", "Seal", "Aura", "UseAvengingWrath" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.HolyPaladin), global::SirusDbScrapper.UIDatabase.HolyPaladin.Parser, new[]{ "Options" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.HolyPaladin.Types.Rotation), global::SirusDbScrapper.UIDatabase.HolyPaladin.Types.Rotation.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SirusDbScrapper.UIDatabase.HolyPaladin.Types.Options), global::SirusDbScrapper.UIDatabase.HolyPaladin.Types.Options.Parser, new[]{ "Judgement", "Aura" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum PaladinMajorGlyph {
    [pbr::OriginalName("PaladinMajorGlyphNone")] None = 0,
    [pbr::OriginalName("GlyphOfAvengerSShield")] GlyphOfAvengerSshield = 41101,
    [pbr::OriginalName("GlyphOfAvengingWrath")] GlyphOfAvengingWrath = 41107,
    [pbr::OriginalName("GlyphOfBeaconOfLight")] GlyphOfBeaconOfLight = 45741,
    [pbr::OriginalName("GlyphOfCleansing")] GlyphOfCleansing = 41104,
    [pbr::OriginalName("GlyphOfConsecration")] GlyphOfConsecration = 41099,
    [pbr::OriginalName("GlyphOfCrusaderStrike")] GlyphOfCrusaderStrike = 41098,
    [pbr::OriginalName("GlyphOfDivinePlea")] GlyphOfDivinePlea = 45745,
    [pbr::OriginalName("GlyphOfDivineStorm")] GlyphOfDivineStorm = 45743,
    [pbr::OriginalName("GlyphOfDivinity")] GlyphOfDivinity = 41108,
    [pbr::OriginalName("GlyphOfExorcism")] GlyphOfExorcism = 41103,
    [pbr::OriginalName("GlyphOfFlashOfLight")] GlyphOfFlashOfLight = 41105,
    [pbr::OriginalName("GlyphOfHammerOfJustice")] GlyphOfHammerOfJustice = 41095,
    [pbr::OriginalName("GlyphOfHammerOfTheRighteous")] GlyphOfHammerOfTheRighteous = 45742,
    [pbr::OriginalName("GlyphOfHammerOfWrath")] GlyphOfHammerOfWrath = 41097,
    [pbr::OriginalName("GlyphOfHolyLight")] GlyphOfHolyLight = 41106,
    [pbr::OriginalName("GlyphOfHolyShock")] GlyphOfHolyShock = 45746,
    [pbr::OriginalName("GlyphOfHolyWrath")] GlyphOfHolyWrath = 43867,
    [pbr::OriginalName("GlyphOfJudgement")] GlyphOfJudgement = 41092,
    [pbr::OriginalName("GlyphOfRighteousDefense")] GlyphOfRighteousDefense = 41100,
    [pbr::OriginalName("GlyphOfSalvation")] GlyphOfSalvation = 45747,
    [pbr::OriginalName("GlyphOfSealOfCommand")] GlyphOfSealOfCommand = 41094,
    [pbr::OriginalName("GlyphOfSealOfLight")] GlyphOfSealOfLight = 41110,
    [pbr::OriginalName("GlyphOfSealOfRighteousness")] GlyphOfSealOfRighteousness = 43868,
    [pbr::OriginalName("GlyphOfSealOfVengeance")] GlyphOfSealOfVengeance = 43869,
    [pbr::OriginalName("GlyphOfSealOfWisdom")] GlyphOfSealOfWisdom = 41109,
    [pbr::OriginalName("GlyphOfShieldOfRighteousness")] GlyphOfShieldOfRighteousness = 45744,
    [pbr::OriginalName("GlyphOfSpiritualAttunement")] GlyphOfSpiritualAttunement = 41096,
    [pbr::OriginalName("GlyphOfTurnEvil")] GlyphOfTurnEvil = 41102,
    [pbr::OriginalName("GlyphOfReckoning")] GlyphOfReckoning = 204385,
  }

  public enum PaladinMinorGlyph {
    [pbr::OriginalName("PaladinMinorGlyphNone")] None = 0,
    [pbr::OriginalName("GlyphOfBlessingOfKings")] GlyphOfBlessingOfKings = 43365,
    [pbr::OriginalName("GlyphOfBlessingOfMight")] GlyphOfBlessingOfMight = 43340,
    [pbr::OriginalName("GlyphOfBlessingOfWisdom")] GlyphOfBlessingOfWisdom = 43366,
    [pbr::OriginalName("GlyphOfLayOnHands")] GlyphOfLayOnHands = 43367,
    [pbr::OriginalName("GlyphOfSenseUndead")] GlyphOfSenseUndead = 43368,
    [pbr::OriginalName("GlyphOfTheWise")] GlyphOfTheWise = 43369,
  }

  public enum Blessings {
    [pbr::OriginalName("BlessingUnknown")] BlessingUnknown = 0,
    [pbr::OriginalName("BlessingOfKings")] BlessingOfKings = 1,
    [pbr::OriginalName("BlessingOfMight")] BlessingOfMight = 2,
    [pbr::OriginalName("BlessingOfSalvation")] BlessingOfSalvation = 3,
    [pbr::OriginalName("BlessingOfWisdom")] BlessingOfWisdom = 4,
    [pbr::OriginalName("BlessingOfSanctuary")] BlessingOfSanctuary = 5,
    [pbr::OriginalName("BlessingOfLight")] BlessingOfLight = 6,
  }

  public enum PaladinAura {
    [pbr::OriginalName("NoPaladinAura")] NoPaladinAura = 0,
    [pbr::OriginalName("DevotionAura")] DevotionAura = 2,
    [pbr::OriginalName("RetributionAura")] RetributionAura = 3,
  }

  public enum PaladinSeal {
    [pbr::OriginalName("Vengeance")] Vengeance = 0,
    [pbr::OriginalName("Command")] Command = 1,
    [pbr::OriginalName("Righteousness")] Righteousness = 2,
  }

  public enum PaladinJudgement {
    [pbr::OriginalName("JudgementOfWisdom")] JudgementOfWisdom = 0,
    [pbr::OriginalName("JudgementOfLight")] JudgementOfLight = 1,
    [pbr::OriginalName("NoJudgement")] NoJudgement = 2,
  }

  #endregion

  #region Messages
  public sealed partial class PaladinTalents : pb::IMessage<PaladinTalents>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PaladinTalents> _parser = new pb::MessageParser<PaladinTalents>(() => new PaladinTalents());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PaladinTalents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.PaladinReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PaladinTalents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PaladinTalents(PaladinTalents other) : this() {
      spiritualFocus_ = other.spiritualFocus_;
      sealsOfThePure_ = other.sealsOfThePure_;
      healingLight_ = other.healingLight_;
      divineIntellect_ = other.divineIntellect_;
      unyieldingFaith_ = other.unyieldingFaith_;
      auraMastery_ = other.auraMastery_;
      illumination_ = other.illumination_;
      improvedLayOnHands_ = other.improvedLayOnHands_;
      improvedConcentrationAura_ = other.improvedConcentrationAura_;
      improvedBlessingOfWisdom_ = other.improvedBlessingOfWisdom_;
      blessedHands_ = other.blessedHands_;
      pureOfHeart_ = other.pureOfHeart_;
      divineFavor_ = other.divineFavor_;
      sanctifiedLight_ = other.sanctifiedLight_;
      purifyingPower_ = other.purifyingPower_;
      holyPower_ = other.holyPower_;
      lightsGrace_ = other.lightsGrace_;
      holyShock_ = other.holyShock_;
      blessedLife_ = other.blessedLife_;
      sacredCleansing_ = other.sacredCleansing_;
      holyGuidance_ = other.holyGuidance_;
      divineIllumination_ = other.divineIllumination_;
      judgementsOfThePure_ = other.judgementsOfThePure_;
      infusionOfLight_ = other.infusionOfLight_;
      enlightenedJudgements_ = other.enlightenedJudgements_;
      beaconOfLight_ = other.beaconOfLight_;
      divinity_ = other.divinity_;
      divineStrength_ = other.divineStrength_;
      stoicism_ = other.stoicism_;
      guardiansFavor_ = other.guardiansFavor_;
      anticipation_ = other.anticipation_;
      divineSacrifice_ = other.divineSacrifice_;
      improvedRighteousFury_ = other.improvedRighteousFury_;
      toughness_ = other.toughness_;
      divineGuardian_ = other.divineGuardian_;
      improvedHammerOfJustice_ = other.improvedHammerOfJustice_;
      improvedDevotionAura_ = other.improvedDevotionAura_;
      blessingOfSanctuary_ = other.blessingOfSanctuary_;
      reckoning_ = other.reckoning_;
      sacredDuty_ = other.sacredDuty_;
      oneHandedWeaponSpecialization_ = other.oneHandedWeaponSpecialization_;
      spiritualAttunement_ = other.spiritualAttunement_;
      holyShield_ = other.holyShield_;
      ardentDefender_ = other.ardentDefender_;
      redoubt_ = other.redoubt_;
      combatExpertise_ = other.combatExpertise_;
      touchedByTheLight_ = other.touchedByTheLight_;
      avengersShield_ = other.avengersShield_;
      guardedByTheLight_ = other.guardedByTheLight_;
      shieldOfTheTemplar_ = other.shieldOfTheTemplar_;
      judgementsOfTheJust_ = other.judgementsOfTheJust_;
      hammerOfTheRighteous_ = other.hammerOfTheRighteous_;
      deflection_ = other.deflection_;
      benediction_ = other.benediction_;
      improvedJudgements_ = other.improvedJudgements_;
      heartOfTheCrusader_ = other.heartOfTheCrusader_;
      improvedBlessingOfMight_ = other.improvedBlessingOfMight_;
      vindication_ = other.vindication_;
      conviction_ = other.conviction_;
      sealOfCommand_ = other.sealOfCommand_;
      pursuitOfJustice_ = other.pursuitOfJustice_;
      eyeForAnEye_ = other.eyeForAnEye_;
      sanctityOfBattle_ = other.sanctityOfBattle_;
      crusade_ = other.crusade_;
      twoHandedWeaponSpecialization_ = other.twoHandedWeaponSpecialization_;
      sanctifiedRetribution_ = other.sanctifiedRetribution_;
      vengeance_ = other.vengeance_;
      divinePurpose_ = other.divinePurpose_;
      theArtOfWar_ = other.theArtOfWar_;
      repentance_ = other.repentance_;
      judgementsOfTheWise_ = other.judgementsOfTheWise_;
      fanaticism_ = other.fanaticism_;
      sanctifiedWrath_ = other.sanctifiedWrath_;
      swiftRetribution_ = other.swiftRetribution_;
      crusaderStrike_ = other.crusaderStrike_;
      sheathOfLight_ = other.sheathOfLight_;
      righteousVengeance_ = other.righteousVengeance_;
      divineStorm_ = other.divineStorm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PaladinTalents Clone() {
      return new PaladinTalents(this);
    }

    /// <summary>Field number for the "spiritual_focus" field.</summary>
    public const int SpiritualFocusFieldNumber = 1;
    private int spiritualFocus_;
    /// <summary>
    /// Holy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpiritualFocus {
      get { return spiritualFocus_; }
      set {
        spiritualFocus_ = value;
      }
    }

    /// <summary>Field number for the "seals_of_the_pure" field.</summary>
    public const int SealsOfThePureFieldNumber = 2;
    private int sealsOfThePure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SealsOfThePure {
      get { return sealsOfThePure_; }
      set {
        sealsOfThePure_ = value;
      }
    }

    /// <summary>Field number for the "healing_light" field.</summary>
    public const int HealingLightFieldNumber = 3;
    private int healingLight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HealingLight {
      get { return healingLight_; }
      set {
        healingLight_ = value;
      }
    }

    /// <summary>Field number for the "divine_intellect" field.</summary>
    public const int DivineIntellectFieldNumber = 4;
    private int divineIntellect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DivineIntellect {
      get { return divineIntellect_; }
      set {
        divineIntellect_ = value;
      }
    }

    /// <summary>Field number for the "unyielding_faith" field.</summary>
    public const int UnyieldingFaithFieldNumber = 5;
    private int unyieldingFaith_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnyieldingFaith {
      get { return unyieldingFaith_; }
      set {
        unyieldingFaith_ = value;
      }
    }

    /// <summary>Field number for the "aura_mastery" field.</summary>
    public const int AuraMasteryFieldNumber = 6;
    private bool auraMastery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AuraMastery {
      get { return auraMastery_; }
      set {
        auraMastery_ = value;
      }
    }

    /// <summary>Field number for the "illumination" field.</summary>
    public const int IlluminationFieldNumber = 7;
    private int illumination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Illumination {
      get { return illumination_; }
      set {
        illumination_ = value;
      }
    }

    /// <summary>Field number for the "improved_lay_on_hands" field.</summary>
    public const int ImprovedLayOnHandsFieldNumber = 8;
    private int improvedLayOnHands_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedLayOnHands {
      get { return improvedLayOnHands_; }
      set {
        improvedLayOnHands_ = value;
      }
    }

    /// <summary>Field number for the "improved_concentration_aura" field.</summary>
    public const int ImprovedConcentrationAuraFieldNumber = 9;
    private int improvedConcentrationAura_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedConcentrationAura {
      get { return improvedConcentrationAura_; }
      set {
        improvedConcentrationAura_ = value;
      }
    }

    /// <summary>Field number for the "improved_blessing_of_wisdom" field.</summary>
    public const int ImprovedBlessingOfWisdomFieldNumber = 10;
    private int improvedBlessingOfWisdom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedBlessingOfWisdom {
      get { return improvedBlessingOfWisdom_; }
      set {
        improvedBlessingOfWisdom_ = value;
      }
    }

    /// <summary>Field number for the "blessed_hands" field.</summary>
    public const int BlessedHandsFieldNumber = 11;
    private int blessedHands_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BlessedHands {
      get { return blessedHands_; }
      set {
        blessedHands_ = value;
      }
    }

    /// <summary>Field number for the "pure_of_heart" field.</summary>
    public const int PureOfHeartFieldNumber = 12;
    private int pureOfHeart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PureOfHeart {
      get { return pureOfHeart_; }
      set {
        pureOfHeart_ = value;
      }
    }

    /// <summary>Field number for the "divine_favor" field.</summary>
    public const int DivineFavorFieldNumber = 13;
    private bool divineFavor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DivineFavor {
      get { return divineFavor_; }
      set {
        divineFavor_ = value;
      }
    }

    /// <summary>Field number for the "sanctified_light" field.</summary>
    public const int SanctifiedLightFieldNumber = 14;
    private int sanctifiedLight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SanctifiedLight {
      get { return sanctifiedLight_; }
      set {
        sanctifiedLight_ = value;
      }
    }

    /// <summary>Field number for the "purifying_power" field.</summary>
    public const int PurifyingPowerFieldNumber = 15;
    private int purifyingPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PurifyingPower {
      get { return purifyingPower_; }
      set {
        purifyingPower_ = value;
      }
    }

    /// <summary>Field number for the "holy_power" field.</summary>
    public const int HolyPowerFieldNumber = 16;
    private int holyPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HolyPower {
      get { return holyPower_; }
      set {
        holyPower_ = value;
      }
    }

    /// <summary>Field number for the "lights_grace" field.</summary>
    public const int LightsGraceFieldNumber = 17;
    private int lightsGrace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LightsGrace {
      get { return lightsGrace_; }
      set {
        lightsGrace_ = value;
      }
    }

    /// <summary>Field number for the "holy_shock" field.</summary>
    public const int HolyShockFieldNumber = 18;
    private bool holyShock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HolyShock {
      get { return holyShock_; }
      set {
        holyShock_ = value;
      }
    }

    /// <summary>Field number for the "blessed_life" field.</summary>
    public const int BlessedLifeFieldNumber = 19;
    private int blessedLife_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BlessedLife {
      get { return blessedLife_; }
      set {
        blessedLife_ = value;
      }
    }

    /// <summary>Field number for the "sacred_cleansing" field.</summary>
    public const int SacredCleansingFieldNumber = 20;
    private int sacredCleansing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SacredCleansing {
      get { return sacredCleansing_; }
      set {
        sacredCleansing_ = value;
      }
    }

    /// <summary>Field number for the "holy_guidance" field.</summary>
    public const int HolyGuidanceFieldNumber = 21;
    private int holyGuidance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HolyGuidance {
      get { return holyGuidance_; }
      set {
        holyGuidance_ = value;
      }
    }

    /// <summary>Field number for the "divine_illumination" field.</summary>
    public const int DivineIlluminationFieldNumber = 22;
    private bool divineIllumination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DivineIllumination {
      get { return divineIllumination_; }
      set {
        divineIllumination_ = value;
      }
    }

    /// <summary>Field number for the "judgements_of_the_pure" field.</summary>
    public const int JudgementsOfThePureFieldNumber = 23;
    private int judgementsOfThePure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JudgementsOfThePure {
      get { return judgementsOfThePure_; }
      set {
        judgementsOfThePure_ = value;
      }
    }

    /// <summary>Field number for the "infusion_of_light" field.</summary>
    public const int InfusionOfLightFieldNumber = 24;
    private int infusionOfLight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InfusionOfLight {
      get { return infusionOfLight_; }
      set {
        infusionOfLight_ = value;
      }
    }

    /// <summary>Field number for the "enlightened_judgements" field.</summary>
    public const int EnlightenedJudgementsFieldNumber = 25;
    private int enlightenedJudgements_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EnlightenedJudgements {
      get { return enlightenedJudgements_; }
      set {
        enlightenedJudgements_ = value;
      }
    }

    /// <summary>Field number for the "beacon_of_light" field.</summary>
    public const int BeaconOfLightFieldNumber = 26;
    private bool beaconOfLight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BeaconOfLight {
      get { return beaconOfLight_; }
      set {
        beaconOfLight_ = value;
      }
    }

    /// <summary>Field number for the "divinity" field.</summary>
    public const int DivinityFieldNumber = 27;
    private int divinity_;
    /// <summary>
    /// Protection
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Divinity {
      get { return divinity_; }
      set {
        divinity_ = value;
      }
    }

    /// <summary>Field number for the "divine_strength" field.</summary>
    public const int DivineStrengthFieldNumber = 28;
    private int divineStrength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DivineStrength {
      get { return divineStrength_; }
      set {
        divineStrength_ = value;
      }
    }

    /// <summary>Field number for the "stoicism" field.</summary>
    public const int StoicismFieldNumber = 29;
    private int stoicism_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Stoicism {
      get { return stoicism_; }
      set {
        stoicism_ = value;
      }
    }

    /// <summary>Field number for the "guardians_favor" field.</summary>
    public const int GuardiansFavorFieldNumber = 30;
    private int guardiansFavor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GuardiansFavor {
      get { return guardiansFavor_; }
      set {
        guardiansFavor_ = value;
      }
    }

    /// <summary>Field number for the "anticipation" field.</summary>
    public const int AnticipationFieldNumber = 31;
    private int anticipation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Anticipation {
      get { return anticipation_; }
      set {
        anticipation_ = value;
      }
    }

    /// <summary>Field number for the "divine_sacrifice" field.</summary>
    public const int DivineSacrificeFieldNumber = 32;
    private bool divineSacrifice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DivineSacrifice {
      get { return divineSacrifice_; }
      set {
        divineSacrifice_ = value;
      }
    }

    /// <summary>Field number for the "improved_righteous_fury" field.</summary>
    public const int ImprovedRighteousFuryFieldNumber = 33;
    private int improvedRighteousFury_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedRighteousFury {
      get { return improvedRighteousFury_; }
      set {
        improvedRighteousFury_ = value;
      }
    }

    /// <summary>Field number for the "toughness" field.</summary>
    public const int ToughnessFieldNumber = 34;
    private int toughness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Toughness {
      get { return toughness_; }
      set {
        toughness_ = value;
      }
    }

    /// <summary>Field number for the "divine_guardian" field.</summary>
    public const int DivineGuardianFieldNumber = 35;
    private int divineGuardian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DivineGuardian {
      get { return divineGuardian_; }
      set {
        divineGuardian_ = value;
      }
    }

    /// <summary>Field number for the "improved_hammer_of_justice" field.</summary>
    public const int ImprovedHammerOfJusticeFieldNumber = 36;
    private int improvedHammerOfJustice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedHammerOfJustice {
      get { return improvedHammerOfJustice_; }
      set {
        improvedHammerOfJustice_ = value;
      }
    }

    /// <summary>Field number for the "improved_devotion_aura" field.</summary>
    public const int ImprovedDevotionAuraFieldNumber = 37;
    private int improvedDevotionAura_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedDevotionAura {
      get { return improvedDevotionAura_; }
      set {
        improvedDevotionAura_ = value;
      }
    }

    /// <summary>Field number for the "blessing_of_sanctuary" field.</summary>
    public const int BlessingOfSanctuaryFieldNumber = 38;
    private bool blessingOfSanctuary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlessingOfSanctuary {
      get { return blessingOfSanctuary_; }
      set {
        blessingOfSanctuary_ = value;
      }
    }

    /// <summary>Field number for the "reckoning" field.</summary>
    public const int ReckoningFieldNumber = 39;
    private int reckoning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Reckoning {
      get { return reckoning_; }
      set {
        reckoning_ = value;
      }
    }

    /// <summary>Field number for the "sacred_duty" field.</summary>
    public const int SacredDutyFieldNumber = 40;
    private int sacredDuty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SacredDuty {
      get { return sacredDuty_; }
      set {
        sacredDuty_ = value;
      }
    }

    /// <summary>Field number for the "one_handed_weapon_specialization" field.</summary>
    public const int OneHandedWeaponSpecializationFieldNumber = 41;
    private int oneHandedWeaponSpecialization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OneHandedWeaponSpecialization {
      get { return oneHandedWeaponSpecialization_; }
      set {
        oneHandedWeaponSpecialization_ = value;
      }
    }

    /// <summary>Field number for the "spiritual_attunement" field.</summary>
    public const int SpiritualAttunementFieldNumber = 42;
    private int spiritualAttunement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpiritualAttunement {
      get { return spiritualAttunement_; }
      set {
        spiritualAttunement_ = value;
      }
    }

    /// <summary>Field number for the "holy_shield" field.</summary>
    public const int HolyShieldFieldNumber = 43;
    private bool holyShield_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HolyShield {
      get { return holyShield_; }
      set {
        holyShield_ = value;
      }
    }

    /// <summary>Field number for the "ardent_defender" field.</summary>
    public const int ArdentDefenderFieldNumber = 44;
    private int ardentDefender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArdentDefender {
      get { return ardentDefender_; }
      set {
        ardentDefender_ = value;
      }
    }

    /// <summary>Field number for the "redoubt" field.</summary>
    public const int RedoubtFieldNumber = 45;
    private int redoubt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Redoubt {
      get { return redoubt_; }
      set {
        redoubt_ = value;
      }
    }

    /// <summary>Field number for the "combat_expertise" field.</summary>
    public const int CombatExpertiseFieldNumber = 46;
    private int combatExpertise_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CombatExpertise {
      get { return combatExpertise_; }
      set {
        combatExpertise_ = value;
      }
    }

    /// <summary>Field number for the "touched_by_the_light" field.</summary>
    public const int TouchedByTheLightFieldNumber = 47;
    private int touchedByTheLight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TouchedByTheLight {
      get { return touchedByTheLight_; }
      set {
        touchedByTheLight_ = value;
      }
    }

    /// <summary>Field number for the "avengers_shield" field.</summary>
    public const int AvengersShieldFieldNumber = 48;
    private bool avengersShield_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AvengersShield {
      get { return avengersShield_; }
      set {
        avengersShield_ = value;
      }
    }

    /// <summary>Field number for the "guarded_by_the_light" field.</summary>
    public const int GuardedByTheLightFieldNumber = 49;
    private int guardedByTheLight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GuardedByTheLight {
      get { return guardedByTheLight_; }
      set {
        guardedByTheLight_ = value;
      }
    }

    /// <summary>Field number for the "shield_of_the_templar" field.</summary>
    public const int ShieldOfTheTemplarFieldNumber = 50;
    private int shieldOfTheTemplar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShieldOfTheTemplar {
      get { return shieldOfTheTemplar_; }
      set {
        shieldOfTheTemplar_ = value;
      }
    }

    /// <summary>Field number for the "judgements_of_the_just" field.</summary>
    public const int JudgementsOfTheJustFieldNumber = 51;
    private int judgementsOfTheJust_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JudgementsOfTheJust {
      get { return judgementsOfTheJust_; }
      set {
        judgementsOfTheJust_ = value;
      }
    }

    /// <summary>Field number for the "hammer_of_the_righteous" field.</summary>
    public const int HammerOfTheRighteousFieldNumber = 52;
    private bool hammerOfTheRighteous_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HammerOfTheRighteous {
      get { return hammerOfTheRighteous_; }
      set {
        hammerOfTheRighteous_ = value;
      }
    }

    /// <summary>Field number for the "deflection" field.</summary>
    public const int DeflectionFieldNumber = 53;
    private int deflection_;
    /// <summary>
    /// Retribution
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Deflection {
      get { return deflection_; }
      set {
        deflection_ = value;
      }
    }

    /// <summary>Field number for the "benediction" field.</summary>
    public const int BenedictionFieldNumber = 54;
    private int benediction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Benediction {
      get { return benediction_; }
      set {
        benediction_ = value;
      }
    }

    /// <summary>Field number for the "improved_judgements" field.</summary>
    public const int ImprovedJudgementsFieldNumber = 55;
    private int improvedJudgements_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedJudgements {
      get { return improvedJudgements_; }
      set {
        improvedJudgements_ = value;
      }
    }

    /// <summary>Field number for the "heart_of_the_crusader" field.</summary>
    public const int HeartOfTheCrusaderFieldNumber = 56;
    private int heartOfTheCrusader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HeartOfTheCrusader {
      get { return heartOfTheCrusader_; }
      set {
        heartOfTheCrusader_ = value;
      }
    }

    /// <summary>Field number for the "improved_blessing_of_might" field.</summary>
    public const int ImprovedBlessingOfMightFieldNumber = 57;
    private int improvedBlessingOfMight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImprovedBlessingOfMight {
      get { return improvedBlessingOfMight_; }
      set {
        improvedBlessingOfMight_ = value;
      }
    }

    /// <summary>Field number for the "vindication" field.</summary>
    public const int VindicationFieldNumber = 58;
    private int vindication_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Vindication {
      get { return vindication_; }
      set {
        vindication_ = value;
      }
    }

    /// <summary>Field number for the "conviction" field.</summary>
    public const int ConvictionFieldNumber = 59;
    private int conviction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Conviction {
      get { return conviction_; }
      set {
        conviction_ = value;
      }
    }

    /// <summary>Field number for the "seal_of_command" field.</summary>
    public const int SealOfCommandFieldNumber = 60;
    private bool sealOfCommand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SealOfCommand {
      get { return sealOfCommand_; }
      set {
        sealOfCommand_ = value;
      }
    }

    /// <summary>Field number for the "pursuit_of_justice" field.</summary>
    public const int PursuitOfJusticeFieldNumber = 61;
    private int pursuitOfJustice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PursuitOfJustice {
      get { return pursuitOfJustice_; }
      set {
        pursuitOfJustice_ = value;
      }
    }

    /// <summary>Field number for the "eye_for_an_eye" field.</summary>
    public const int EyeForAnEyeFieldNumber = 62;
    private int eyeForAnEye_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EyeForAnEye {
      get { return eyeForAnEye_; }
      set {
        eyeForAnEye_ = value;
      }
    }

    /// <summary>Field number for the "sanctity_of_battle" field.</summary>
    public const int SanctityOfBattleFieldNumber = 63;
    private int sanctityOfBattle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SanctityOfBattle {
      get { return sanctityOfBattle_; }
      set {
        sanctityOfBattle_ = value;
      }
    }

    /// <summary>Field number for the "crusade" field.</summary>
    public const int CrusadeFieldNumber = 64;
    private int crusade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Crusade {
      get { return crusade_; }
      set {
        crusade_ = value;
      }
    }

    /// <summary>Field number for the "two_handed_weapon_specialization" field.</summary>
    public const int TwoHandedWeaponSpecializationFieldNumber = 65;
    private int twoHandedWeaponSpecialization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TwoHandedWeaponSpecialization {
      get { return twoHandedWeaponSpecialization_; }
      set {
        twoHandedWeaponSpecialization_ = value;
      }
    }

    /// <summary>Field number for the "sanctified_retribution" field.</summary>
    public const int SanctifiedRetributionFieldNumber = 66;
    private bool sanctifiedRetribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SanctifiedRetribution {
      get { return sanctifiedRetribution_; }
      set {
        sanctifiedRetribution_ = value;
      }
    }

    /// <summary>Field number for the "vengeance" field.</summary>
    public const int VengeanceFieldNumber = 67;
    private int vengeance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Vengeance {
      get { return vengeance_; }
      set {
        vengeance_ = value;
      }
    }

    /// <summary>Field number for the "divine_purpose" field.</summary>
    public const int DivinePurposeFieldNumber = 68;
    private int divinePurpose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DivinePurpose {
      get { return divinePurpose_; }
      set {
        divinePurpose_ = value;
      }
    }

    /// <summary>Field number for the "the_art_of_war" field.</summary>
    public const int TheArtOfWarFieldNumber = 69;
    private int theArtOfWar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TheArtOfWar {
      get { return theArtOfWar_; }
      set {
        theArtOfWar_ = value;
      }
    }

    /// <summary>Field number for the "repentance" field.</summary>
    public const int RepentanceFieldNumber = 70;
    private bool repentance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Repentance {
      get { return repentance_; }
      set {
        repentance_ = value;
      }
    }

    /// <summary>Field number for the "judgements_of_the_wise" field.</summary>
    public const int JudgementsOfTheWiseFieldNumber = 71;
    private int judgementsOfTheWise_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JudgementsOfTheWise {
      get { return judgementsOfTheWise_; }
      set {
        judgementsOfTheWise_ = value;
      }
    }

    /// <summary>Field number for the "fanaticism" field.</summary>
    public const int FanaticismFieldNumber = 72;
    private int fanaticism_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Fanaticism {
      get { return fanaticism_; }
      set {
        fanaticism_ = value;
      }
    }

    /// <summary>Field number for the "sanctified_wrath" field.</summary>
    public const int SanctifiedWrathFieldNumber = 73;
    private int sanctifiedWrath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SanctifiedWrath {
      get { return sanctifiedWrath_; }
      set {
        sanctifiedWrath_ = value;
      }
    }

    /// <summary>Field number for the "swift_retribution" field.</summary>
    public const int SwiftRetributionFieldNumber = 74;
    private int swiftRetribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SwiftRetribution {
      get { return swiftRetribution_; }
      set {
        swiftRetribution_ = value;
      }
    }

    /// <summary>Field number for the "crusader_strike" field.</summary>
    public const int CrusaderStrikeFieldNumber = 75;
    private bool crusaderStrike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CrusaderStrike {
      get { return crusaderStrike_; }
      set {
        crusaderStrike_ = value;
      }
    }

    /// <summary>Field number for the "sheath_of_light" field.</summary>
    public const int SheathOfLightFieldNumber = 76;
    private int sheathOfLight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SheathOfLight {
      get { return sheathOfLight_; }
      set {
        sheathOfLight_ = value;
      }
    }

    /// <summary>Field number for the "righteous_vengeance" field.</summary>
    public const int RighteousVengeanceFieldNumber = 77;
    private int righteousVengeance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RighteousVengeance {
      get { return righteousVengeance_; }
      set {
        righteousVengeance_ = value;
      }
    }

    /// <summary>Field number for the "divine_storm" field.</summary>
    public const int DivineStormFieldNumber = 78;
    private bool divineStorm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DivineStorm {
      get { return divineStorm_; }
      set {
        divineStorm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PaladinTalents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PaladinTalents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpiritualFocus != other.SpiritualFocus) return false;
      if (SealsOfThePure != other.SealsOfThePure) return false;
      if (HealingLight != other.HealingLight) return false;
      if (DivineIntellect != other.DivineIntellect) return false;
      if (UnyieldingFaith != other.UnyieldingFaith) return false;
      if (AuraMastery != other.AuraMastery) return false;
      if (Illumination != other.Illumination) return false;
      if (ImprovedLayOnHands != other.ImprovedLayOnHands) return false;
      if (ImprovedConcentrationAura != other.ImprovedConcentrationAura) return false;
      if (ImprovedBlessingOfWisdom != other.ImprovedBlessingOfWisdom) return false;
      if (BlessedHands != other.BlessedHands) return false;
      if (PureOfHeart != other.PureOfHeart) return false;
      if (DivineFavor != other.DivineFavor) return false;
      if (SanctifiedLight != other.SanctifiedLight) return false;
      if (PurifyingPower != other.PurifyingPower) return false;
      if (HolyPower != other.HolyPower) return false;
      if (LightsGrace != other.LightsGrace) return false;
      if (HolyShock != other.HolyShock) return false;
      if (BlessedLife != other.BlessedLife) return false;
      if (SacredCleansing != other.SacredCleansing) return false;
      if (HolyGuidance != other.HolyGuidance) return false;
      if (DivineIllumination != other.DivineIllumination) return false;
      if (JudgementsOfThePure != other.JudgementsOfThePure) return false;
      if (InfusionOfLight != other.InfusionOfLight) return false;
      if (EnlightenedJudgements != other.EnlightenedJudgements) return false;
      if (BeaconOfLight != other.BeaconOfLight) return false;
      if (Divinity != other.Divinity) return false;
      if (DivineStrength != other.DivineStrength) return false;
      if (Stoicism != other.Stoicism) return false;
      if (GuardiansFavor != other.GuardiansFavor) return false;
      if (Anticipation != other.Anticipation) return false;
      if (DivineSacrifice != other.DivineSacrifice) return false;
      if (ImprovedRighteousFury != other.ImprovedRighteousFury) return false;
      if (Toughness != other.Toughness) return false;
      if (DivineGuardian != other.DivineGuardian) return false;
      if (ImprovedHammerOfJustice != other.ImprovedHammerOfJustice) return false;
      if (ImprovedDevotionAura != other.ImprovedDevotionAura) return false;
      if (BlessingOfSanctuary != other.BlessingOfSanctuary) return false;
      if (Reckoning != other.Reckoning) return false;
      if (SacredDuty != other.SacredDuty) return false;
      if (OneHandedWeaponSpecialization != other.OneHandedWeaponSpecialization) return false;
      if (SpiritualAttunement != other.SpiritualAttunement) return false;
      if (HolyShield != other.HolyShield) return false;
      if (ArdentDefender != other.ArdentDefender) return false;
      if (Redoubt != other.Redoubt) return false;
      if (CombatExpertise != other.CombatExpertise) return false;
      if (TouchedByTheLight != other.TouchedByTheLight) return false;
      if (AvengersShield != other.AvengersShield) return false;
      if (GuardedByTheLight != other.GuardedByTheLight) return false;
      if (ShieldOfTheTemplar != other.ShieldOfTheTemplar) return false;
      if (JudgementsOfTheJust != other.JudgementsOfTheJust) return false;
      if (HammerOfTheRighteous != other.HammerOfTheRighteous) return false;
      if (Deflection != other.Deflection) return false;
      if (Benediction != other.Benediction) return false;
      if (ImprovedJudgements != other.ImprovedJudgements) return false;
      if (HeartOfTheCrusader != other.HeartOfTheCrusader) return false;
      if (ImprovedBlessingOfMight != other.ImprovedBlessingOfMight) return false;
      if (Vindication != other.Vindication) return false;
      if (Conviction != other.Conviction) return false;
      if (SealOfCommand != other.SealOfCommand) return false;
      if (PursuitOfJustice != other.PursuitOfJustice) return false;
      if (EyeForAnEye != other.EyeForAnEye) return false;
      if (SanctityOfBattle != other.SanctityOfBattle) return false;
      if (Crusade != other.Crusade) return false;
      if (TwoHandedWeaponSpecialization != other.TwoHandedWeaponSpecialization) return false;
      if (SanctifiedRetribution != other.SanctifiedRetribution) return false;
      if (Vengeance != other.Vengeance) return false;
      if (DivinePurpose != other.DivinePurpose) return false;
      if (TheArtOfWar != other.TheArtOfWar) return false;
      if (Repentance != other.Repentance) return false;
      if (JudgementsOfTheWise != other.JudgementsOfTheWise) return false;
      if (Fanaticism != other.Fanaticism) return false;
      if (SanctifiedWrath != other.SanctifiedWrath) return false;
      if (SwiftRetribution != other.SwiftRetribution) return false;
      if (CrusaderStrike != other.CrusaderStrike) return false;
      if (SheathOfLight != other.SheathOfLight) return false;
      if (RighteousVengeance != other.RighteousVengeance) return false;
      if (DivineStorm != other.DivineStorm) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpiritualFocus != 0) hash ^= SpiritualFocus.GetHashCode();
      if (SealsOfThePure != 0) hash ^= SealsOfThePure.GetHashCode();
      if (HealingLight != 0) hash ^= HealingLight.GetHashCode();
      if (DivineIntellect != 0) hash ^= DivineIntellect.GetHashCode();
      if (UnyieldingFaith != 0) hash ^= UnyieldingFaith.GetHashCode();
      if (AuraMastery != false) hash ^= AuraMastery.GetHashCode();
      if (Illumination != 0) hash ^= Illumination.GetHashCode();
      if (ImprovedLayOnHands != 0) hash ^= ImprovedLayOnHands.GetHashCode();
      if (ImprovedConcentrationAura != 0) hash ^= ImprovedConcentrationAura.GetHashCode();
      if (ImprovedBlessingOfWisdom != 0) hash ^= ImprovedBlessingOfWisdom.GetHashCode();
      if (BlessedHands != 0) hash ^= BlessedHands.GetHashCode();
      if (PureOfHeart != 0) hash ^= PureOfHeart.GetHashCode();
      if (DivineFavor != false) hash ^= DivineFavor.GetHashCode();
      if (SanctifiedLight != 0) hash ^= SanctifiedLight.GetHashCode();
      if (PurifyingPower != 0) hash ^= PurifyingPower.GetHashCode();
      if (HolyPower != 0) hash ^= HolyPower.GetHashCode();
      if (LightsGrace != 0) hash ^= LightsGrace.GetHashCode();
      if (HolyShock != false) hash ^= HolyShock.GetHashCode();
      if (BlessedLife != 0) hash ^= BlessedLife.GetHashCode();
      if (SacredCleansing != 0) hash ^= SacredCleansing.GetHashCode();
      if (HolyGuidance != 0) hash ^= HolyGuidance.GetHashCode();
      if (DivineIllumination != false) hash ^= DivineIllumination.GetHashCode();
      if (JudgementsOfThePure != 0) hash ^= JudgementsOfThePure.GetHashCode();
      if (InfusionOfLight != 0) hash ^= InfusionOfLight.GetHashCode();
      if (EnlightenedJudgements != 0) hash ^= EnlightenedJudgements.GetHashCode();
      if (BeaconOfLight != false) hash ^= BeaconOfLight.GetHashCode();
      if (Divinity != 0) hash ^= Divinity.GetHashCode();
      if (DivineStrength != 0) hash ^= DivineStrength.GetHashCode();
      if (Stoicism != 0) hash ^= Stoicism.GetHashCode();
      if (GuardiansFavor != 0) hash ^= GuardiansFavor.GetHashCode();
      if (Anticipation != 0) hash ^= Anticipation.GetHashCode();
      if (DivineSacrifice != false) hash ^= DivineSacrifice.GetHashCode();
      if (ImprovedRighteousFury != 0) hash ^= ImprovedRighteousFury.GetHashCode();
      if (Toughness != 0) hash ^= Toughness.GetHashCode();
      if (DivineGuardian != 0) hash ^= DivineGuardian.GetHashCode();
      if (ImprovedHammerOfJustice != 0) hash ^= ImprovedHammerOfJustice.GetHashCode();
      if (ImprovedDevotionAura != 0) hash ^= ImprovedDevotionAura.GetHashCode();
      if (BlessingOfSanctuary != false) hash ^= BlessingOfSanctuary.GetHashCode();
      if (Reckoning != 0) hash ^= Reckoning.GetHashCode();
      if (SacredDuty != 0) hash ^= SacredDuty.GetHashCode();
      if (OneHandedWeaponSpecialization != 0) hash ^= OneHandedWeaponSpecialization.GetHashCode();
      if (SpiritualAttunement != 0) hash ^= SpiritualAttunement.GetHashCode();
      if (HolyShield != false) hash ^= HolyShield.GetHashCode();
      if (ArdentDefender != 0) hash ^= ArdentDefender.GetHashCode();
      if (Redoubt != 0) hash ^= Redoubt.GetHashCode();
      if (CombatExpertise != 0) hash ^= CombatExpertise.GetHashCode();
      if (TouchedByTheLight != 0) hash ^= TouchedByTheLight.GetHashCode();
      if (AvengersShield != false) hash ^= AvengersShield.GetHashCode();
      if (GuardedByTheLight != 0) hash ^= GuardedByTheLight.GetHashCode();
      if (ShieldOfTheTemplar != 0) hash ^= ShieldOfTheTemplar.GetHashCode();
      if (JudgementsOfTheJust != 0) hash ^= JudgementsOfTheJust.GetHashCode();
      if (HammerOfTheRighteous != false) hash ^= HammerOfTheRighteous.GetHashCode();
      if (Deflection != 0) hash ^= Deflection.GetHashCode();
      if (Benediction != 0) hash ^= Benediction.GetHashCode();
      if (ImprovedJudgements != 0) hash ^= ImprovedJudgements.GetHashCode();
      if (HeartOfTheCrusader != 0) hash ^= HeartOfTheCrusader.GetHashCode();
      if (ImprovedBlessingOfMight != 0) hash ^= ImprovedBlessingOfMight.GetHashCode();
      if (Vindication != 0) hash ^= Vindication.GetHashCode();
      if (Conviction != 0) hash ^= Conviction.GetHashCode();
      if (SealOfCommand != false) hash ^= SealOfCommand.GetHashCode();
      if (PursuitOfJustice != 0) hash ^= PursuitOfJustice.GetHashCode();
      if (EyeForAnEye != 0) hash ^= EyeForAnEye.GetHashCode();
      if (SanctityOfBattle != 0) hash ^= SanctityOfBattle.GetHashCode();
      if (Crusade != 0) hash ^= Crusade.GetHashCode();
      if (TwoHandedWeaponSpecialization != 0) hash ^= TwoHandedWeaponSpecialization.GetHashCode();
      if (SanctifiedRetribution != false) hash ^= SanctifiedRetribution.GetHashCode();
      if (Vengeance != 0) hash ^= Vengeance.GetHashCode();
      if (DivinePurpose != 0) hash ^= DivinePurpose.GetHashCode();
      if (TheArtOfWar != 0) hash ^= TheArtOfWar.GetHashCode();
      if (Repentance != false) hash ^= Repentance.GetHashCode();
      if (JudgementsOfTheWise != 0) hash ^= JudgementsOfTheWise.GetHashCode();
      if (Fanaticism != 0) hash ^= Fanaticism.GetHashCode();
      if (SanctifiedWrath != 0) hash ^= SanctifiedWrath.GetHashCode();
      if (SwiftRetribution != 0) hash ^= SwiftRetribution.GetHashCode();
      if (CrusaderStrike != false) hash ^= CrusaderStrike.GetHashCode();
      if (SheathOfLight != 0) hash ^= SheathOfLight.GetHashCode();
      if (RighteousVengeance != 0) hash ^= RighteousVengeance.GetHashCode();
      if (DivineStorm != false) hash ^= DivineStorm.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpiritualFocus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpiritualFocus);
      }
      if (SealsOfThePure != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SealsOfThePure);
      }
      if (HealingLight != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HealingLight);
      }
      if (DivineIntellect != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DivineIntellect);
      }
      if (UnyieldingFaith != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UnyieldingFaith);
      }
      if (AuraMastery != false) {
        output.WriteRawTag(48);
        output.WriteBool(AuraMastery);
      }
      if (Illumination != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Illumination);
      }
      if (ImprovedLayOnHands != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ImprovedLayOnHands);
      }
      if (ImprovedConcentrationAura != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ImprovedConcentrationAura);
      }
      if (ImprovedBlessingOfWisdom != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ImprovedBlessingOfWisdom);
      }
      if (BlessedHands != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(BlessedHands);
      }
      if (PureOfHeart != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PureOfHeart);
      }
      if (DivineFavor != false) {
        output.WriteRawTag(104);
        output.WriteBool(DivineFavor);
      }
      if (SanctifiedLight != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SanctifiedLight);
      }
      if (PurifyingPower != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(PurifyingPower);
      }
      if (HolyPower != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(HolyPower);
      }
      if (LightsGrace != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(LightsGrace);
      }
      if (HolyShock != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(HolyShock);
      }
      if (BlessedLife != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(BlessedLife);
      }
      if (SacredCleansing != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SacredCleansing);
      }
      if (HolyGuidance != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(HolyGuidance);
      }
      if (DivineIllumination != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(DivineIllumination);
      }
      if (JudgementsOfThePure != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(JudgementsOfThePure);
      }
      if (InfusionOfLight != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(InfusionOfLight);
      }
      if (EnlightenedJudgements != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(EnlightenedJudgements);
      }
      if (BeaconOfLight != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(BeaconOfLight);
      }
      if (Divinity != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(Divinity);
      }
      if (DivineStrength != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(DivineStrength);
      }
      if (Stoicism != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(Stoicism);
      }
      if (GuardiansFavor != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(GuardiansFavor);
      }
      if (Anticipation != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Anticipation);
      }
      if (DivineSacrifice != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(DivineSacrifice);
      }
      if (ImprovedRighteousFury != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(ImprovedRighteousFury);
      }
      if (Toughness != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Toughness);
      }
      if (DivineGuardian != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(DivineGuardian);
      }
      if (ImprovedHammerOfJustice != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(ImprovedHammerOfJustice);
      }
      if (ImprovedDevotionAura != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(ImprovedDevotionAura);
      }
      if (BlessingOfSanctuary != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(BlessingOfSanctuary);
      }
      if (Reckoning != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(Reckoning);
      }
      if (SacredDuty != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(SacredDuty);
      }
      if (OneHandedWeaponSpecialization != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(OneHandedWeaponSpecialization);
      }
      if (SpiritualAttunement != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(SpiritualAttunement);
      }
      if (HolyShield != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(HolyShield);
      }
      if (ArdentDefender != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(ArdentDefender);
      }
      if (Redoubt != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(Redoubt);
      }
      if (CombatExpertise != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(CombatExpertise);
      }
      if (TouchedByTheLight != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(TouchedByTheLight);
      }
      if (AvengersShield != false) {
        output.WriteRawTag(128, 3);
        output.WriteBool(AvengersShield);
      }
      if (GuardedByTheLight != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(GuardedByTheLight);
      }
      if (ShieldOfTheTemplar != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(ShieldOfTheTemplar);
      }
      if (JudgementsOfTheJust != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(JudgementsOfTheJust);
      }
      if (HammerOfTheRighteous != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(HammerOfTheRighteous);
      }
      if (Deflection != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(Deflection);
      }
      if (Benediction != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(Benediction);
      }
      if (ImprovedJudgements != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(ImprovedJudgements);
      }
      if (HeartOfTheCrusader != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(HeartOfTheCrusader);
      }
      if (ImprovedBlessingOfMight != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(ImprovedBlessingOfMight);
      }
      if (Vindication != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(Vindication);
      }
      if (Conviction != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(Conviction);
      }
      if (SealOfCommand != false) {
        output.WriteRawTag(224, 3);
        output.WriteBool(SealOfCommand);
      }
      if (PursuitOfJustice != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(PursuitOfJustice);
      }
      if (EyeForAnEye != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(EyeForAnEye);
      }
      if (SanctityOfBattle != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(SanctityOfBattle);
      }
      if (Crusade != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(Crusade);
      }
      if (TwoHandedWeaponSpecialization != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(TwoHandedWeaponSpecialization);
      }
      if (SanctifiedRetribution != false) {
        output.WriteRawTag(144, 4);
        output.WriteBool(SanctifiedRetribution);
      }
      if (Vengeance != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(Vengeance);
      }
      if (DivinePurpose != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(DivinePurpose);
      }
      if (TheArtOfWar != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(TheArtOfWar);
      }
      if (Repentance != false) {
        output.WriteRawTag(176, 4);
        output.WriteBool(Repentance);
      }
      if (JudgementsOfTheWise != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(JudgementsOfTheWise);
      }
      if (Fanaticism != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(Fanaticism);
      }
      if (SanctifiedWrath != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(SanctifiedWrath);
      }
      if (SwiftRetribution != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(SwiftRetribution);
      }
      if (CrusaderStrike != false) {
        output.WriteRawTag(216, 4);
        output.WriteBool(CrusaderStrike);
      }
      if (SheathOfLight != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(SheathOfLight);
      }
      if (RighteousVengeance != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(RighteousVengeance);
      }
      if (DivineStorm != false) {
        output.WriteRawTag(240, 4);
        output.WriteBool(DivineStorm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpiritualFocus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpiritualFocus);
      }
      if (SealsOfThePure != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SealsOfThePure);
      }
      if (HealingLight != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HealingLight);
      }
      if (DivineIntellect != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DivineIntellect);
      }
      if (UnyieldingFaith != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UnyieldingFaith);
      }
      if (AuraMastery != false) {
        output.WriteRawTag(48);
        output.WriteBool(AuraMastery);
      }
      if (Illumination != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Illumination);
      }
      if (ImprovedLayOnHands != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ImprovedLayOnHands);
      }
      if (ImprovedConcentrationAura != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ImprovedConcentrationAura);
      }
      if (ImprovedBlessingOfWisdom != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ImprovedBlessingOfWisdom);
      }
      if (BlessedHands != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(BlessedHands);
      }
      if (PureOfHeart != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PureOfHeart);
      }
      if (DivineFavor != false) {
        output.WriteRawTag(104);
        output.WriteBool(DivineFavor);
      }
      if (SanctifiedLight != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SanctifiedLight);
      }
      if (PurifyingPower != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(PurifyingPower);
      }
      if (HolyPower != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(HolyPower);
      }
      if (LightsGrace != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(LightsGrace);
      }
      if (HolyShock != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(HolyShock);
      }
      if (BlessedLife != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(BlessedLife);
      }
      if (SacredCleansing != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SacredCleansing);
      }
      if (HolyGuidance != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(HolyGuidance);
      }
      if (DivineIllumination != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(DivineIllumination);
      }
      if (JudgementsOfThePure != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(JudgementsOfThePure);
      }
      if (InfusionOfLight != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(InfusionOfLight);
      }
      if (EnlightenedJudgements != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(EnlightenedJudgements);
      }
      if (BeaconOfLight != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(BeaconOfLight);
      }
      if (Divinity != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(Divinity);
      }
      if (DivineStrength != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(DivineStrength);
      }
      if (Stoicism != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(Stoicism);
      }
      if (GuardiansFavor != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(GuardiansFavor);
      }
      if (Anticipation != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Anticipation);
      }
      if (DivineSacrifice != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(DivineSacrifice);
      }
      if (ImprovedRighteousFury != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(ImprovedRighteousFury);
      }
      if (Toughness != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Toughness);
      }
      if (DivineGuardian != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(DivineGuardian);
      }
      if (ImprovedHammerOfJustice != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(ImprovedHammerOfJustice);
      }
      if (ImprovedDevotionAura != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(ImprovedDevotionAura);
      }
      if (BlessingOfSanctuary != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(BlessingOfSanctuary);
      }
      if (Reckoning != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(Reckoning);
      }
      if (SacredDuty != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(SacredDuty);
      }
      if (OneHandedWeaponSpecialization != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(OneHandedWeaponSpecialization);
      }
      if (SpiritualAttunement != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(SpiritualAttunement);
      }
      if (HolyShield != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(HolyShield);
      }
      if (ArdentDefender != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(ArdentDefender);
      }
      if (Redoubt != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(Redoubt);
      }
      if (CombatExpertise != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(CombatExpertise);
      }
      if (TouchedByTheLight != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(TouchedByTheLight);
      }
      if (AvengersShield != false) {
        output.WriteRawTag(128, 3);
        output.WriteBool(AvengersShield);
      }
      if (GuardedByTheLight != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(GuardedByTheLight);
      }
      if (ShieldOfTheTemplar != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(ShieldOfTheTemplar);
      }
      if (JudgementsOfTheJust != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(JudgementsOfTheJust);
      }
      if (HammerOfTheRighteous != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(HammerOfTheRighteous);
      }
      if (Deflection != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(Deflection);
      }
      if (Benediction != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(Benediction);
      }
      if (ImprovedJudgements != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(ImprovedJudgements);
      }
      if (HeartOfTheCrusader != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(HeartOfTheCrusader);
      }
      if (ImprovedBlessingOfMight != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(ImprovedBlessingOfMight);
      }
      if (Vindication != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(Vindication);
      }
      if (Conviction != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(Conviction);
      }
      if (SealOfCommand != false) {
        output.WriteRawTag(224, 3);
        output.WriteBool(SealOfCommand);
      }
      if (PursuitOfJustice != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(PursuitOfJustice);
      }
      if (EyeForAnEye != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(EyeForAnEye);
      }
      if (SanctityOfBattle != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(SanctityOfBattle);
      }
      if (Crusade != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(Crusade);
      }
      if (TwoHandedWeaponSpecialization != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(TwoHandedWeaponSpecialization);
      }
      if (SanctifiedRetribution != false) {
        output.WriteRawTag(144, 4);
        output.WriteBool(SanctifiedRetribution);
      }
      if (Vengeance != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(Vengeance);
      }
      if (DivinePurpose != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(DivinePurpose);
      }
      if (TheArtOfWar != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(TheArtOfWar);
      }
      if (Repentance != false) {
        output.WriteRawTag(176, 4);
        output.WriteBool(Repentance);
      }
      if (JudgementsOfTheWise != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(JudgementsOfTheWise);
      }
      if (Fanaticism != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(Fanaticism);
      }
      if (SanctifiedWrath != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(SanctifiedWrath);
      }
      if (SwiftRetribution != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(SwiftRetribution);
      }
      if (CrusaderStrike != false) {
        output.WriteRawTag(216, 4);
        output.WriteBool(CrusaderStrike);
      }
      if (SheathOfLight != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(SheathOfLight);
      }
      if (RighteousVengeance != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(RighteousVengeance);
      }
      if (DivineStorm != false) {
        output.WriteRawTag(240, 4);
        output.WriteBool(DivineStorm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpiritualFocus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpiritualFocus);
      }
      if (SealsOfThePure != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SealsOfThePure);
      }
      if (HealingLight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HealingLight);
      }
      if (DivineIntellect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DivineIntellect);
      }
      if (UnyieldingFaith != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnyieldingFaith);
      }
      if (AuraMastery != false) {
        size += 1 + 1;
      }
      if (Illumination != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Illumination);
      }
      if (ImprovedLayOnHands != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedLayOnHands);
      }
      if (ImprovedConcentrationAura != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedConcentrationAura);
      }
      if (ImprovedBlessingOfWisdom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImprovedBlessingOfWisdom);
      }
      if (BlessedHands != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlessedHands);
      }
      if (PureOfHeart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PureOfHeart);
      }
      if (DivineFavor != false) {
        size += 1 + 1;
      }
      if (SanctifiedLight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SanctifiedLight);
      }
      if (PurifyingPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PurifyingPower);
      }
      if (HolyPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HolyPower);
      }
      if (LightsGrace != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LightsGrace);
      }
      if (HolyShock != false) {
        size += 2 + 1;
      }
      if (BlessedLife != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BlessedLife);
      }
      if (SacredCleansing != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SacredCleansing);
      }
      if (HolyGuidance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HolyGuidance);
      }
      if (DivineIllumination != false) {
        size += 2 + 1;
      }
      if (JudgementsOfThePure != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(JudgementsOfThePure);
      }
      if (InfusionOfLight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InfusionOfLight);
      }
      if (EnlightenedJudgements != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EnlightenedJudgements);
      }
      if (BeaconOfLight != false) {
        size += 2 + 1;
      }
      if (Divinity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Divinity);
      }
      if (DivineStrength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DivineStrength);
      }
      if (Stoicism != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Stoicism);
      }
      if (GuardiansFavor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuardiansFavor);
      }
      if (Anticipation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Anticipation);
      }
      if (DivineSacrifice != false) {
        size += 2 + 1;
      }
      if (ImprovedRighteousFury != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedRighteousFury);
      }
      if (Toughness != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Toughness);
      }
      if (DivineGuardian != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DivineGuardian);
      }
      if (ImprovedHammerOfJustice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedHammerOfJustice);
      }
      if (ImprovedDevotionAura != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedDevotionAura);
      }
      if (BlessingOfSanctuary != false) {
        size += 2 + 1;
      }
      if (Reckoning != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Reckoning);
      }
      if (SacredDuty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SacredDuty);
      }
      if (OneHandedWeaponSpecialization != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OneHandedWeaponSpecialization);
      }
      if (SpiritualAttunement != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpiritualAttunement);
      }
      if (HolyShield != false) {
        size += 2 + 1;
      }
      if (ArdentDefender != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ArdentDefender);
      }
      if (Redoubt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Redoubt);
      }
      if (CombatExpertise != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CombatExpertise);
      }
      if (TouchedByTheLight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TouchedByTheLight);
      }
      if (AvengersShield != false) {
        size += 2 + 1;
      }
      if (GuardedByTheLight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuardedByTheLight);
      }
      if (ShieldOfTheTemplar != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShieldOfTheTemplar);
      }
      if (JudgementsOfTheJust != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(JudgementsOfTheJust);
      }
      if (HammerOfTheRighteous != false) {
        size += 2 + 1;
      }
      if (Deflection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Deflection);
      }
      if (Benediction != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Benediction);
      }
      if (ImprovedJudgements != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedJudgements);
      }
      if (HeartOfTheCrusader != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HeartOfTheCrusader);
      }
      if (ImprovedBlessingOfMight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ImprovedBlessingOfMight);
      }
      if (Vindication != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Vindication);
      }
      if (Conviction != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Conviction);
      }
      if (SealOfCommand != false) {
        size += 2 + 1;
      }
      if (PursuitOfJustice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PursuitOfJustice);
      }
      if (EyeForAnEye != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EyeForAnEye);
      }
      if (SanctityOfBattle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SanctityOfBattle);
      }
      if (Crusade != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Crusade);
      }
      if (TwoHandedWeaponSpecialization != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TwoHandedWeaponSpecialization);
      }
      if (SanctifiedRetribution != false) {
        size += 2 + 1;
      }
      if (Vengeance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Vengeance);
      }
      if (DivinePurpose != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DivinePurpose);
      }
      if (TheArtOfWar != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TheArtOfWar);
      }
      if (Repentance != false) {
        size += 2 + 1;
      }
      if (JudgementsOfTheWise != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(JudgementsOfTheWise);
      }
      if (Fanaticism != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Fanaticism);
      }
      if (SanctifiedWrath != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SanctifiedWrath);
      }
      if (SwiftRetribution != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SwiftRetribution);
      }
      if (CrusaderStrike != false) {
        size += 2 + 1;
      }
      if (SheathOfLight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SheathOfLight);
      }
      if (RighteousVengeance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RighteousVengeance);
      }
      if (DivineStorm != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PaladinTalents other) {
      if (other == null) {
        return;
      }
      if (other.SpiritualFocus != 0) {
        SpiritualFocus = other.SpiritualFocus;
      }
      if (other.SealsOfThePure != 0) {
        SealsOfThePure = other.SealsOfThePure;
      }
      if (other.HealingLight != 0) {
        HealingLight = other.HealingLight;
      }
      if (other.DivineIntellect != 0) {
        DivineIntellect = other.DivineIntellect;
      }
      if (other.UnyieldingFaith != 0) {
        UnyieldingFaith = other.UnyieldingFaith;
      }
      if (other.AuraMastery != false) {
        AuraMastery = other.AuraMastery;
      }
      if (other.Illumination != 0) {
        Illumination = other.Illumination;
      }
      if (other.ImprovedLayOnHands != 0) {
        ImprovedLayOnHands = other.ImprovedLayOnHands;
      }
      if (other.ImprovedConcentrationAura != 0) {
        ImprovedConcentrationAura = other.ImprovedConcentrationAura;
      }
      if (other.ImprovedBlessingOfWisdom != 0) {
        ImprovedBlessingOfWisdom = other.ImprovedBlessingOfWisdom;
      }
      if (other.BlessedHands != 0) {
        BlessedHands = other.BlessedHands;
      }
      if (other.PureOfHeart != 0) {
        PureOfHeart = other.PureOfHeart;
      }
      if (other.DivineFavor != false) {
        DivineFavor = other.DivineFavor;
      }
      if (other.SanctifiedLight != 0) {
        SanctifiedLight = other.SanctifiedLight;
      }
      if (other.PurifyingPower != 0) {
        PurifyingPower = other.PurifyingPower;
      }
      if (other.HolyPower != 0) {
        HolyPower = other.HolyPower;
      }
      if (other.LightsGrace != 0) {
        LightsGrace = other.LightsGrace;
      }
      if (other.HolyShock != false) {
        HolyShock = other.HolyShock;
      }
      if (other.BlessedLife != 0) {
        BlessedLife = other.BlessedLife;
      }
      if (other.SacredCleansing != 0) {
        SacredCleansing = other.SacredCleansing;
      }
      if (other.HolyGuidance != 0) {
        HolyGuidance = other.HolyGuidance;
      }
      if (other.DivineIllumination != false) {
        DivineIllumination = other.DivineIllumination;
      }
      if (other.JudgementsOfThePure != 0) {
        JudgementsOfThePure = other.JudgementsOfThePure;
      }
      if (other.InfusionOfLight != 0) {
        InfusionOfLight = other.InfusionOfLight;
      }
      if (other.EnlightenedJudgements != 0) {
        EnlightenedJudgements = other.EnlightenedJudgements;
      }
      if (other.BeaconOfLight != false) {
        BeaconOfLight = other.BeaconOfLight;
      }
      if (other.Divinity != 0) {
        Divinity = other.Divinity;
      }
      if (other.DivineStrength != 0) {
        DivineStrength = other.DivineStrength;
      }
      if (other.Stoicism != 0) {
        Stoicism = other.Stoicism;
      }
      if (other.GuardiansFavor != 0) {
        GuardiansFavor = other.GuardiansFavor;
      }
      if (other.Anticipation != 0) {
        Anticipation = other.Anticipation;
      }
      if (other.DivineSacrifice != false) {
        DivineSacrifice = other.DivineSacrifice;
      }
      if (other.ImprovedRighteousFury != 0) {
        ImprovedRighteousFury = other.ImprovedRighteousFury;
      }
      if (other.Toughness != 0) {
        Toughness = other.Toughness;
      }
      if (other.DivineGuardian != 0) {
        DivineGuardian = other.DivineGuardian;
      }
      if (other.ImprovedHammerOfJustice != 0) {
        ImprovedHammerOfJustice = other.ImprovedHammerOfJustice;
      }
      if (other.ImprovedDevotionAura != 0) {
        ImprovedDevotionAura = other.ImprovedDevotionAura;
      }
      if (other.BlessingOfSanctuary != false) {
        BlessingOfSanctuary = other.BlessingOfSanctuary;
      }
      if (other.Reckoning != 0) {
        Reckoning = other.Reckoning;
      }
      if (other.SacredDuty != 0) {
        SacredDuty = other.SacredDuty;
      }
      if (other.OneHandedWeaponSpecialization != 0) {
        OneHandedWeaponSpecialization = other.OneHandedWeaponSpecialization;
      }
      if (other.SpiritualAttunement != 0) {
        SpiritualAttunement = other.SpiritualAttunement;
      }
      if (other.HolyShield != false) {
        HolyShield = other.HolyShield;
      }
      if (other.ArdentDefender != 0) {
        ArdentDefender = other.ArdentDefender;
      }
      if (other.Redoubt != 0) {
        Redoubt = other.Redoubt;
      }
      if (other.CombatExpertise != 0) {
        CombatExpertise = other.CombatExpertise;
      }
      if (other.TouchedByTheLight != 0) {
        TouchedByTheLight = other.TouchedByTheLight;
      }
      if (other.AvengersShield != false) {
        AvengersShield = other.AvengersShield;
      }
      if (other.GuardedByTheLight != 0) {
        GuardedByTheLight = other.GuardedByTheLight;
      }
      if (other.ShieldOfTheTemplar != 0) {
        ShieldOfTheTemplar = other.ShieldOfTheTemplar;
      }
      if (other.JudgementsOfTheJust != 0) {
        JudgementsOfTheJust = other.JudgementsOfTheJust;
      }
      if (other.HammerOfTheRighteous != false) {
        HammerOfTheRighteous = other.HammerOfTheRighteous;
      }
      if (other.Deflection != 0) {
        Deflection = other.Deflection;
      }
      if (other.Benediction != 0) {
        Benediction = other.Benediction;
      }
      if (other.ImprovedJudgements != 0) {
        ImprovedJudgements = other.ImprovedJudgements;
      }
      if (other.HeartOfTheCrusader != 0) {
        HeartOfTheCrusader = other.HeartOfTheCrusader;
      }
      if (other.ImprovedBlessingOfMight != 0) {
        ImprovedBlessingOfMight = other.ImprovedBlessingOfMight;
      }
      if (other.Vindication != 0) {
        Vindication = other.Vindication;
      }
      if (other.Conviction != 0) {
        Conviction = other.Conviction;
      }
      if (other.SealOfCommand != false) {
        SealOfCommand = other.SealOfCommand;
      }
      if (other.PursuitOfJustice != 0) {
        PursuitOfJustice = other.PursuitOfJustice;
      }
      if (other.EyeForAnEye != 0) {
        EyeForAnEye = other.EyeForAnEye;
      }
      if (other.SanctityOfBattle != 0) {
        SanctityOfBattle = other.SanctityOfBattle;
      }
      if (other.Crusade != 0) {
        Crusade = other.Crusade;
      }
      if (other.TwoHandedWeaponSpecialization != 0) {
        TwoHandedWeaponSpecialization = other.TwoHandedWeaponSpecialization;
      }
      if (other.SanctifiedRetribution != false) {
        SanctifiedRetribution = other.SanctifiedRetribution;
      }
      if (other.Vengeance != 0) {
        Vengeance = other.Vengeance;
      }
      if (other.DivinePurpose != 0) {
        DivinePurpose = other.DivinePurpose;
      }
      if (other.TheArtOfWar != 0) {
        TheArtOfWar = other.TheArtOfWar;
      }
      if (other.Repentance != false) {
        Repentance = other.Repentance;
      }
      if (other.JudgementsOfTheWise != 0) {
        JudgementsOfTheWise = other.JudgementsOfTheWise;
      }
      if (other.Fanaticism != 0) {
        Fanaticism = other.Fanaticism;
      }
      if (other.SanctifiedWrath != 0) {
        SanctifiedWrath = other.SanctifiedWrath;
      }
      if (other.SwiftRetribution != 0) {
        SwiftRetribution = other.SwiftRetribution;
      }
      if (other.CrusaderStrike != false) {
        CrusaderStrike = other.CrusaderStrike;
      }
      if (other.SheathOfLight != 0) {
        SheathOfLight = other.SheathOfLight;
      }
      if (other.RighteousVengeance != 0) {
        RighteousVengeance = other.RighteousVengeance;
      }
      if (other.DivineStorm != false) {
        DivineStorm = other.DivineStorm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpiritualFocus = input.ReadInt32();
            break;
          }
          case 16: {
            SealsOfThePure = input.ReadInt32();
            break;
          }
          case 24: {
            HealingLight = input.ReadInt32();
            break;
          }
          case 32: {
            DivineIntellect = input.ReadInt32();
            break;
          }
          case 40: {
            UnyieldingFaith = input.ReadInt32();
            break;
          }
          case 48: {
            AuraMastery = input.ReadBool();
            break;
          }
          case 56: {
            Illumination = input.ReadInt32();
            break;
          }
          case 64: {
            ImprovedLayOnHands = input.ReadInt32();
            break;
          }
          case 72: {
            ImprovedConcentrationAura = input.ReadInt32();
            break;
          }
          case 80: {
            ImprovedBlessingOfWisdom = input.ReadInt32();
            break;
          }
          case 88: {
            BlessedHands = input.ReadInt32();
            break;
          }
          case 96: {
            PureOfHeart = input.ReadInt32();
            break;
          }
          case 104: {
            DivineFavor = input.ReadBool();
            break;
          }
          case 112: {
            SanctifiedLight = input.ReadInt32();
            break;
          }
          case 120: {
            PurifyingPower = input.ReadInt32();
            break;
          }
          case 128: {
            HolyPower = input.ReadInt32();
            break;
          }
          case 136: {
            LightsGrace = input.ReadInt32();
            break;
          }
          case 144: {
            HolyShock = input.ReadBool();
            break;
          }
          case 152: {
            BlessedLife = input.ReadInt32();
            break;
          }
          case 160: {
            SacredCleansing = input.ReadInt32();
            break;
          }
          case 168: {
            HolyGuidance = input.ReadInt32();
            break;
          }
          case 176: {
            DivineIllumination = input.ReadBool();
            break;
          }
          case 184: {
            JudgementsOfThePure = input.ReadInt32();
            break;
          }
          case 192: {
            InfusionOfLight = input.ReadInt32();
            break;
          }
          case 200: {
            EnlightenedJudgements = input.ReadInt32();
            break;
          }
          case 208: {
            BeaconOfLight = input.ReadBool();
            break;
          }
          case 216: {
            Divinity = input.ReadInt32();
            break;
          }
          case 224: {
            DivineStrength = input.ReadInt32();
            break;
          }
          case 232: {
            Stoicism = input.ReadInt32();
            break;
          }
          case 240: {
            GuardiansFavor = input.ReadInt32();
            break;
          }
          case 248: {
            Anticipation = input.ReadInt32();
            break;
          }
          case 256: {
            DivineSacrifice = input.ReadBool();
            break;
          }
          case 264: {
            ImprovedRighteousFury = input.ReadInt32();
            break;
          }
          case 272: {
            Toughness = input.ReadInt32();
            break;
          }
          case 280: {
            DivineGuardian = input.ReadInt32();
            break;
          }
          case 288: {
            ImprovedHammerOfJustice = input.ReadInt32();
            break;
          }
          case 296: {
            ImprovedDevotionAura = input.ReadInt32();
            break;
          }
          case 304: {
            BlessingOfSanctuary = input.ReadBool();
            break;
          }
          case 312: {
            Reckoning = input.ReadInt32();
            break;
          }
          case 320: {
            SacredDuty = input.ReadInt32();
            break;
          }
          case 328: {
            OneHandedWeaponSpecialization = input.ReadInt32();
            break;
          }
          case 336: {
            SpiritualAttunement = input.ReadInt32();
            break;
          }
          case 344: {
            HolyShield = input.ReadBool();
            break;
          }
          case 352: {
            ArdentDefender = input.ReadInt32();
            break;
          }
          case 360: {
            Redoubt = input.ReadInt32();
            break;
          }
          case 368: {
            CombatExpertise = input.ReadInt32();
            break;
          }
          case 376: {
            TouchedByTheLight = input.ReadInt32();
            break;
          }
          case 384: {
            AvengersShield = input.ReadBool();
            break;
          }
          case 392: {
            GuardedByTheLight = input.ReadInt32();
            break;
          }
          case 400: {
            ShieldOfTheTemplar = input.ReadInt32();
            break;
          }
          case 408: {
            JudgementsOfTheJust = input.ReadInt32();
            break;
          }
          case 416: {
            HammerOfTheRighteous = input.ReadBool();
            break;
          }
          case 424: {
            Deflection = input.ReadInt32();
            break;
          }
          case 432: {
            Benediction = input.ReadInt32();
            break;
          }
          case 440: {
            ImprovedJudgements = input.ReadInt32();
            break;
          }
          case 448: {
            HeartOfTheCrusader = input.ReadInt32();
            break;
          }
          case 456: {
            ImprovedBlessingOfMight = input.ReadInt32();
            break;
          }
          case 464: {
            Vindication = input.ReadInt32();
            break;
          }
          case 472: {
            Conviction = input.ReadInt32();
            break;
          }
          case 480: {
            SealOfCommand = input.ReadBool();
            break;
          }
          case 488: {
            PursuitOfJustice = input.ReadInt32();
            break;
          }
          case 496: {
            EyeForAnEye = input.ReadInt32();
            break;
          }
          case 504: {
            SanctityOfBattle = input.ReadInt32();
            break;
          }
          case 512: {
            Crusade = input.ReadInt32();
            break;
          }
          case 520: {
            TwoHandedWeaponSpecialization = input.ReadInt32();
            break;
          }
          case 528: {
            SanctifiedRetribution = input.ReadBool();
            break;
          }
          case 536: {
            Vengeance = input.ReadInt32();
            break;
          }
          case 544: {
            DivinePurpose = input.ReadInt32();
            break;
          }
          case 552: {
            TheArtOfWar = input.ReadInt32();
            break;
          }
          case 560: {
            Repentance = input.ReadBool();
            break;
          }
          case 568: {
            JudgementsOfTheWise = input.ReadInt32();
            break;
          }
          case 576: {
            Fanaticism = input.ReadInt32();
            break;
          }
          case 584: {
            SanctifiedWrath = input.ReadInt32();
            break;
          }
          case 592: {
            SwiftRetribution = input.ReadInt32();
            break;
          }
          case 600: {
            CrusaderStrike = input.ReadBool();
            break;
          }
          case 608: {
            SheathOfLight = input.ReadInt32();
            break;
          }
          case 616: {
            RighteousVengeance = input.ReadInt32();
            break;
          }
          case 624: {
            DivineStorm = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpiritualFocus = input.ReadInt32();
            break;
          }
          case 16: {
            SealsOfThePure = input.ReadInt32();
            break;
          }
          case 24: {
            HealingLight = input.ReadInt32();
            break;
          }
          case 32: {
            DivineIntellect = input.ReadInt32();
            break;
          }
          case 40: {
            UnyieldingFaith = input.ReadInt32();
            break;
          }
          case 48: {
            AuraMastery = input.ReadBool();
            break;
          }
          case 56: {
            Illumination = input.ReadInt32();
            break;
          }
          case 64: {
            ImprovedLayOnHands = input.ReadInt32();
            break;
          }
          case 72: {
            ImprovedConcentrationAura = input.ReadInt32();
            break;
          }
          case 80: {
            ImprovedBlessingOfWisdom = input.ReadInt32();
            break;
          }
          case 88: {
            BlessedHands = input.ReadInt32();
            break;
          }
          case 96: {
            PureOfHeart = input.ReadInt32();
            break;
          }
          case 104: {
            DivineFavor = input.ReadBool();
            break;
          }
          case 112: {
            SanctifiedLight = input.ReadInt32();
            break;
          }
          case 120: {
            PurifyingPower = input.ReadInt32();
            break;
          }
          case 128: {
            HolyPower = input.ReadInt32();
            break;
          }
          case 136: {
            LightsGrace = input.ReadInt32();
            break;
          }
          case 144: {
            HolyShock = input.ReadBool();
            break;
          }
          case 152: {
            BlessedLife = input.ReadInt32();
            break;
          }
          case 160: {
            SacredCleansing = input.ReadInt32();
            break;
          }
          case 168: {
            HolyGuidance = input.ReadInt32();
            break;
          }
          case 176: {
            DivineIllumination = input.ReadBool();
            break;
          }
          case 184: {
            JudgementsOfThePure = input.ReadInt32();
            break;
          }
          case 192: {
            InfusionOfLight = input.ReadInt32();
            break;
          }
          case 200: {
            EnlightenedJudgements = input.ReadInt32();
            break;
          }
          case 208: {
            BeaconOfLight = input.ReadBool();
            break;
          }
          case 216: {
            Divinity = input.ReadInt32();
            break;
          }
          case 224: {
            DivineStrength = input.ReadInt32();
            break;
          }
          case 232: {
            Stoicism = input.ReadInt32();
            break;
          }
          case 240: {
            GuardiansFavor = input.ReadInt32();
            break;
          }
          case 248: {
            Anticipation = input.ReadInt32();
            break;
          }
          case 256: {
            DivineSacrifice = input.ReadBool();
            break;
          }
          case 264: {
            ImprovedRighteousFury = input.ReadInt32();
            break;
          }
          case 272: {
            Toughness = input.ReadInt32();
            break;
          }
          case 280: {
            DivineGuardian = input.ReadInt32();
            break;
          }
          case 288: {
            ImprovedHammerOfJustice = input.ReadInt32();
            break;
          }
          case 296: {
            ImprovedDevotionAura = input.ReadInt32();
            break;
          }
          case 304: {
            BlessingOfSanctuary = input.ReadBool();
            break;
          }
          case 312: {
            Reckoning = input.ReadInt32();
            break;
          }
          case 320: {
            SacredDuty = input.ReadInt32();
            break;
          }
          case 328: {
            OneHandedWeaponSpecialization = input.ReadInt32();
            break;
          }
          case 336: {
            SpiritualAttunement = input.ReadInt32();
            break;
          }
          case 344: {
            HolyShield = input.ReadBool();
            break;
          }
          case 352: {
            ArdentDefender = input.ReadInt32();
            break;
          }
          case 360: {
            Redoubt = input.ReadInt32();
            break;
          }
          case 368: {
            CombatExpertise = input.ReadInt32();
            break;
          }
          case 376: {
            TouchedByTheLight = input.ReadInt32();
            break;
          }
          case 384: {
            AvengersShield = input.ReadBool();
            break;
          }
          case 392: {
            GuardedByTheLight = input.ReadInt32();
            break;
          }
          case 400: {
            ShieldOfTheTemplar = input.ReadInt32();
            break;
          }
          case 408: {
            JudgementsOfTheJust = input.ReadInt32();
            break;
          }
          case 416: {
            HammerOfTheRighteous = input.ReadBool();
            break;
          }
          case 424: {
            Deflection = input.ReadInt32();
            break;
          }
          case 432: {
            Benediction = input.ReadInt32();
            break;
          }
          case 440: {
            ImprovedJudgements = input.ReadInt32();
            break;
          }
          case 448: {
            HeartOfTheCrusader = input.ReadInt32();
            break;
          }
          case 456: {
            ImprovedBlessingOfMight = input.ReadInt32();
            break;
          }
          case 464: {
            Vindication = input.ReadInt32();
            break;
          }
          case 472: {
            Conviction = input.ReadInt32();
            break;
          }
          case 480: {
            SealOfCommand = input.ReadBool();
            break;
          }
          case 488: {
            PursuitOfJustice = input.ReadInt32();
            break;
          }
          case 496: {
            EyeForAnEye = input.ReadInt32();
            break;
          }
          case 504: {
            SanctityOfBattle = input.ReadInt32();
            break;
          }
          case 512: {
            Crusade = input.ReadInt32();
            break;
          }
          case 520: {
            TwoHandedWeaponSpecialization = input.ReadInt32();
            break;
          }
          case 528: {
            SanctifiedRetribution = input.ReadBool();
            break;
          }
          case 536: {
            Vengeance = input.ReadInt32();
            break;
          }
          case 544: {
            DivinePurpose = input.ReadInt32();
            break;
          }
          case 552: {
            TheArtOfWar = input.ReadInt32();
            break;
          }
          case 560: {
            Repentance = input.ReadBool();
            break;
          }
          case 568: {
            JudgementsOfTheWise = input.ReadInt32();
            break;
          }
          case 576: {
            Fanaticism = input.ReadInt32();
            break;
          }
          case 584: {
            SanctifiedWrath = input.ReadInt32();
            break;
          }
          case 592: {
            SwiftRetribution = input.ReadInt32();
            break;
          }
          case 600: {
            CrusaderStrike = input.ReadBool();
            break;
          }
          case 608: {
            SheathOfLight = input.ReadInt32();
            break;
          }
          case 616: {
            RighteousVengeance = input.ReadInt32();
            break;
          }
          case 624: {
            DivineStorm = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RetributionPaladin : pb::IMessage<RetributionPaladin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RetributionPaladin> _parser = new pb::MessageParser<RetributionPaladin>(() => new RetributionPaladin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RetributionPaladin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.PaladinReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RetributionPaladin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RetributionPaladin(RetributionPaladin other) : this() {
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RetributionPaladin Clone() {
      return new RetributionPaladin(this);
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::SirusDbScrapper.UIDatabase.RetributionPaladin.Types.Options options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SirusDbScrapper.UIDatabase.RetributionPaladin.Types.Options Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RetributionPaladin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RetributionPaladin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RetributionPaladin other) {
      if (other == null) {
        return;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::SirusDbScrapper.UIDatabase.RetributionPaladin.Types.Options();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.RetributionPaladin.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.RetributionPaladin.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the RetributionPaladin message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Rotation : pb::IMessage<Rotation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Rotation> _parser = new pb::MessageParser<Rotation>(() => new Rotation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Rotation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.RetributionPaladin.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation(Rotation other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation Clone() {
          return new Rotation(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Rotation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Rotation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Rotation other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

      public sealed partial class Options : pb::IMessage<Options>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Options> _parser = new pb::MessageParser<Options>(() => new Options());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Options> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.RetributionPaladin.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options(Options other) : this() {
          judgement_ = other.judgement_;
          seal_ = other.seal_;
          aura_ = other.aura_;
          useAvengingWrath_ = other.useAvengingWrath_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options Clone() {
          return new Options(this);
        }

        /// <summary>Field number for the "judgement" field.</summary>
        public const int JudgementFieldNumber = 1;
        private global::SirusDbScrapper.UIDatabase.PaladinJudgement judgement_ = global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.PaladinJudgement Judgement {
          get { return judgement_; }
          set {
            judgement_ = value;
          }
        }

        /// <summary>Field number for the "seal" field.</summary>
        public const int SealFieldNumber = 2;
        private global::SirusDbScrapper.UIDatabase.PaladinSeal seal_ = global::SirusDbScrapper.UIDatabase.PaladinSeal.Vengeance;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.PaladinSeal Seal {
          get { return seal_; }
          set {
            seal_ = value;
          }
        }

        /// <summary>Field number for the "aura" field.</summary>
        public const int AuraFieldNumber = 3;
        private global::SirusDbScrapper.UIDatabase.PaladinAura aura_ = global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.PaladinAura Aura {
          get { return aura_; }
          set {
            aura_ = value;
          }
        }

        /// <summary>Field number for the "use_avenging_wrath" field.</summary>
        public const int UseAvengingWrathFieldNumber = 5;
        private bool useAvengingWrath_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool UseAvengingWrath {
          get { return useAvengingWrath_; }
          set {
            useAvengingWrath_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Options);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Options other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Judgement != other.Judgement) return false;
          if (Seal != other.Seal) return false;
          if (Aura != other.Aura) return false;
          if (UseAvengingWrath != other.UseAvengingWrath) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Judgement != global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom) hash ^= Judgement.GetHashCode();
          if (Seal != global::SirusDbScrapper.UIDatabase.PaladinSeal.Vengeance) hash ^= Seal.GetHashCode();
          if (Aura != global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura) hash ^= Aura.GetHashCode();
          if (UseAvengingWrath != false) hash ^= UseAvengingWrath.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Judgement != global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Judgement);
          }
          if (Seal != global::SirusDbScrapper.UIDatabase.PaladinSeal.Vengeance) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Seal);
          }
          if (Aura != global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Aura);
          }
          if (UseAvengingWrath != false) {
            output.WriteRawTag(40);
            output.WriteBool(UseAvengingWrath);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Judgement != global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Judgement);
          }
          if (Seal != global::SirusDbScrapper.UIDatabase.PaladinSeal.Vengeance) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Seal);
          }
          if (Aura != global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Aura);
          }
          if (UseAvengingWrath != false) {
            output.WriteRawTag(40);
            output.WriteBool(UseAvengingWrath);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Judgement != global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Judgement);
          }
          if (Seal != global::SirusDbScrapper.UIDatabase.PaladinSeal.Vengeance) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Seal);
          }
          if (Aura != global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Aura);
          }
          if (UseAvengingWrath != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Options other) {
          if (other == null) {
            return;
          }
          if (other.Judgement != global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom) {
            Judgement = other.Judgement;
          }
          if (other.Seal != global::SirusDbScrapper.UIDatabase.PaladinSeal.Vengeance) {
            Seal = other.Seal;
          }
          if (other.Aura != global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura) {
            Aura = other.Aura;
          }
          if (other.UseAvengingWrath != false) {
            UseAvengingWrath = other.UseAvengingWrath;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Judgement = (global::SirusDbScrapper.UIDatabase.PaladinJudgement) input.ReadEnum();
                break;
              }
              case 16: {
                Seal = (global::SirusDbScrapper.UIDatabase.PaladinSeal) input.ReadEnum();
                break;
              }
              case 24: {
                Aura = (global::SirusDbScrapper.UIDatabase.PaladinAura) input.ReadEnum();
                break;
              }
              case 40: {
                UseAvengingWrath = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Judgement = (global::SirusDbScrapper.UIDatabase.PaladinJudgement) input.ReadEnum();
                break;
              }
              case 16: {
                Seal = (global::SirusDbScrapper.UIDatabase.PaladinSeal) input.ReadEnum();
                break;
              }
              case 24: {
                Aura = (global::SirusDbScrapper.UIDatabase.PaladinAura) input.ReadEnum();
                break;
              }
              case 40: {
                UseAvengingWrath = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class ProtectionPaladin : pb::IMessage<ProtectionPaladin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProtectionPaladin> _parser = new pb::MessageParser<ProtectionPaladin>(() => new ProtectionPaladin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ProtectionPaladin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.PaladinReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtectionPaladin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtectionPaladin(ProtectionPaladin other) : this() {
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProtectionPaladin Clone() {
      return new ProtectionPaladin(this);
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::SirusDbScrapper.UIDatabase.ProtectionPaladin.Types.Options options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SirusDbScrapper.UIDatabase.ProtectionPaladin.Types.Options Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ProtectionPaladin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ProtectionPaladin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ProtectionPaladin other) {
      if (other == null) {
        return;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::SirusDbScrapper.UIDatabase.ProtectionPaladin.Types.Options();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.ProtectionPaladin.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.ProtectionPaladin.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ProtectionPaladin message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Rotation : pb::IMessage<Rotation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Rotation> _parser = new pb::MessageParser<Rotation>(() => new Rotation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Rotation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.ProtectionPaladin.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation(Rotation other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation Clone() {
          return new Rotation(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Rotation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Rotation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Rotation other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

      public sealed partial class Options : pb::IMessage<Options>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Options> _parser = new pb::MessageParser<Options>(() => new Options());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Options> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.ProtectionPaladin.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options(Options other) : this() {
          judgement_ = other.judgement_;
          seal_ = other.seal_;
          aura_ = other.aura_;
          useAvengingWrath_ = other.useAvengingWrath_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options Clone() {
          return new Options(this);
        }

        /// <summary>Field number for the "judgement" field.</summary>
        public const int JudgementFieldNumber = 1;
        private global::SirusDbScrapper.UIDatabase.PaladinJudgement judgement_ = global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.PaladinJudgement Judgement {
          get { return judgement_; }
          set {
            judgement_ = value;
          }
        }

        /// <summary>Field number for the "seal" field.</summary>
        public const int SealFieldNumber = 2;
        private global::SirusDbScrapper.UIDatabase.PaladinSeal seal_ = global::SirusDbScrapper.UIDatabase.PaladinSeal.Vengeance;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.PaladinSeal Seal {
          get { return seal_; }
          set {
            seal_ = value;
          }
        }

        /// <summary>Field number for the "aura" field.</summary>
        public const int AuraFieldNumber = 3;
        private global::SirusDbScrapper.UIDatabase.PaladinAura aura_ = global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.PaladinAura Aura {
          get { return aura_; }
          set {
            aura_ = value;
          }
        }

        /// <summary>Field number for the "use_avenging_wrath" field.</summary>
        public const int UseAvengingWrathFieldNumber = 5;
        private bool useAvengingWrath_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool UseAvengingWrath {
          get { return useAvengingWrath_; }
          set {
            useAvengingWrath_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Options);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Options other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Judgement != other.Judgement) return false;
          if (Seal != other.Seal) return false;
          if (Aura != other.Aura) return false;
          if (UseAvengingWrath != other.UseAvengingWrath) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Judgement != global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom) hash ^= Judgement.GetHashCode();
          if (Seal != global::SirusDbScrapper.UIDatabase.PaladinSeal.Vengeance) hash ^= Seal.GetHashCode();
          if (Aura != global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura) hash ^= Aura.GetHashCode();
          if (UseAvengingWrath != false) hash ^= UseAvengingWrath.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Judgement != global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Judgement);
          }
          if (Seal != global::SirusDbScrapper.UIDatabase.PaladinSeal.Vengeance) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Seal);
          }
          if (Aura != global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Aura);
          }
          if (UseAvengingWrath != false) {
            output.WriteRawTag(40);
            output.WriteBool(UseAvengingWrath);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Judgement != global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Judgement);
          }
          if (Seal != global::SirusDbScrapper.UIDatabase.PaladinSeal.Vengeance) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Seal);
          }
          if (Aura != global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Aura);
          }
          if (UseAvengingWrath != false) {
            output.WriteRawTag(40);
            output.WriteBool(UseAvengingWrath);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Judgement != global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Judgement);
          }
          if (Seal != global::SirusDbScrapper.UIDatabase.PaladinSeal.Vengeance) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Seal);
          }
          if (Aura != global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Aura);
          }
          if (UseAvengingWrath != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Options other) {
          if (other == null) {
            return;
          }
          if (other.Judgement != global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom) {
            Judgement = other.Judgement;
          }
          if (other.Seal != global::SirusDbScrapper.UIDatabase.PaladinSeal.Vengeance) {
            Seal = other.Seal;
          }
          if (other.Aura != global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura) {
            Aura = other.Aura;
          }
          if (other.UseAvengingWrath != false) {
            UseAvengingWrath = other.UseAvengingWrath;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Judgement = (global::SirusDbScrapper.UIDatabase.PaladinJudgement) input.ReadEnum();
                break;
              }
              case 16: {
                Seal = (global::SirusDbScrapper.UIDatabase.PaladinSeal) input.ReadEnum();
                break;
              }
              case 24: {
                Aura = (global::SirusDbScrapper.UIDatabase.PaladinAura) input.ReadEnum();
                break;
              }
              case 40: {
                UseAvengingWrath = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Judgement = (global::SirusDbScrapper.UIDatabase.PaladinJudgement) input.ReadEnum();
                break;
              }
              case 16: {
                Seal = (global::SirusDbScrapper.UIDatabase.PaladinSeal) input.ReadEnum();
                break;
              }
              case 24: {
                Aura = (global::SirusDbScrapper.UIDatabase.PaladinAura) input.ReadEnum();
                break;
              }
              case 40: {
                UseAvengingWrath = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class HolyPaladin : pb::IMessage<HolyPaladin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HolyPaladin> _parser = new pb::MessageParser<HolyPaladin>(() => new HolyPaladin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HolyPaladin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SirusDbScrapper.UIDatabase.PaladinReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HolyPaladin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HolyPaladin(HolyPaladin other) : this() {
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HolyPaladin Clone() {
      return new HolyPaladin(this);
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::SirusDbScrapper.UIDatabase.HolyPaladin.Types.Options options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SirusDbScrapper.UIDatabase.HolyPaladin.Types.Options Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HolyPaladin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HolyPaladin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HolyPaladin other) {
      if (other == null) {
        return;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::SirusDbScrapper.UIDatabase.HolyPaladin.Types.Options();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.HolyPaladin.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 26: {
            if (options_ == null) {
              Options = new global::SirusDbScrapper.UIDatabase.HolyPaladin.Types.Options();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the HolyPaladin message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Rotation : pb::IMessage<Rotation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Rotation> _parser = new pb::MessageParser<Rotation>(() => new Rotation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Rotation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.HolyPaladin.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation(Rotation other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rotation Clone() {
          return new Rotation(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Rotation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Rotation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Rotation other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

      public sealed partial class Options : pb::IMessage<Options>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Options> _parser = new pb::MessageParser<Options>(() => new Options());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Options> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SirusDbScrapper.UIDatabase.HolyPaladin.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options(Options other) : this() {
          judgement_ = other.judgement_;
          aura_ = other.aura_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Options Clone() {
          return new Options(this);
        }

        /// <summary>Field number for the "judgement" field.</summary>
        public const int JudgementFieldNumber = 1;
        private global::SirusDbScrapper.UIDatabase.PaladinJudgement judgement_ = global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.PaladinJudgement Judgement {
          get { return judgement_; }
          set {
            judgement_ = value;
          }
        }

        /// <summary>Field number for the "aura" field.</summary>
        public const int AuraFieldNumber = 2;
        private global::SirusDbScrapper.UIDatabase.PaladinAura aura_ = global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::SirusDbScrapper.UIDatabase.PaladinAura Aura {
          get { return aura_; }
          set {
            aura_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Options);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Options other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Judgement != other.Judgement) return false;
          if (Aura != other.Aura) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Judgement != global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom) hash ^= Judgement.GetHashCode();
          if (Aura != global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura) hash ^= Aura.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Judgement != global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Judgement);
          }
          if (Aura != global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Aura);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Judgement != global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Judgement);
          }
          if (Aura != global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Aura);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Judgement != global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Judgement);
          }
          if (Aura != global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Aura);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Options other) {
          if (other == null) {
            return;
          }
          if (other.Judgement != global::SirusDbScrapper.UIDatabase.PaladinJudgement.JudgementOfWisdom) {
            Judgement = other.Judgement;
          }
          if (other.Aura != global::SirusDbScrapper.UIDatabase.PaladinAura.NoPaladinAura) {
            Aura = other.Aura;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Judgement = (global::SirusDbScrapper.UIDatabase.PaladinJudgement) input.ReadEnum();
                break;
              }
              case 16: {
                Aura = (global::SirusDbScrapper.UIDatabase.PaladinAura) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Judgement = (global::SirusDbScrapper.UIDatabase.PaladinJudgement) input.ReadEnum();
                break;
              }
              case 16: {
                Aura = (global::SirusDbScrapper.UIDatabase.PaladinAura) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
